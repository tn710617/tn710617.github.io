{"pages":[{"title":"About Me","text":"I’m a backend programmerOnce I was a career soldier. During the drills, I took sky as my quilt, and the earth as my bed, sitting on the meadow next to my comrades, exchanging knowing smiles, looking up the sky dotted with stars without light pollution, and of course, without taking a bath for over 1 week. It’s such an unforgettable experience. Sometimes I lapsed into this kind of reminiscence. however, which, I don’t want to experience anymore in the rest of my life. I was an international salesman. I found that there was some uncannily striking resemblance between the insistence of Japanese on SOP, and that of Jew on cost.Actually, office staff in US does not get overtime pay either.The first time I met Dutch face to face, the first impression I got was if they were descended from The GiantIn the battle, Jew has to wait for the first shot from their enemy and so they could fire back. “What if you got shot at the first shot from your enemy?” I asked. “Oh, that would be your fate” The Jew replied.Currently I am a programmer. How lucky I am, I had a serendipity with coding. I like any form of languages. When I feel like talking to people, I speak human language. When I prefer to be alone, I speak machine language. I’m enamoured with the contrast between the delicacy and strictness of machine language. The nonstop developing technology constantly surprises me while fulfilling my great appetite for knowledge. I do not need an alarm every morning. The scalding blood in my vein wakes me up, and the excitement for a new day dissipates the sleepiness, because on this new day, I can think, I can learn, and convert my logic and idea into a sophisticated, elegant, and exquisite language.","link":"/about/index.html"},{"title":"archives","text":"","link":"/archives/index.html"},{"title":"categories","text":"","link":"/categories/index.html"},{"title":"friends","text":"","link":"/friends/index.html"},{"title":"Schedule","text":"2019/6/11the result of my target yesterday Task: Have a meeting with ST, Raymond, and OY Linux English Japanese achieved except for set target yesterdaydescriptiontoday’s target Task: Working on DNS function Linux English Japanese JavaScript 2019/6/10the result of my target yesterday Task: Figured out how to add a Load-Balancing with gcloud Got stuck on SSH issue instead. However, I learnt something from it. Linux English Japanese JavaScript The Principles of Object-Oriented JavaScript achieved except for set target yesterdaydescriptiontoday’s target Task: Have a meeting with ST, Raymond, and OY Linux English Japanese 2019/6/9the result of my target yesterday Task: Figured out how to add a Load-Balancing with gcloud Linux English Japanese JavaScript The Principles of Object-Oriented JavaScript Today I will go out with friends for dinner, I hope that I will still finish my schedule achieved except for set target yesterdaydescriptiontoday’s target Task: Figured out how to add a Load-Balancing with gcloud Linux English Japanese JavaScript The Principles of Object-Oriented JavaScript 2019/6/8the result of my target yesterday Task: Transfer the drawing from HackMD to Draw.io Figured out how to add a Load-Balancing with gcloud Linux English Japanese JavaScript The Principles of Object-Oriented JavaScript achieved except for set target yesterdaydescriptiontoday’s target Task: Figured out how to add a Load-Balancing with gcloud Linux English Japanese JavaScript The Principles of Object-Oriented JavaScript Today I will go out with friends for dinner, I hope that I will still finish my schedule 2019/6/7the result of my target yesterday Task: Discuss with Raymond to finalize initial version, and discuss with ST Linux English Japanese JavaScript The Principles of Object-Oriented JavaScript achieved except for set target yesterdaydescriptiontoday’s target Task: Transfer the drawing from HackMD to Draw.io Figured out how to add a Load-Balancing with gcloud Linux English Japanese JavaScript The Principles of Object-Oriented JavaScript 2019/6/6the result of my target yesterday Task: Discuss with Raymond to finalize initial version of programming process drawing and make it with draw.io Raymond pointed out some errors, to be revised and resubmitted Linux English Japanese achieved except for set target yesterdaydescriptiontoday’s target Task: Discuss with Raymond to finalize initial version, and discuss with ST Linux English Japanese JavaScript The Principles of Object-Oriented JavaScript 2019/6/5the result of my target yesterday Task: Revised the data path according to the discussion yesterday. Linux English Japanese achieved except for set target yesterdaydescriptiontoday’s target Task: Discuss with Raymond to finalize initial version of programming process drawing and make it with draw.io Linux English Japanese 2019/6/4the result of my target yesterday Task: Completed logic part and compare with ST’s data path Completed first version of scratch, and had a discussion with Raymond Linux English Japanese achieved except for set target yesterdaydescriptiontoday’s target Task: Revised the data path according to the discussion yesterday. Linux English Japanese 2019/6/3the result of my target yesterday Task: Add new Japanese vocabulary card Linux English Japanese achieved except for set target yesterdaydescriptiontoday’s target Task: Completed logic part and compare with ST’s data path Linux English Japanese 2019/6/2the result of my target yesterday task: add new japanese vocabulary card Linux English Japanese achieved except for set target yesterdaydescriptiontoday’s target Task: Add new Japanese vocabulary card Linux English Japanese 2019/6/1the result of my target yesterday Task: Working on architecture of Cloud API Initially finished Ready Pool and Bootstrap Linux English Japanese achieved except for set target yesterdaydescriptiontoday’s target Task: add new japanese vocabulary card Linux English Japanese 2019/5/31the result of my target yesterday Task: Working on architecture of Cloud API Started working on Discover Service Linux English Japanese achieved except for set target yesterdaydescriptiontoday’s target Task: Working on architecture of Cloud API Linux English Japanese 2019/5/30the result of my target yesterday Task: Working on architecture of Cloud API Initially completed Ready Pool and Bootstrap Help Raymond to check edge condition Linux English Japanese achieved except for set target yesterdaydescriptiontoday’s target Task: Working on architecture of Cloud API Linux English Japanese 2019/5/29the result of my target yesterday Task: A meeting in Hsinchu Linux English Japanese achieved except for set target yesterdaydescriptiontoday’s target Task: Working on architecture of Cloud API Linux English Japanese 2019/5/28the result of my target yesterday Task: Completed edge-ip-revising API Still working on GCP Cloud DNS documentation Linux English Japanese achieved except for set target yesterdaydescriptiontoday’s target Task: A meeting in Hsinchu Linux English Japanese 2019/5/27the result of my target yesterday Task: Completed a course in Qwiklab Watch Game of Thrones instead, I was guilty! Fix my windows computer Containerise HX-API Watch Game of Thrones instead, I was guilty! Linux English Japanese achieved except for set target yesterdaydescriptiontoday’s target Task: Completed edge-ip-revising API Linux English Japanese 2019/5/26the result of my target yesterday Task add getting new ip feature to monitor api Organising what I have learnt those weeks English Japanese achieved except for set target yesterdaydescriptiontoday’s target Task Completed a course in Qwiklab Fix my windows computer Containerise HX-API Linux English Japanese 2019/5/25the result of my target yesterday Task review merge request of monitor api add getting new ip feature to monitor api working on onedgeipchange api English Japanese achieved except for set target yesterdaydescriptiontoday’s target Task add getting new ip feature to monitor api Organising what I have learnt those weeks English Japanese 2019/5/24the result of my target yesterday Task figured out how edge dns works English Japanese achieved except for set target yesterdaydescriptiontoday’s target Task review merge request of monitor api add getting new ip feature to monitor api working on onedgeipchange api English Japanese 2019/5/23The result of my target yesterday Task Comment issue 302~310 Have a meeting with Raymond English Japanese achieved except for set target yesterdaydescriptiontoday’s target Task Working on API developing and refactoring. English Japanese 2019/5/22The result of my target yesterday Task Added new feature into monitor API English Japanese achieved except for set target yesterdaydescriptiontoday’s target Task Comment issue 302~310 Have a meeting with Raymond English Japanese 2019/5/21The result of my target yesterday Task English Japanese achieved except for set target yesterdaydescriptiontoday’s target Task Added new feature into monitor API English Japanese 2019/5/20The result of my target yesterday Task English Japanese achieved except for set target yesterdaydescriptiontoday’s target Organise what I learnt those weeks English Japanese 2019/5/19The result of my target yesterday Organise what I learnt those weeks Completed gitlac CI/CD on GCP virtual machine document organisation English Japanese achieved except for set target yesterdaydescriptiontoday’s target Task Figure out checkEdgeAlive API Complete issue 302~310 English Japanese 2019/5/18The result of my target yesterday Organise what I learnt those weeks Organised Gitlab CI/CD English Japanese achieved except for set target yesterdaydescriptiontoday’s target Organise what I learnt those weeks English Japanese 2019/5/17The result of my target yesterday Task I would like to complete API support feature of the healthCheck function, however, it depends on the task English Japanese achieved except for set target yesterdaydescriptiontoday’s target Organise what I learnt those weeks English Japanese 2019/5/16The result of my target yesterday Task Understand the logic of checkEdgeAlive API - Then, we optimise the healthCheck function instead. English Japanese achieved except for set target yesterdaydescriptiontoday’s target Task I would like to complete API support feature of the healthCheck function, however, it depends on the task English Japanese 2019/5/15The result of my target yesterday Task Come out with a solution for checkEdgeAlive issue: Completed a health check program to check the health per 10 minutes for temporary solution. English Japanese achieved except for set target yesterdaydescriptiontoday’s target Task Understand the logic of checkEdgeAlive API English Japanese 2019/5/15The result of my target yesterday Task Initially fixed issue from 302 to 310 English Japanese achieved except for set target yesterdaydescriptiontoday’s target Task Come out with a solution for checkEdgeAlive issue English Japanese 2019/5/14The result of my target yesterday Task Understand the logic of API implementation of QCDN. English Japanese achieved except for set target yesterdaydescriptiontoday’s target Task Solve issue 302~310 English Japanese 2019/5/13The result of my target yesterday Task Understand the logic of API implementation of QCDN. Deploy Node.js project on Google App Engine English Japanese achieved except for set target yesterdaydescriptiontoday’s target Task Understand the logic of API implementation of QCDN. English Japanese 2019/5/12The result of my target yesterday Task Figured out how to use breakpoint feature in PHPStorm. English Japanese achieved except for set target yesterdaydescriptiontoday’s target Task Understand the logic of API implementation of QCDN. English Japanese 2019/5/11The result of my target yesterday Task Have initially completed the database organising, however, still have to change the logic of API implementation. English Japanese achieved except for set target yesterdaydescriptiontoday’s target Task Figure out how to use IDE breakpoint feature English Japanese 2019/5/10The result of my target yesterday Task Have figured out the logic, still working on it. English Japanese achieved except for set target yesterdaydescriptiontoday’s target Task Fix siteEdge unmatched data issue English Japanese 2019/5/9The result of my target yesterday English Japanese Task Got siteEdge.host unmatched from either site.host or site.cname Learnt how to build a site achieved except for set target yesterdaydescriptiontoday’s target Task Fix siteEdge unmatched data issue English Japanese 2019/5/8The result of my target yesterday English Japanese node.js How to insert data into datastore achieved except for set target yesterdaydescriptiontoday’s target Task English Japanese 2019/5/7The result of my target yesterday English Japanese A go over with Eddie and Raymond achieved except for set target yesterdaydescriptiontoday’s target node.js English Japanese 2019/5/6The result of my target yesterday English Japanese Gitlab CI Load Balance achieved except for set target yesterdaydescriptiontoday’s target node.js English Japanese 2019/5/5The result of my target yesterday English Japanese Gitlab CI Load Balance achieved except for set target yesterdaydescriptiontoday’s target node.js English Japanese 2019/5/4The result of my target yesterday node.js English Japanese Gitlab CI achieved except for set target yesterdaydescriptiontoday’s target node.js English Japanese 2019/5/3The result of my target yesterday node.js English Japanese Gitlab CI achieved except for set target yesterdaydescriptiontoday’s target node.js English Japanese 2019/5/2The result of my target yesterday node.js add a new route in Express.js make different routes with different prefixes in Express.js send status code in Express.js docker English Japanese achieved except for set target yesterdaydescriptiontoday’s target node.js docker English Japanese Gitlab CI 2019/5/1The result of my target yesterday node.js Implementing mass delete and get function in GCP Datastore docker English Japanese achieved except for set target yesterdaydescriptiontoday’s target node.js docker English Japanese History","link":"/schedule/index.html"},{"title":"tags","text":"","link":"/tags/index.html"},{"title":"History","text":"2019AprilMarchFebruaryJanuary 2018DecemberNovember","link":"/schedule/History/index.html"},{"title":"December 2018","text":"2018/12/31The result of my target yesterday [ ] linux: 鳥哥的linux基礎篇 i read some book not related to coding yesterday. i was guilty! [ ] git: pro git i read some book not related to coding yesterday. i was guilty! [x] challenge20181217 rewriting paymentdetail function getachievedachievement function getpossessions function profile function DescriptionToday’s target linux: 鳥哥的linux基礎篇 git: pro git challenge20181217 rewriting deposit achievement 2018/12/30The result of my target yesterday [ ] linux: 鳥哥的linux基礎篇 i read some book not related to coding yesterday. i was guilty! [ ] git: pro git i read some book not related to coding yesterday. i was guilty! [x] challenge20181217 rewriting shop system function rewriting DescriptionToday’s target linux: 鳥哥的linux基礎篇 git: pro git challenge20181217 rewriting getachievedachievement getachievedachievement function getpossessions function profile function 2018/12/29The result of my target yesterday [x] linux: 鳥哥的linux基礎篇 head -n number filename tail -f filename cat -n filename | tail -n [x] git: pro git how to revert a merged commit and undo all the changes introduced by the branch being merged?git revert -m 1 commitid if i reverted a merged commit and chose the parent, what if i want to merge it again?revert the reverted commit when merging, how to skip mamually resolving and just choose the side we choose? git merge branchname -xours or git merge branchname -xtheirs challenge20181217 rewriting shop system function rewriting went to a movie theater. DescriptionToday’s target linux: 鳥哥的linux基礎篇 git: pro git challenge20181217 rewriting shop system function rewriting 2018/12/28The result of my target yesterday [x] linux: 鳥哥的linux基礎篇 nl -ba filename nl -bt filename nl -w filename nl -nln filename nl -nrn filename nl -nrz filename [x] git: pro git git merge -xignore-all-space git merge -xignore-space-change git log --oneline --left-right --merge -p (option) challenge20181217 rewriting readability of achievement function shop system function rewriting to be completed today DescriptionToday’s target linux: 鳥哥的linux基礎篇 git: pro git challenge20181217 rewriting shop system function rewriting 2018/12/27The result of my target yesterday linux: 鳥哥的linux基礎篇 cat -a cat -b cat -e cat -n cat -t cat -v [x] git: pro git git filter-branch --subdirectory-filter directoryname head git filter-branch --commit-filter &apos; if [ &quot;$git_author_email&quot; = &quot;currentemail&quot; ] ; then git_author_name=&quot;newauthornameyouwanttobe&quot;; git_author_email=&quot;newemailyouwanttobe&quot;; git commit-tree &quot;$@&quot;; else git commit-tree &quot;$@&quot;; fi&apos; head rewrite challenge20181217 achievement function achievement function was completed, but need to improvie its readability Achieved except for set target yesterdayDescriptionToday’s target linux: 鳥哥的linux基礎篇 git: pro git challenge20181217 rewriting readability of achievement function shop system function rewriting2018/12/26 The result of my target yesterday linux: 鳥哥的linux基礎篇 went to ktv instead git: pro git went to ktv instead rewrite challenge20181217 getachievementlist &amp; getitemlist api was completed Achieved except for set target yesterdayDescriptionToday’s target linux: 鳥哥的linux基礎篇 git: pro git i think i need to focus on my challenge code rework until i finish it 2018/12/25The result of my target yesterday linux: 鳥哥的linux基礎篇辦事項 git: pro git git commit –amend –no-edit git commit filter-branch –tree-filter –all ‘rm -f file’ head laracast: the_php_practitioner recap 23 rameke my git presentation from keynote to hackmd (2/5) rewrite challenge20181217 redesign tables Achieved except for set target yesterdayDescriptionToday’s target linux: 鳥哥的linux基礎篇 git: pro git i think i need to focus on my challenge code rework until i finish it 2018/12/24The result of my target yesterday linux: 鳥哥的linux基礎篇辦事項 git: pro git - git grep filename -n &amp; git grep filename -n laracast: the_php_practitioner recap 23 rameke my git presentation from keynote to hackmd (1/5) Achieved except for set target yesterdayDescriptionToday’s target linux: 鳥哥的linux基礎篇 git: pro git laracast: the_php_practitioner recap 23 rameke my git presentation from keynote to hackmd (2/5) 2018/12/23The result of my target yesterday figure out how to use moment of js to covert the timezone from utc to where you are - not completed yet wondering presentation - completed Achieved except for set target yesterdayDescriptionToday’s target linux: 鳥哥的linux基礎篇 git: pro git laracast: the_php_practitioner recap 23 rameke my git presentation from keynote to hackmd (1/5) 2018/12/22The result of my target yesterday challenge 20181221 passed figure out how to use moment of js to covert the timezone from utc to where you are - not completed yet Achieved except for set target yesterdayDescriptionToday’s target wondering presentation 2018/12/21The result of my target yesterday challenge 20181220 passed Achieved except for set target yesterdayDescriptionToday’s target don’t special game challenge 20181221 2018/12/20The result of my target yesterday challenge 20181219 passed Achieved except for set target yesterdayDescriptionToday’s target challenge 20181220 2018/12/19The result of my target yesterday challenge 20181218 passed Achieved except for set target yesterdayDescriptionToday’s target challenge 20181219 2018/12/18The result of my target yesterday challenge 20181217 passed Achieved except for set target yesterdayDescriptionToday’s target challenge 20181218 2018/12/17The result of my target yesterdaylaravel warming up laravel warm up Achieved except for set target yesterdayDescriptionToday’s target challenge 20181217 2018/12/16The result of my target yesterdaylaracast focus on laravel warming up first laravel warming up laravel_5.7_from_scratch series (9~12/36) linux: focus on laravel warming up first git git add -i revert git add -p git reset -p git stash apply –index git stash –keep-index git add -i update Achieved except for set target yesterdayDescriptionToday’s target laravel- warming up for challenge next week 2018/12/15The result of my target yesterdaylaracast recap the php practitioner series (22/25) laravel warming up laravel_5.7_from_scratch series (4~8/36) linux: what’s cp -s? waht’s cp -r? waht’s cp -u? waht’s cp –preserve=all? if there are two sources when placing cp command, what the destination should be? waht’s cp –preserve=all? git git log origin/master..head git log master..test git log ^master test git log test –not master git log test develop ^master git log test develop –not master Achieved except for set target yesterdayDescriptionToday’s target linux: 鳥哥的linux基礎篇 git: pro git laracast: the_php_practitioner recap 23 laravel- warming up for challenge next week 2018/12/14The result of my target yesterdaylaracast recap the php practitioner series (21/25) laravel warming up laravel_5.7_from_scratch series (1~3/36) linux: what’s cp -a? what’s cp -d? what’s cp -f? what’s cp -i? what’s cp -l? what’s cp -p? git git rebase -i ‘wondering’ presentation perfectly done Achieved except for set target yesterdayDescriptionToday’s target linux: 鳥哥的linux基礎篇 git: pro git laracast: the_php_practitioner recap 22 laravel- warming up for challenge next week 2018/12/13The result of my target yesterdaylaracast the php practitioner series (19~20/25) linux: what’s in /var/spool folder of linux? what’s ls -a? what’s ls -f? what’s ls -h? what’s ls -i? what’s ls -n? what’s ls -r? what’s ls -r? what’s ls -s? what’s ls -t? what’s ls –full-time? challenge 20181212 passed git git rebase -i Achieved except for set target yesterdayDescriptionToday’s target linux: 鳥哥的linux基礎篇 git: pro git laracast: the_php_practitioner recap 21 ‘wondering’ presentation laravel- warming up for challenge next week 2018/12/12The result of my target yesterdaylaracast no time for it. linux: what’s in /var/spool folder of linux? what’s nfs in full name? what’s lsb in full name? how to show true path rather than link path when using pwd? how to create folders through multipal layers? how to give authority when creating a folder? how to show $path? how to add a folder into $path? what’s ls -a? challenge 20181211 passed adaptor make every single book an object how to pass outside variable into closure git github notification flicked through github api and github hooks Achieved except for set target yesterdayDescriptionToday’s target linux: 鳥哥的linux基礎篇 git: pro git laracast: the_php_practitioner recap 18~? challenge 20181212 ‘wondering?’ rehersal 2018/12/11The result of my target yesterdaylaracast have completed recapping of 15~17 linux: what’s in /include folder of linux? what’s in /libexec folder of linux? what’s in /usr/src folder of linux? what’s in /var folder of linux? what’s in /var/cache folder of linux? what’s in /var/lib folder of linux? what’s in /var/lock folder of linux? what’s in /var/log folder of linux? what’s in /var/mail folder of linux? what’s in /usr folder of linux? what’s in /usr/bin folder of linux? challenge 20181210 passed git how to fetch all pull-requests without adding them as remotesfetch = +refs/pull//head:refs/remotes/origin/pr/ Achieved except for set target yesterdayDescriptionToday’s target linux: 鳥哥的linux基礎篇 git: pro git laracast: the_php_practitioner recap 18~? challenge 20181211 2018/12/10The result of my target yesterdaylaracast the_php_practitioner series (25/25) was completed. have recapped the_php_practitioner 1~15. linux: what’s in /usr folder of linux? what’s in /usr/bin folder of linux? what’s in /usr/lib folder of linux? what’s in /usr/local folder of linux? what’s in /usr/sbin folder of linux? what’s in /usr/share folder of linux? what’s in /usr/games folder of linux? what’s in /home folder of linux? what’s in /lib qual folder of linux? what’s in /root qual folder of linux? what’s in /proc qual folder of linux? what’s in /sys folder of linux? git if you see something like pull request does not merge cleanly in github, what should you do?① add the original repository as a remote named “upstream”② fetch the newest work from that remote③ merge the main branch of that repository into your topic branch④ fix the conflict that occurred⑤ push back up to the same topic branch how could we reference issue or pull-request on github?## how to use task list on github? write the code write all the tests document the code Achieved except for set target yesterdayDescriptionToday’s target linux: 鳥哥的linux基礎篇 git: pro git laracast: the_php_practitioner recap challenge 20181210 2018/12/9The result of my target yesterdaylaracast having completed episode 24, and will recap it again and push it to github linux: what’s in /home folder of linux? what’s in /lib qual folder of linux? what’s in /root folder of linux? what’s in /lost+found folder of linux? what’s in /proc folder of linux? what’s in /sys folder of linux? git what are the steps to create a pull-request on github?① clone our fork of the project locally② create a descriptive topic branch③ make our change to the code④ check that the change is good⑤ commit our change to the topic branch⑥ push our new topic branch back up to our github fork how to condense a whole feature branch into a single commit and push it to master branch as production branch. Achieved except for set target yesterdayDescriptionToday’s target linux: 鳥哥的linux基礎篇 git: pro git laracast: the_php_practitioner (24/25) recap and (25/25) 2018/12/8The result of my target yesterdaylaracast having completed episode 23 and pushed it to github linux: what’s in /media folder of linux? what’s in /mnt folder of linux? what’s in /opt folder of linux? what’s in /run folder of linux? what’s in /sbin folder of linux? what’s in /srv folder of linux? what’s in /tmp folder of linux? The Wondering having completed presentation for ‘wondering’ next week. git i didn’t have time for it yesterday. Achieved except for set target yesterdayDescriptionToday’s target linux: 鳥哥的linux基礎篇 git: pro git laracast: the_php_practitioner (24/25) 2018/12/7The result of my target yesterdaylaracast yesterday i didn’t watch it at all, my goodness. i must finish it today and move on! linux: what’s in /bin folder of linux? what’s in /boot folder of linux? what’s in /dev folder of linux? what’s in /etc folder of linux? what’s in /lib folder of linux? The Wondering both rehersal and presentation were perfectly done. Achieved except for set target yesterday sharing what i learnt from the deployment event at tuesday night with the whole backend team. DescriptionToday’s target presentation for The Wondering next week, or perhaps the week after that. linux: 鳥哥的linux基礎篇 git: pro git laracast: the php practitioner(23/25) recap, and push every step of it on github 2018/12/6The result of my target yesterdaylaracast finally, i finished episode (23/25) yesterday. i will try to recap it again and push each step on github linux: when installing package, why it shows 403 forbidden? the limit of length of the name of files and repositories in linux. fhs - filesystem hierarchy standard the purpose of fhs four types of repositories in linux explanation of four types of repositories - shareable, unshareable, static, variable three defaultly defined repositries by fhs The Wondering i have finished rehersal one time, and am going to do that again before presentation.Achieved except for set target yesterdayDescriptionToday’s target The Wondering rehersal before presentation linux: 鳥哥的linux基礎篇 laracast: the php practitioner(23/25) recap, and push every step of it on github 2018/12/5The result of my target yesterdaylaracast still stuck on the_php_practitioner episode 23. maybe bacause i stayed up late the night before last night with whole backend working server deployment, yesterday i was too groggy to figure it out. i have to finish it today!git: gpg security keys for git tag signituressl: having completed ssl hand-on experiment. linux: recap authority command with jett and soj. i was supposed to read linux book last night, however, i passed out as soon as i took a shower. Achieved except for set target yesterdayDescriptionToday’s target laracast: the php practitioner(23/25) The Wondering rehersal linux: 鳥哥的linux基礎篇 2018/12/4The result of my target yesterdaylaracast the php practitioner (23/25). i was scheduled to finish episode 23 yesterday. however, the whole backend team and i were working on server configuration and deployment all day long, and i will manage to finish it today. git: as above mentioned, i counldn’t manage any time for git yesterday. linux: what’s link file what’s data file what’s device file what are block and character of device file what’s socket file what’s fifo file Achieved except for set target yesterday ssl signature frontend and backend deployment on server with apache.DescriptionToday’s target laracast: the php practitioner(23/25) git: pro git linux: 鳥哥的linux基礎篇 ssl signature hand-on experiment.2018/12/3 The result of my target yesterdaylaracast the php practitioner (23/25), i’ve recapped the logic, and ready to go further. git: hand-on experiment on rerere function linux: chmod ugoa, +-=, rwx rules of authority for files and repositories regular file: ascii, data, binary how to read data file - last how to read ascii file - cat The Wondering completed Achieved except for set target yesterdayDescriptionToday’s target laracast: the php practitioner(23/25) git: pro git linux: 鳥哥的linux基礎篇2018/12/2 The result of my target yesterdaylaracast the php practitioner (23/25): i spent a lot of time recaping what i’d leart before backend challenge. i think i will need more time to retrive the logic before getting later episode. git: merging work flow large-merging workflow git config –global rerere.enabled true linux: chgrp [-r] groupname filename chown [-r] user:group filenameorrepositoryname chmod [-r] xyz filenameorrepositoryname docker: create a dockerfile build a dockerfile run a dockerfile push a dockerfile rough concept of docker Achieved except for set target yesterdayDescriptionToday’s target laracast: the php practitioner series git linux presentation of The Wondering for next week. 2018/12/1The result of my target yesterdayapache and nginx: having learnt how to use either apache or nginx as reverse proxy and proxy_pass to webserver with whatever headers that are required. git: create a branch based off another branch - git branch thebranchyouwant thebranchyouwouldliketobebasedoff will git reflog be pushed? - no can i pull from repositories that haven’t been added as remote? - yes how to pull from repositories that haven’t been saved as remote - git pull theurl, append –allow-unrelated-histories if not related. it shows only the work your current topic branch has introduced since its common ancestor with master - git diff master…meatlinux: drwxrwxrwx, what does d mean? -rwxrwxrwx, what does - mean? lrwxrwxrwx, what does l mean? brwxrwxrwx, what does b mean? crwxrwxrwx, what does c mean?DescriptionToday’s target laracast: the php practitioner series attending docker speech held on good idea studio git linux","link":"/schedule/2018/December/index.html"},{"title":"November 2018","text":"2018/11/30The result of my target yesterday ‘The Wondering’ sharing was perfectily done. having learnt the purpose of $remote_addr and $proxy_add_x_forwarded_forAchieved except for set target yesterdayDescription Today’s target go deeper into apache and nginx config git linux 2018/11/29The result of my target yesterday having learnt how to use apache with php-fpmAchieved except for set target yesterday having completed backend challenge of second roundDescription Today’s target go deeper into apache and nginx config share git in ‘The Wondering’ 2018/11/28The result of my target yesterday backend challenge was completedAchieved except for set target yesterday DescriptionToday’s target go deeper into apache config 2018/11/27The result of my target yesterdayAchieved except for set target yesterdayDescriptionToday’s target aws ec2, eip, security group server default environment apache, nginx installation and config","link":"/schedule/2018/November/index.html"},{"title":"April 2019","text":"2019/4/30The result of my target yesterday node.js Implementing MVC on Express.js docker English Japanese achieved except for set target yesterdaydescriptiontoday’s target node.js docker English Japanese 2019/4/29The result of my target yesterday English docker Japanese Node.js Working on documentation of GCP Mountain hiking achieved except for set target yesterdaydescriptiontoday’s target node.js docker English Japanese 2019/4/28The result of my target yesterday English docker Japanese Node.js Working on documentation of GCP IWD worker achieved except for set target yesterdaydescriptiontoday’s target node.js docker English Japanese 2019/4/27The result of my target yesterday English docker Japanese Node.js Build an app server with express.js achieved except for set target yesterdaydescriptiontoday’s target node.js docker English Japanese 2019/4/26The result of my target yesterday English Japanese Node.js Go deeper into event loop What’s event loop Every phase in event loop timers I/O callbacks idle, prepare poll check close callbacks achieved except for set target yesterdaydescriptiontoday’s target node.js docker English Japanese 2019/4/25The result of my target yesterday English Japanese Node.js Parsing request bodies Understanding the concept of event driven Blocking and Non-Blocking Code Roughly reading through event loop achieved except for set target yesterdaydescriptiontoday’s target node.js docker English Japanese 2019/4/24The result of my target yesterday English Japanese Node.js module create a rudimentary server end a loop get information we want from request define response rudimentary request routing achieved except for set target yesterdaydescriptiontoday’s target node.js docker English Japanese 2019/4/23The result of my target yesterday English Japanese Get deeper into Docker Write down current progressAchieved except for set target yesterdayDescriptionToday’s target English Japanese Node.js 2019/4/22The result of my target yesterday English Japanese Get deeper into Docker Completed my first image made by Docker commitAchieved except for set target yesterdayDescriptionToday’s target English Japanese Get deeper into Docker 2019/4/21The result of my target yesterday English Japanese Get deeper into Docker Docker commit Achieved except for set target yesterdayDescriptionToday’s target English Japanese Get deeper into Docker 2019/4/20The result of my target yesterday English Japanese Get deeper into Docker docker tag, docker push, docker volume, docker save Achieved except for set target yesterdayDescriptionToday’s target English Japanese Get deeper into Docker 2019/4/19The result of my target yesterday English Japanese Finish Inboxer project Get deeper into Docker Create a MySQL container and connect to it while another MySQL is installed locally. That is, I could connect to two MySQLs in the server. Achieved except for set target yesterdayDescriptionToday’s target English Japanese Get deeper into Docker 2019/4/18The result of my target yesterday English Japanese Finish Inboxer project Still wait for DNS to update for SSL signature Achieved except for set target yesterdayDescriptionToday’s target English Japanese Finish Inboxer project Get deeper into Docker 2019/4/17The result of my target yesterday English Japanese Complete CentOS document with Docker Achieved except for set target yesterdayDescriptionToday’s target English Japanese Finish Inboxer project 2019/4/16The result of my target yesterday English Japanese Inboxer project Quote the translation feeAchieved except for set target yesterdayDescriptionToday’s target English Japanese Complete CentOS document with Docker 2019/4/15The result of my target yesterday English Japanese Inboxer project Initially completed deploying and send-mail function Achieved except for set target yesterdayDescriptionToday’s target English Japanese Inboxer project Quote the translation fee 2019/4/14The result of my target yesterday English Japanese GCP event Achieved except for set target yesterdayDescriptionToday’s target English Japanese Inboxer project 2019/4/13The result of my target yesterday English Japanese GCP Essentials review Working on docker-compose Achieved except for set target yesterdayDescriptionToday’s target English Japanese GCP Event 2019/4/12The result of my target yesterday English Japanese GCP Essentials review Working on docker-compose Achieved except for set target yesterdayDescriptionToday’s target English Japanese GCP Essentials review Kubernetes and Load Balance 2019/4/11The result of my target yesterday English Japanese GCP Essentials review Working on docker-compose Achieved except for set target yesterdayDescriptionToday’s target English Japanese GCP Essentials review Go deeper into Docker 2019/4/10The result of my target yesterday English Japanese GCP Essentials review Go deeper into docker-compose Achieved except for set target yesterdayDescriptionToday’s target English Japanese GCP Essentials review Go deeper into Docker 2019/4/9The result of my target yesterday English Japanese GCP Essentials review Docker-compose Achieved except for set target yesterdayDescriptionToday’s target English Japanese GCP Essentials review Go deeper into Docker 2019/4/8The result of my target yesterday English Japanese GCP Essentials review Go deeper into Docker - Overlay Network Achieved except for set target yesterdayDescriptionToday’s target English Japanese GCP Essentials review Go deeper into Docker 2019/4/7The result of my target yesterday English Japanese GCP Essentials review Go deeper into Docker - Swarm and Service Achieved except for set target yesterdayDescriptionToday’s target English Japanese GCP Essentials review Go deeper into Docker 2019/4/6The result of my target yesterday English Japanese GCP Essentials review Docker - containerAchieved except for set target yesterdayDescriptionToday’s target English Japanese GCP Essentials review Go deeper into Docker 2019/4/5The result of my target yesterday English Japanese GCP Essentials review Docker - image Achieved except for set target yesterdayDescriptionToday’s target English Japanese GCP Essentials review Go deeper into Docker 2019/4/4The result of my target yesterday English Japanese GCP Essentials review Go deeper into Docker Achieved except for set target yesterdayDescriptionToday’s target English Japanese GCP Essentials review Go deeper into Docker 2019/4/3The result of my target yesterday English Japanese GCP Essentials review Achieved except for set target yesterdayDescriptionToday’s target English Japanese GCP Essentials review Go deeper into Docker 2019/4/2The result of my target yesterday English Japanese GCP Essentials review 1~3 Laracasts-Laravel_5.7_From_Scratch No time for it Achieved except for set target yesterdayDescriptionToday’s target English Japanese GCP Essentials review 2019/4/1The result of my target yesterday English Japanese GCP Essentials - Kubernetes Quick Start Laracasts-Laravel_5.7_From_Scratch Achieved except for set target yesterdayDescriptionToday’s target English Japanese GCP Essentials review Laracasts-Laravel_5.7_From_Scratch","link":"/schedule/2019/April/index.html"},{"title":"February 2018","text":"2019/2/28The result of my target yesterday Write down how to use PayPal payment service One more section of my Git Course Optimize FB online selling project Make recipient information only required when a order is paid Achieved except for set target yesterday Solve the problem that the canvas-nest special effect doesn’t work properly on Schedule page DescriptionToday’s target Write down how to use PayPal payment service One more section of my Git Course Optimize FB online selling project Restructure WebSocket 2019/2/27The result of my target yesterday One more section of my Git course Write down an article - how to build a multilingual blog with Hexo Optimize FB online selling project Achieved except for set target yesterdayDescriptionToday’s target Write down how to use PayPal payment service One more section of my Git Course Optimize FB online selling project Make recipient information only required when a order is paid 2019/2/26The result of my target yesterday My blog - improve the layout Achieved except for set target yesterdayDescriptionToday’s target One more section of my Git course Write down an article - how to build a multilingual blog with Hexo Optimize FB online selling project 2019/2/25The result of my target yesterday Working on the blog, I would like to make a bilingual version Achieved except for set target yesterdayDescriptionToday’s target My blog - improve the layout 2019/2/24The result of my target yesterday Fix the decoded garble problem of my blog Completed a bit, but still working on it Achieved except for set target yesterdayDescriptionToday’s target Working on the blog, I would like to make a bilingual version 2019/2/23The result of my target yesterday Challenge: Facebook optimized selling system - keep optimizing Git course: The presentation Finished first course Write down how to make PayPal payment service work Working on my blog instead Achieved except for set target yesterdayDescriptionToday’s target Fix the decoded garble problem of my blog 2019/2/22The result of my target yesterday Challenge: Facebook optimized selling system Optimize and debug Demo Achieved except for set target yesterdayDescriptionToday’s target Challenge: Facebook optimized selling system - keep optimizing Git course: The presentation Write down how to make PayPal payment service work 2019/2/21The result of my target yesterday Challenge: Facebook optimized selling system - Optimize and debug Optimize images upload function with Laravel way Reorganise and write down how to make PayPal payment service works Achieved except for set target yesterday Challenge: Facebook optimized selling system Added new function that when an order is paid, the buyer will receive a notification email DescriptionToday’s target Challenge: Facebook optimized selling system optimize and debug demo 2019/2/20The result of my target yesterday challenge: facebook optimized selling system - optimize and debug added email update function in update-user-info function Achieved except for set target yesterdayDescriptionToday’s target challenge: facebook optimized selling system - optimize and debug optimize images upload function with laravel way reorganise and write down how to make paypal payment service works 2019/2/19The result of my target yesterday challenge: facebook optimized selling system - paypal payment service finally app site is able to use it Achieved except for set target yesterdayDescriptionToday’s target challenge: facebook optimized selling system - optimize and debug 2019/2/18 gcp quiklab training course stackdriver: qwik start set up network and http load balancers The result of my target yesterdayAchieved except for set target yesterdayDescriptionToday’s target challenge: facebook optimized selling system - paypal payment service 2019/2/17The result of my target yesterday gcp quiklab training course completed lessons 6 Achieved except for set target yesterdayDescriptionToday’s target gcp quiklab training course 2019/2/16The result of my target yesterday gcp quiklab training course completed lessons 1~5 Achieved except for set target yesterdayDescriptionToday’s target gcp quiklab training course 2019/2/15 challenge: facebook optimized selling system - paypal payment service completed paypal payment service function The result of my target yesterdayAchieved except for set target yesterdayDescriptionToday’s target gcp quiklab training course 2019/2/14 challenge: facebook optimized selling system - paypal payment service still working on it The result of my target yesterdayAchieved except for set target yesterdayDescriptionToday’s target challenge: facebook optimized selling system - paypal payment service 2019/2/13 challenge: facebook optimized selling system - paypal payment service still working on it The result of my target yesterdayAchieved except for set target yesterdayDescriptionToday’s target challenge: facebook optimized selling system - paypal payment service 2019/2/12 challenge: facebook optimized selling system paypal payment service The result of my target yesterdayAchieved except for set target yesterday api revise create new api- get user status DescriptionToday’s target challenge: facebook optimized selling system - paypal payment service 2019/2/11 challenge: facebook optimized selling system write an article about how to get user’s basic information via token got from fb paypal payment service still working on it. The result of my target yesterdayAchieved except for set target yesterdayDescriptionToday’s target challenge: facebook optimized selling system paypal payment service 2019/2/10 challenge: facebook optimized selling system write an article about how to get user’s basic information via token got from fb paypal payment service still working on it The result of my target yesterdayAchieved except for set target yesterday challenge: facebook optimized selling system debug optimize DescriptionToday’s target challenge: facebook optimized selling system write an article about how to get user’s basic information via token got from fb paypal payment service 2019/2/9 challenge: facebook optimized selling system write an article about how to handle allpay payment service paypal payment service still working on it git pro 鳥哥的linux The result of my target yesterdayAchieved except for set target yesterdayDescriptionToday’s target challenge: facebook optimized selling system write an article about how to get user’s basic information via token got from fb paypal payment service 2019/2/8The result of my target yesterday challenge: facebook optimized selling system write down how to use task scheduling of laravel with crontab to routinely delete expired orders the presentation of hackmd for ‘the wondering’ on 14 february 2019 paypal payment service git pro git object 鳥哥的linux Achieved except for set target yesterday adopted task scheduling of laravel with crontab to routinely delete expired orders DescriptionToday’s target challenge: facebook optimized selling system write an article about how to handle allpay payment service paypal payment service git pro 鳥哥的linux 2019/2/7The result of my target yesterday challenge: facebook optimized selling system write down how to use aws ses find out why ngrok doesn’t work with aws ses it’s caused by the port. Achieved except for set target yesterday adopted task scheduling of laravel with crontab to routinely delete expired orders DescriptionToday’s target challenge: facebook optimized selling system write down how to use task scheduling of laravel with crontab to routinely delete expired orders the presentation of hackmd for ‘the wondering’ on 14 february 2019 paypal payment service git pro 鳥哥的linux 2019/2/6The result of my target yesterday challenge: facebook optimized selling system mail notification system via ses and laravel Achieved except for set target yesterdayDescriptionToday’s target challenge: facebook optimized selling system write down how to use aws ses find out why ngrok doesn’t work with aws ses 2019/2/5The result of my target yesterday challenge: facebook optimized selling system optimize order system for allpay payment service Achieved except for set target yesterdayDescriptionToday’s target challenge: facebook optimized selling system mail notification system via ses and laravel 2019/2/4The result of my target yesterday challenge: facebook optimized selling system third party payment service, allpay Achieved except for set target yesterday git pro: git hash-object -w stdin git cat-file -p checksum DescriptionToday’s target challenge: facebook optimized selling system optimize order system for allpay payment service 2019/2/3The result of my target yesterday challenge: facebook optimized selling system still working on third party payment service, allpay git pro no time for it = = 鳥哥的linux no time for it = = Achieved except for set target yesterdayDescriptionToday’s target challenge: facebook optimized selling system third party payment service, allpay 2019/2/2The result of my target yesterday challenge: facebook optimized selling system still working on it git pro no time for it 鳥哥的linux no time for it Achieved except for set target yesterdayDescriptionToday’s target challenge: facebook optimized selling system third party payment service git pro 鳥哥的linux 2019/2/1The result of my target yesterday [ ] challenge: facebook optimized selling system ‘the wondering presentation’ instead [x] git pro step into plumbing’s world 鳥哥的linux no time for it Achieved except for set target yesterdayDescriptionToday’s target challenge: facebook optimized selling system third party payment service git pro 鳥哥的linux","link":"/schedule/2019/February/index.html"},{"title":"January 2019","text":"2019/1/31The result of my target yesterday challenge: facebook optimized selling system revised api instead git pro prepared ‘the wondering’ rehearsal 鳥哥的linux prepared ‘the wondering’ rehearsal Achieved except for set target yesterday block chain knowledgeDescriptionToday’s target challenge: facebook optimized selling system third party payment service git pro 鳥哥的linux 2019/1/30The result of my target yesterday challenge: facebook optimized selling system completed api (26/26) git course outline provided to howard Achieved except for set target yesterdayDescriptionToday’s target challenge: facebook optimized selling system third party payment service git pro 鳥哥的linux2019/1/29 The result of my target yesterday challenge: facebook optimized selling system commpleted api (23/25) git pro prepared git course outline instead 鳥哥的linux prepared git course outline instead Achieved except for set target yesterdayDescriptionToday’s target challenge: facebook optimized selling system git course outline 2019/1/28The result of my target yesterday challenge: facebook optimized selling system commpleted api (22/25) introduction of my blog Achieved except for set target yesterdayDescriptionToday’s target challenge: facebook optimized selling system git pro 鳥哥的linux2019/1/27 The result of my target yesterday ‘the wondering’ presentation next week challenge: facebook optimized selling system completed 3 api Achieved except for set target yesterdayDescriptionToday’s target challenge: facebook optimized selling system introduction of my blog 2019/1/26The result of my target yesterday challenge: facebook optimized selling system working on my blog and linkedin instead. Achieved except for set target yesterdayDescriptionToday’s target challenge: facebook optimized selling system ‘the wondering’ presentation next week 2019/1/25The result of my target yesterday challenge: facebook optimized selling system working on ci with jenkins instead Achieved except for set target yesterdayDescriptionToday’s target challenge: facebook optimized selling system 2019/1/24The result of my target yesterday challenge: facebook optimized selling system completed three apis Achieved except for set target yesterdayDescriptionToday’s target challenge: facebook optimized selling system 2019/1/23The result of my target yesterday challenge: facebook optimized selling system completed three apis Achieved except for set target yesterdayDescriptionToday’s target challenge: facebook optimized selling system 2019/1/22The result of my target yesterday challenge: facebook optimized selling system completed three apis Achieved except for set target yesterdayDescriptionToday’s target challenge: facebook optimized selling system 2019/1/21The result of my target yesterday challenge: facebook optimized selling system completed six apis Achieved except for set target yesterdayDescriptionToday’s target challenge: facebook optimized selling system 2019/1/20The result of my target yesterday challenge: facebook optimized selling system completed three api Achieved except for set target yesterdayDescriptionToday’s target challenge: facebook optimized selling system 2019/1/19The result of my target yesterday challenge: facebook optimized selling system initially completed api document Achieved except for set target yesterdayDescriptionToday’s target challenge: facebook optimized selling system 2019/1/18The result of my target yesterday challenge: facebook optimized selling system intially confirmed the specification Achieved except for set target yesterdayDescriptionToday’s target challenge: facebook optimized selling system2019/1/17 The result of my target yesterday challenge: facebook optimized selling system initially discussed the feature Achieved except for set target yesterdayDescriptionToday’s target challenge: facebook optimized selling system 2019/1/16The result of my target yesterdayAchieved except for set target yesterdayDescriptionToday’s target challenge: facebook optimized selling system 2019/1/15The result of my target yesterday linux: 鳥哥的linux基礎篇 git: pro git build my own blog in github with hexo almost complete personal configuration Achieved except for set target yesterdayDescriptionToday’s target challenge: facebook optimized selling system 2019/1/14The result of my target yesterday [x] linux: 鳥哥的linux基礎篇 suid full name suid’s function and limit [x] git: pro git how to configure your git to save your credentials? what are three level of git configurations? where is the configuration file that git looks for when it comes to system level configuration? where is the configuration file that git looks for when it comes to global level configuration? how to ignore files globaly in git? [x] build my own blog in github with hexo i’m still working on it, still some issues to be solved. Achieved except for set target yesterdayDescriptionToday’s target linux: 鳥哥的linux基礎篇 git: pro git build my own blog in github with hexo 2019/1/13The result of my target yesterday iron man award ceremony Achieved except for set target yesterday completed presentation for ‘the wondering’ on 17 january 2019DescriptionToday’s target linux: 鳥哥的linux基礎篇 git: pro git reorganize those presentations i’ve made from keynote to hackmd the first commit 沒遇到這些事之前，我也覺得我git超屌 episode 1 沒遇到這些事之前，我也覺得我git超屌 episode 2 沒遇到這些事之前，我也覺得我git超屌 episode 3 沒遇到這些事之前，我也覺得我git超屌 episode 4 2019/1/12The result of my target yesterday challenge20181217 rewriting optimize readme the wondering organize git presentation that i’ve shared in ‘the wondering’ presentation for ‘the wondering’ next week 鳥哥的Linux基礎篇 git: pro git Achieved except for set target yesterday build opendata project on aws and so my team members could use it for their interviews in the future.DescriptionToday’s target iron man award ceremony 2018/1/11The result of my target yesterday challenge20181217 rewriting add status code to all the functions revise api document accordingly to restful api. Achieved except for set target yesterday git: if you create a new branch, add a submodule there, and then switch back to a branch without that submodule, what will happen?DescriptionToday’s target challenge20181217 rewriting optimize readme the wondering organize git presentation that i’ve shared in ‘the wondering’ presentation for ‘the wondering’ next week linux: 鳥哥的linux基礎篇 git: pro git 2019/1/10The result of my target yesterday linux: 鳥哥的linux基礎篇 working on swagger api [ ] git: pro git working on swagger api [x] challenge20181217 rewriting added customized status code on register, login, and get profile api revise api document accordingly to restful api Achieved except for set target yesterdayDescriptionToday’s target challenge20181217 rewriting add status code to all the functions revise api document accordingly to restful api.2019/1/9 The result of my target yesterday linux: 鳥哥的linux基礎篇 working on swagger api [ ] git: pro git working on swagger api [x] challenge20181217 rewriting complete register and login function api with swagger Achieved except for set target yesterdayDescriptionToday’s target challenge20181217 rewriting make api document with swagger2019/1/8 The result of my target yesterday linux: 鳥哥的linux基礎篇 working on challenge20190107 - how to upload a file to aws-s3 via a pre-signed url instead. [x] git: pro git how to stash all the work in all our submodules? how to create a new branch and switch to it in all our submodules? how to use ‘git diff’ in your main project and all your submodules? [ ] challenge20181217 rewriting working on challenge20190107 - how to upload a file to aws-s3 via a pre-signed url instead. Achieved except for set target yesterdayDescriptionToday’s target linux: 鳥哥的linux基礎篇 git: pro git challenge20181217 rewriting revise api document learn how to use swagger 2019/1/7The result of my target yesterday had a wonderful getaway yesterday.Achieved except for set target yesterdayDescriptionToday’s target linux: 鳥哥的linux基礎篇 git: pro git challenge20181217 rewriting revise api document 2019/1/6The result of my target yesterday [ ] linux: 鳥哥的linux基礎篇 [x] git: pro git practice submodule [x] challenge20181217 rewriting complete transferring to restful apiAchieved except for set target yesterdayDescriptionToday’s target have a getaway today. 2019/1/5The result of my target yesterday [ ] linux: 鳥哥的linux基礎篇 [x] git: pro git practice submodule [x] challenge20181217 rewriting publish api document on github page, and sign ssl certificateAchieved except for set target yesterday how to build a blog with hexo DescriptionToday’s target linux: 鳥哥的linux基礎篇 git: pro git challenge20181217 rewriting optimize api to restful api 2019/1/4The result of my target yesterday [x] linux: 鳥哥的linux基礎篇 what’s chattr [+-=] [asacdistu] how to search placed command in lunux? [x] git: pro git how to check if we find a bug after a lot of commits made, and we have no idea when and where the code went wrong? how to revise submodule url? what does 160000 mode means when commit a submodule? how to make a submodule? a better diff for submodule? [x] challenge20181217 rewriting complete ‘aws deployment’ DescriptionToday’s target linux: 鳥哥的linux基礎篇 git: pro git challenge20181217 rewriting publish the api document on github page 2019/1/3The result of my target yesterday [x] linux: 鳥哥的linux基礎篇 how to execute cat command with value got previously in linux? [x] git: pro git what’s the progress of cloning project with submodule in? if, in master branch, i reset with a sha1 from develop branch, what would happen? how to specify lines with git blame? how to show where it’s originally copied from with git blame? [x] challenge20181217 rewriting complete ‘optimizing payment controller’ DescriptionToday’s target linux: 鳥哥的linux基礎篇 git: pro git challenge20181217 rewriting deploy on aws2019/1/2 The result of my target yesterday [ ] linux: 鳥哥的linux基礎篇 ‘wondering’ rehearsal instead [ ] git: pro git ‘wondering’ rehearsal instead [x] challenge20181217 rewriting complete ‘deposit common achievement’ DescriptionToday’s target linux: 鳥哥的linux基礎篇 git: pro git challenge20181217 rewriting optimize payment controller2019/1/1 The result of my target yesterday [x] linux: 鳥哥的linux基礎篇 what’s default authority when creating a file? what’s the default umask? so what’s the final default authority? how to see default umask? how to set umask? what’s the correct way of calculating final authority after deducting umask? [ ] git: pro git challenge20181217 rewriting do a linebot challenge held by howard instead DescriptionToday’s target linux: 鳥哥的linux基礎篇 git: pro git challenge20181217 rewriting deposit achievement","link":"/schedule/2019/January/index.html"},{"title":"November 2018","text":"2019/3/31The result of my target yesterday Deploy jenkins for openData Laracasts-Laravel_5.7_From_Scratch Achieved except for set target yesterdayDescriptionToday’s target GCP Essentials - Kubernetes Laracasts-Laravel_5.7_From_Scratch 2019/3/30The result of my target yesterday Write down how to do jenkins deployment Deploy ‘backendOfMobileGames’ and ‘openData’ Achieved except for set target yesterdayDescriptionToday’s target Deploy jenkins for openData Laracasts-Laravel_5.7_From_Scratch 2019/3/29The result of my target yesterday AWS Deployment: jenkins deployment Achieved except for set target yesterdayDescriptionToday’s target Write down how to do jenkins deployment Deploy ‘backendOfMobileGames’ and ‘openData’ 2019/3/28The result of my target yesterday AWS Deployment Completed supervisor and queue setting Achieved except for set target yesterdayDescriptionToday’s target AWS Deployment: jenkins deployment 2019/3/27The result of my target yesterday AWS Deployment Still working on it Achieved except for set target yesterdayDescriptionToday’s target AWS Deployment 2019/3/26The result of my target yesterday Laracasts-Laravel_5.7_From_Scratch Episode 6-11 Achieved except for set target yesterdayDescriptionToday’s target AWS Deployment 2019/3/25The result of my target yesterday Laracasts-Laravel_5.7_From_Scratch Episode 1~5 Achieved except for set target yesterdayDescriptionToday’s target Laracasts-Laravel_5.7_From_Scratch 2019/3/24The result of my target yesterday Write down how to use queue with sqs Prepare interview tonight Well, the interview was rescheduled because the interviewer was indisposed. Achieved except for set target yesterdayDescriptionToday’s target Laracasts-Laravel_5.7_From_Scratch 2019/3/23The result of my target yesterday Write down how to use Supervisor to manage queue work with sqs Completed Supervisor part, and will work on sqs part today. Prepare interview tonight The interview time was changed to tonight. Achieved except for set target yesterdayDescriptionToday’s target Write down how to use queue with sqs Prepare interview tonight 2019/3/22The result of my target yesterday Figure out how to use Supervisor to manage queue work Write down how to use Supervisor to manage queue work ‘The Wondering’ presentation Achieved except for set target yesterdayDescriptionToday’s target Write down how to use Supervisor to manage queue work with sqs Prepare interview tonight 2019/3/21The result of my target yesterday Figure out how to use SQS to send email Recap GCP Essentials Achieved except for set target yesterdayDescriptionToday’s target Figure out how to use Supervisor to manage queue work Write down how to use Supervisor to manage queue work ‘The Wondering’ presentation 2019/3/20The result of my target yesterday Complete FB selling side project’s ReadMe Recap GCP Essentials Achieved except for set target yesterdayDescriptionToday’s target Figure out how to use SQS to send email Recap GCP Essentials 2019/3/19The result of my target yesterday Write down Ray’s git flow Complete FB selling side project’s ReadMe Not yet completed, but working on it. Achieved except for set target yesterdayDescriptionToday’s target Complete FB selling side project’s ReadMe Recap GCP Essentials 2019/3/18The result of my target yesterday The Wondering presentation. Optimize FB online selling project Achieved except for set target yesterdayDescriptionToday’s target Write down Ray’s git flow Complete FB selling side project’s ReadMe 2019/3/17The result of my target yesterday The Wondering presentation. Optimize FB online selling project Phone validation and address validation Mail system Achieved except for set target yesterdayDescriptionToday’s target The Wondering presentation. Optimize FB online selling project 2019/3/16The result of my target yesterday Optimize FB online selling project Still working on the mail system for refund Achieved except for set target yesterdayDescriptionToday’s target The Wondering presentation. Optimize FB online selling project Phone validation and address validation Mail system 2019/3/15The result of my target yesterday Write down how to use PayPal payment service I’ve done it! Optimize FB online selling project If possible, I will go validation today! Achieved except for set target yesterdayDescriptionToday’s target Optimize FB online selling project Phone validation and address validation 2019/3/14The result of my target yesterday Write down how to use PayPal payment service I’m working on it! Optimize FB online selling project Have added refund function on both PayPal and AllPay Achieved except for set target yesterdayDescriptionToday’s target Write down how to use PayPal payment service Finish it! Optimize FB online selling project If possible, I will go validation today! 2019/3/13The result of my target yesterday Write down how to use PayPal payment service Finished the refund function of PayPal. Optimize FB online selling project Finished the refund function of PayPal. Achieved except for set target yesterdayDescriptionToday’s target Write down how to use PayPal payment service Will start to write this article after AllPay system refund function is completed. Optimize FB online selling project Finish refund function of AllPay 2019/3/12The result of my target yesterday Write down how to use PayPal payment service Almost finished refund function Optimize FB online selling project Almost finished PayPal refund function Achieved except for set target yesterdayDescriptionToday’s target Write down how to use PayPal payment service Optimize FB online selling project 2019/3/11The result of my target yesterday Write down how to use PayPal payment service Completed capture authorization function. Optimize FB online selling project Completed capture authorization function. Achieved except for set target yesterdayDescriptionToday’s target Write down how to use PayPal payment service Optimize FB online selling project 2019/3/10The result of my target yesterday Write down how to use PayPal payment service Nearly finished a basic transaction with REST API of PayPal Optimize FB online selling project Nearly finished a basic transaction with REST API of PayPal Achieved except for set target yesterdayDescriptionToday’s target Write down how to use PayPal payment service Optimize FB online selling project 2019/3/9The result of my target yesterday Write down how to use PayPal payment service Still working on new features Optimize FB online selling project Working on refund feature Achieved except for set target yesterdayDescriptionToday’s target Write down how to use PayPal payment service Optimize FB online selling project 2019/3/8The result of my target yesterday Write down how to use PayPal payment service Still working on new features Optimize FB online selling project Working on refund feature Achieved except for set target yesterdayDescriptionToday’s target Write down how to use PayPal payment service Optimize FB online selling project 2019/3/7The result of my target yesterday Write down how to use PayPal payment service Already figured out how to use REST API, and now working on how to integrate it into my system Optimize FB online selling project Restructure Currently working on refund function WebSocket Achieved except for set target yesterdayDescriptionToday’s target Write down how to use PayPal payment service Optimize FB online selling project Restructure WebSocket 2019/3/6The result of my target yesterday Write down how to use PayPal payment service still working on figuring out how rest API works Optimize FB online selling project Restructure WebSocket Achieved except for set target yesterdayDescriptionToday’s target Write down how to use PayPal payment service Optimize FB online selling project Restructure WebSocket 2019/3/5The result of my target yesterday Write down how to use PayPal payment service Completed Payment Standard and IPN Message method Optimize FB online selling project Refine payment service Achieved except for set target yesterdayDescriptionToday’s target Write down how to use PayPal payment service Optimize FB online selling project Restructure WebSocket 2019/3/4The result of my target yesterday Write down how to use PayPal payment service Still working on it, it’s a epic task! Optimize FB online selling project Restructure Make PayPal page show items and recipient in detail WebSocket Achieved except for set target yesterdayDescriptionToday’s target Write down how to use PayPal payment service Optimize FB online selling project Restructure WebSocket 2019/3/3The result of my target yesterday Write down how to get long-lived and forever token from FB One more section of my Git Course Basically, it’s completed Optimize FB online selling project Restructure WebSocket Achieved except for set target yesterdayDescriptionToday’s target Write down how to use PayPal payment service Optimize FB online selling project Restructure WebSocket 2019/3/2The result of my target yesterday Write down how to use PayPal payment service One more section of my Git Course Optimize FB online selling project Added long-lived token function Achieved except for set target yesterdayDescriptionToday’s target Write down how to get long-lived and forever token from FB One more section of my Git Course Optimize FB online selling project Restructure WebSocket 2019/3/1The result of my target yesterday Write down how to use PayPal payment service One more section of my Git Course Optimize FB online selling project- Restructure - WebSocket Achieved except for set target yesterdayDescription Went to help 日安 carry the new counter she bought Went to KTV with Lester Today’s target Write down how to use PayPal payment service One more section of my Git Course Optimize FB online selling project- Restructure - WebSocket","link":"/schedule/2019/March/index.html"},{"title":"May 2019","text":"","link":"/schedule/2019/May/index.html"}],"posts":[{"title":"Deploy Laravel project on Server","text":"IntroductionThis article is mainly about how to deploy Laravel on AWS EC2Here are some points: LAMP deployment Composer deployment Laravel deployment Specification Amazon Linux AMI 2018.03.0 (HVM), SSD Volume Type LAMPPHP PHP Installation sudo yum install php72;php -v Install PHP Extension sudo yum install php72-mbstring sudo yum install php72-bcmath sudo yum install php72-pdo sudo yum install php72-mysqlnd sudo yum install php72-gd.x86_64 Apache Install Apache sudo yum install httpd24 Launch Apache sudo service httpd start Set up automatic start after reboot sudo chkconfig httpd on Check if httpd is enabled chkconfig --list httpd Set AWS security inbound Test Apache by visiting the IP Install SSL module sudo yum install mod24_ssl MySQL Install MySQL sudo yum install mysql57-server Launch MySQL sudo service mysqld start Set up MySQL to automatic start after reboot sudo chkconfig mysqld on 執行 mysql_secure_installation sudo mysql_secure_installation Set up MySQL to support remote connection with Sequel Pro CREATE USER 'root'@'%' IDENTIFIED BY '';GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' WITH GRANT OPTION;FLUSH PRIVILEGES; Set up authority Add your user (in this case, ec2-user) to the apache group. sudo usermod -a -G apache ec2-user Log out and then log back in again to pick up the new group, and then verify your membership. Log out (use the exit command or close the terminal window): exit To verify your membership in the apache group, reconnect to your instance, and then run the following command: groups Change the group ownership of /var/www and its contents to the apache group. sudo chown -R ec2-user:apache /var/www To add group write permissions and to set the group ID on future subdirectories, change the directory permissions of /var/www and its subdirectories. sudo chmod 2775 /var/wwwfind /var/www -type d -exec sudo chmod 2775 &#123;&#125; \\; To add group write permissions, recursively change the file permissions of /var/www and its subdirectories: find /var/www -type f -exec sudo chmod 0664 &#123;&#125; \\; Test LAMP Web server Create a PHP file in the Apache document root. echo \"&lt;?php phpinfo(); ?&gt;\" &gt; /var/www/html/phpinfo.php In a web browser, type the URL of the file that you just created. This URL is the public DNS address of your instance followed by a forward slash and the file name. For example:http://my.public.dns.amazonaws.com/phpinfo.php Delete the phpinfo.php file. Although this can be useful information, it should not be broadcast to the internet for security reasons. rm /var/www/html/phpinfo.php Composer Install Composer php -r \"copy('https://getcomposer.org/installer', 'composer-setup.php');\"php -r \"if (hash_file('sha384', 'composer-setup.php') === '48e3236262b34d30969dca3c37281b3b4bbe3221bda826ac6a9a62d6444cdb0dcd0615698a5cbe587c3f0fe57a54d8f5') &#123; echo 'Installer verified'; &#125; else &#123; echo 'Installer corrupt'; unlink('composer-setup.php'); &#125; echo PHP_EOL;\"php composer-setup.phpphp -r \"unlink('composer-setup.php');\" Make composer global sudo mv composer.phar /usr/local/bin/composer Git Install Gitsudo yum install -y git Deploy project Clone project git clone repositoryAddress Deploy .env file cp .env.example .env Install Composer composer install Generate key php artisan key:generate Create database mysql -urootcreate database databaseName; Create tables php artisan migrate If it lacks memory, you could assign some hard-drive to memory. sudo dd if=/dev/zero of=/swapfile bs=1M count=2000;sudo chmod 600 /swapfile;sudo mkswap /swapfile;sudo swapon /swapfile;swapon -s;sudo vim /etc/fstab; Add the following code/swapfile swap swap defaults 0 0 Change teh default document root locationsudo vim /etc/httpd/conf/httpd.conf &lt;Direction \"/var/www/html\"&gt; Allow Override All&lt;/Direction&gt; The above is normal process. You could also refer to lazy version as follows: Lazy versionsudo yum install -y php72;sudo yum install -y php72-mbstring;sudo yum install -y php72-bcmath;sudo yum install -y php72-pdo;sudo yum install php72-gd.x86_64sudo yum install -y php72-mysqlnd;sudo yum install -y httpd24;sudo service httpd start;sudo chkconfig httpd on;sudo yum install -y mod24_ssl;sudo yum install -y mysql57-server;sudo service mysqld start;sudo chkconfig mysqld on;sudo usermod -a -G apache ec2-user;sudo chown -R ec2-user:apache /var/www;sudo chmod 2775 /var/wwwfind /var/www -type d -exec sudo chmod 2775 &#123;&#125; \\;find /var/www -type f -exec sudo chmod 0664 &#123;&#125; \\;php -r \"copy('https://getcomposer.org/installer', 'composer-setup.php');\"php -r \"if (hash_file('sha384', 'composer-setup.php') === '48e3236262b34d30969dca3c37281b3b4bbe3221bda826ac6a9a62d6444cdb0dcd0615698a5cbe587c3f0fe57a54d8f5') &#123; echo 'Installer verified'; &#125; else &#123; echo 'Installer corrupt'; unlink('composer-setup.php'); &#125; echo PHP_EOL;\"php composer-setup.php;php -r \"unlink('composer-setup.php');\";sudo mv composer.phar /usr/local/bin/composer;sudo yum install -y git;sudo php -v Set AWS security inbound Test Apache by visiting the IP Execute mysql_secure_installation sudo mysql_secure_installation Set up MySQL to support Sequel Pro remote connection CREATE USER 'root'@'%' IDENTIFIED BY 'yourPassword';GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' WITH GRANT OPTION;FLUSH PRIVILEGES; Log out and then log back in again to pick up the new group, and then verify your membership. Log out (use the exit command or close the terminal window): exit; To verify your membership in the apache group, reconnect to your instance, and then run the following command: groups Create a PHP file in the Apache document root. echo \"&lt;?php phpinfo(); ?&gt;\" &gt; /var/www/html/phpinfo.php In a web browser, type the URL of the file that you just created. This URL is the public DNS address of your instance followed by a forward slash and the file name. For example:http://my.public.dns.amazonaws.com/phpinfo.php Delete the phpinfo.php file. Although this can be useful information, it should not be broadcast to the internet for security reasons. rm /var/www/html/phpinfo.php Clone project git clone repositoryAddress Deploy .env file cp .env.example .env Install Composer composer install Generate key php artisan key:generate Create database mysql -urootcreate database databaseName; Create tables php artisan migrate If it lacks memory, you could assign some hard-drive to memory. sudo dd if=/dev/zero of=/swapfile bs=1M count=2000;sudo chmod 600 /swapfile;sudo mkswap /swapfile;sudo swapon /swapfile;swapon -s;sudo vim /etc/fstab; Add the following code/swapfile swap swap defaults 0 0 Change teh default document root locationsudo vim /etc/httpd/conf/httpd.conf &lt;Direction \"/var/www/html\"&gt; Allow Override All&lt;/Direction&gt; Restart Apachesudo service httpd restart Check your OS version in Linux Use lsb_release , If it shows command not found, install it sudo apt-get install lsb-release Get its usage lsb_release --help Example output：-h, --help show this help message and exit-v, --version show LSB modules this system supports-i, --id show distributor ID-d, --description show description of this distribution-r, --release show release number of this distribution-c, --codename show code name of this distribution-a, --all show all of the above information-s, --short show requested information in short format Per the information above, if you would like to check the detail: lsb_release -a If you just want to know the version of the Kernel: uname -r","link":"/AWSLaravelDeployment/"},{"title":"Getting Started with Cloud Shell & gcloud","text":"Refer to QWIKLABS","link":"/CloudShellAndgcloud/"},{"title":"Handle AllPay third party payment service with Laravel","text":"Create Laravel ProjectLaravel new AllPay Let’s initialize git, it’s a must be!git init Download AllPay SDK, in this article, we will use AllPay PHP SDKgit clone https://github.com/o-pay/Payment_PHP Move SDK Laravel’s app foldercp Payment_PHP/sdk/AllPay.Payment.Integration.php AllPay/app/ Create a testing controllerphp artisan make:controller PaymentsController Move the example in the SDK package to our Controller as follows:/****/ //SDK address(You could manage it yourself) include('AllPay.Payment.Integration.php'); try &#123; $obj = new AllInOne(); //Service parameters $obj-&gt;ServiceURL = \"https://payment-stage.opay.tw/Cashier/AioCheckOut/V5\"; //Service location $obj-&gt;HashKey = '5294y06JbISpM5x9' ; //Testing Hashkey, in real case, please use the one provided by AllPay $obj-&gt;HashIV = 'v77hoKGq4kWxNNIS' ; //Testing HashIV, in real case, please use the one provided by AllPay $obj-&gt;MerchantID = '2000132'; //Testing MerchantID, in real case, please use the one provided by AllPay $obj-&gt;EncryptType = EncryptType::ENC_SHA256; //CheckMacValue encrypted type, please stay 1, using SHA256 //Basic parameters(It depends on your need) $MerchantTradeNo = \"Test\".time(); $obj-&gt;Send['ReturnURL'] = 'http://localhost/simple_ServerReplyPaymentStatus.php' ; //The URL AllPay will return after the payment is paid $obj-&gt;Send['MerchantTradeNo'] = $MerchantTradeNo; $obj-&gt;Send['MerchantTradeDate'] = date('Y/m/d H:i:s'); $obj-&gt;Send['TotalAmount'] = 2000; $obj-&gt;Send['TradeDesc'] = \"good to drink\"; $obj-&gt;Send['ChoosePayment'] = PaymentMethod::ALL; //Items information array_push($obj-&gt;Send['Items'], array('Name' =&gt; \"歐付寶黑芝麻豆漿\", 'Price' =&gt; (int)\"2000\", 'Currency' =&gt; \"元\", 'Quantity' =&gt; (int) \"1\", 'URL' =&gt; \"dedwed\")); # E-Invoice parameters /* $obj-&gt;Send['InvoiceMark'] = InvoiceState::Yes; $obj-&gt;SendExtend['RelateNumber'] = $MerchantTradeNo; $obj-&gt;SendExtend['CustomerEmail'] = 'test@opay.tw'; $obj-&gt;SendExtend['CustomerPhone'] = '0911222333'; $obj-&gt;SendExtend['TaxType'] = TaxType::Dutiable; $obj-&gt;SendExtend['CustomerAddr'] = '台北市南港區三重路19-2號5樓D棟'; $obj-&gt;SendExtend['InvoiceItems'] = array(); // Add item into list of e-invoice foreach ($obj-&gt;Send['Items'] as $info) &#123; array_push($obj-&gt;SendExtend['InvoiceItems'],array('Name' =&gt; $info['Name'],'Count' =&gt; $info['Quantity'],'Word' =&gt; '個','Price' =&gt; $info['Price'],'TaxType' =&gt; TaxType::Dutiable)); &#125; $obj-&gt;SendExtend['InvoiceRemark'] = '測試發票備註'; $obj-&gt;SendExtend['DelayDay'] = '0'; $obj-&gt;SendExtend['InvType'] = InvType::General; */ //Create order $obj-&gt;CheckOut(); &#125; catch (Exception $e) &#123; echo $e-&gt;getMessage(); &#125; Let’s move some sensitive information into .env file$obj-&gt;HashKey = env('HASHKEY'); $obj-&gt;HashIV = env('HASHIV'); $obj-&gt;MerchantID = env('MERCHANTID'); $obj-&gt;Send['ReturnURL'] = env('ALLPAYRETURNURL');$obj-&gt;Send['ClientBackURL'] = $request-&gt;ClintBackURL; In .env:ALLPAYRETURNURL=https://163be100.ngrok.io/api/paymentsResponseHASHKEY=5294y06JbISpM5x9HASHIV=v77hoKGq4kWxNNISMERCHANTID=2000132 Use use to replace include Delete include('AllPay.Payment.Integration.php'); Add it in AllPay.Payment.Integration.php到composer.json file \"autoload-dev\": &#123; \"psr-4\": &#123; \"Tests\\\\\": \"tests/\" &#125;, \"files\": [ \"app/Helpers.php\", \"app/AllPay.Payment.Integration.php\" ] In terminal, under AllPay project composer dump-autoload In the PaymentsController, use all those required classes namespace App\\Http\\Controllers;use AllInOne;use EncryptType;use Exception;use Illuminate\\Http\\Request;use PaymentMethod; Create payment order (It depends on your need.)$totalAmount = Order::getTotalAmountForPayments($orders);$ordersName = Order::getOrdersNameForPayments($orders);$MerchantTradeNo = time() . Helpers::createAUniqueNumber();$MerchantTradeDate = date('Y/m/d H:i:s');$TradeDesc = 'BuyBuyGo';$quantity = 1;//Because I am going to insert data into two tables at a time, so I use //Transaction of Laravel to prevent the possible inconsistency of two tables//start transactionDB::beginTransaction();//All those scripts below should be executed without errors, otherwise the whole action rollbacktry&#123; $payment_service_order = new PaymentServiceOrders(); $payment_service_order-&gt;user_id = User::getUserID($request); //Payment service ID $payment_service_order-&gt;payment_service_id = $thirdPartyPaymentService-&gt;id; $payment_service_order-&gt;expiry_time = (new Carbon())-&gt;now()-&gt;addDay(1)-&gt;toDateTimeString(); $payment_service_order-&gt;MerchantID = env('MERCHANTID'); $payment_service_order-&gt;MerchantTradeNo = $MerchantTradeNo; $payment_service_order-&gt;MerchantTradeDate = $MerchantTradeDate; $payment_service_order-&gt;TotalAmount = $totalAmount; $payment_service_order-&gt;TradeDesc = $TradeDesc; //Item order number $payment_service_order-&gt;ItemName = $ordersName; $payment_service_order-&gt;save(); foreach ($orders as $order) &#123; $order_relations = new OrderRelations(); $order_relations-&gt;payment_service_id = $thirdPartyPaymentService-&gt;id; $order_relations-&gt;payment_service_order_id = $payment_service_order-&gt;id; $order_relations-&gt;order_id = $order-&gt;id; $order_relations-&gt;save(); &#125; //Once any errors occur, the whole action stops and rollback, and provide customized error message&#125; catch (Exception $e)&#123; DB::rollBack(); return Helpers::result('false', 'Something went wrong with DB', 400);&#125;//If no errors occur, the whole action commitDB::commit(); Create an API for PaymentsController Add new route in api.php under routes folder Route::post('pay', 'PaymentsController@pay'); Create a simplest HTML You could simply revise the content of default welcome.blade page as follows: &lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;title&gt;Facebook Login JavaScript Example&lt;/title&gt; &lt;meta charset=\"UTF-8\"&gt;&lt;/head&gt;&lt;body&gt;// 這邊需輸入PaymentsController的API&lt;form action=\"/api/pay\" method=\"POST\"&gt; @csrf() &lt;input type=\"checkbox\" value=\"1\" name=\"order_id[]\"&gt; &lt;input type=\"checkbox\" value=\"2\" name=\"order_id[]\"&gt; &lt;input type=\"checkbox\" value=\"3\" name=\"order_id[]\"&gt; &lt;input type=\"hidden\" value=\"https://64b30ea0.ngrok.io/\" name=\"ClintBackURL\"&gt; &lt;button type=\"submit\"&gt;Submit&lt;/button&gt;&lt;/form&gt;&lt;/body&gt;&lt;/html&gt; Simple test Now we are on the default page of Laravel, it should change to the simple form we just created Check nothing, go summit Yes, we successfully arrived payment page Create a log In order to get what AllPay will send to us after the payment is made, we need to use Log to see what we will receive. Is there some place that all requests and responses will have to go through where we could have full accessibility? It seems to be a perfect one for logging We could make a middleware, and use Log function of Laravel therein to log whatever it goes through Make a middleware, in the terminal under the AllPay project php artisan make:middleware TestLog 註冊middleware In/app/Http/Kernel.php，register the middleware we just made protected $middleware = [ \\App\\Http\\Middleware\\CheckForMaintenanceMode::class, \\Illuminate\\Foundation\\Http\\Middleware\\ValidatePostSize::class, \\App\\Http\\Middleware\\TrimStrings::class, \\Illuminate\\Foundation\\Http\\Middleware\\ConvertEmptyStringsToNull::class, \\App\\Http\\Middleware\\TrustProxies::class, \\App\\Http\\Middleware\\TestLog::class,]; Create Log In the TestLog file that we just made, and added: $response = $next($request);log::info([$request-&gt;header(),$request-&gt;getMethod(),$request-&gt;getRequestUri(),$request-&gt;all(),$response-&gt;getStatusCode(),$response-&gt;getContent()]);return $response; Actually, what you might log varies upon different cases Create a public url We need to get the response from third party, so we need a public url to get it We could use ngrok to create the public url Install ngrok, please refer to its official website Change ngrok to be globally executable mv ngrok /usr/local/bin Get public url ngrok http 8000 In terminal under AllPay project php artisan serve 8000 Copy the public url produced by ngrok Create receive function We are going to catch the response from AllPay, firstly we need to create a function, and after catching it, we could do things there. In PaymentsController, we create a function receive as follows:public function receive()&#123; &#125; Make an API for itRoute::post('pay', 'PaymentsController@pay');Route::post('receive', 'PaymentsController@receive'); Set up client return url In .env, if you’ve been following what I taught, there should be this parameter, just simply paste the public url there ALLPAYRETURNURL=https://163be100.ngrok.io/api/recevie Your link will be different from mine, don’t paste mine. Test payment Let’s connect AllPay payment page again Login the testing buyer account provided by AllPay Account：stageuser001 Password：test1234 Use the testing credit card provided by AllPay Number：4311-9522-2222-2222 Expiry Date：12 / 20 or later than current date Security number：222 After payment, let’s check log to see if there is a response from AllPay, in terminal under AllPay project cat storage/logs/laravel-2019-02-08.log On, we’ve got the response. 'MerchantID' =&gt; '2000132', 'MerchantTradeNo' =&gt; 'Test1549597724', 'PayAmt' =&gt; '2000', 'PaymentDate' =&gt; '2019/02/08 11:49:03', 'PaymentType' =&gt; 'Credit_CreditCard', 'PaymentTypeChargeFee' =&gt; '20', 'RedeemAmt' =&gt; '0', 'RtnCode' =&gt; '1', 'RtnMsg' =&gt; '交易成功', 'SimulatePaid' =&gt; '0', 'TradeAmt' =&gt; '2000', 'TradeDate' =&gt; '2019/02/08 11:48:44', 'TradeNo' =&gt; '1902081148440800', 'CheckMacValue' =&gt; '5B1EE24B0E9D600C65578DD82D3168E2ED56799453577E17E1EBEFC536BD7EAF', Validation Think about it, if your API was accidentally leaked, and some developer knew it. He bought some items from your service, and called your API, how could you tell? So, there is a specific mechanism that only applicable between you and third party payment service The validation mechanism is like a formula every column goes in and out will be calculated with which is only applicable between you and third party, if you’ve been paying attention, you should notice that in the last column of the response we’ve received from AllPay. If you are interested in the formula in detail, you could check it on AllPay’s website. Since in this article, we use AllPay SDK, so we are going to share how to use official SDK to validate the information. Firstly, let’s check a class called CheckMacValue in app/AllPay.Payment.Integration.php Secondly, you could find a function called generate, and you could check it, which it the formula of the CheckMacValue So, we could calculate the received information with this formula, and it should exactly the same as what we’ve got from third party Let’s get all those information except for CheckMacValue from AllPay, we could use the following code. $parameters = $paymentResponse-&gt;except(&apos;CheckMacValue&apos;); And then, we assign a variable with the CheckMacValue we’ve got from AllPay $receivedCheckMacValue = $paymentResponse-&gt;CheckMacValue; Then, we calculate the $parameters with function generate to produce correct CheckMacValue $calculatedCheckMacValue = CheckMacValue::generate($parameters, env(&apos;HASHKEY&apos;), env(&apos;HASHIV&apos;), EncryptType::ENC_SHA256); Finally, we compare if two values are identical, if so, it proves the validity of its source. If not, we shouldn’t give any credibility to this information if($receivedCheckMacValue == $calculatedCheckMacValue) return true;return false; What’s next? After validating the source, we could do things accordingly For example, if payment is successfully made, what we are going to do, and if not, what then? In this article, we mark the orders as paid and notify the buyers via email after the payment is made. if (PaymentServiceOrders::checkIfCheckMacValueCorrect($request) &amp;&amp; PaymentServiceOrders::checkIfPaymentPaid($request-&gt;RtnCode))&#123; $paymentServiceOrder = (new PaymentServiceOrders)-&gt;where('MerchantTradeNo', $request-&gt;MerchantTradeNo)-&gt;first(); $paymentServiceOrder-&gt;update(['status' =&gt; 1, 'expiry_time' =&gt; null]); $orderRelations = $paymentServiceOrder-&gt;where('MerchantTradeNo', $request-&gt;MerchantTradeNo)-&gt;first()-&gt;orderRelations; Order::updateStatus($orderRelations); $payerEmail = $paymentServiceOrder-&gt;user-&gt;email; if ($payerEmail !== null) Mail::to($payerEmail)-&gt;send(new PaymentReceived($paymentServiceOrder, $orderRelations)); return '1|OK';&#125; At the end, don’t forget to return ‘1|OK’ to let AllPay knows that we’ve received the message. Those I didn’t mentioned With the testing buyer account provided by AllPay, except for credit card, is also supports multiple payment method With convenient store pay or bank transferring method, you could login with a testing backed account provided by AllPay, which could simulate making the payment. Account：StageTest Password：test1234 Refund Refund example as follows: public static function refund($order, $paymentServiceInstance, $orderRelation)&#123; try &#123; $obj = new AllInOne(); $obj-&gt;ServiceURL = &quot;https://payment-stage.opay.tw/Cashier/AioChargeback&quot;; // endpoint $obj-&gt;HashKey = env(&apos;HASHKEY&apos;); // Hash key provided by AllPay $obj-&gt;HashIV = env(&apos;HASHIV&apos;); // Hash IV provided by AllPay $obj-&gt;MerchantID = env(&apos;MERCHANTID&apos;); // Merchant ID provided by AllPay $obj-&gt;EncryptType = EncryptType::ENC_SHA256; // CheckMacValue type. Stay 1 as SHA256 $obj-&gt;ChargeBack[&apos;MerchantTradeNo&apos;] = $paymentServiceInstance-&gt;MerchantTradeNo; // The trade number you provided to AllPay $obj-&gt;ChargeBack[&apos;TradeNo&apos;] = $paymentServiceInstance-&gt;TradeNo; // The trade no provided by AllPay $obj-&gt;ChargeBack[&apos;ChargeBackTotalAmount&apos;] = $order-&gt;total_amount; // Refunded amount $obj-&gt;AioChargeback(); &#125; catch (Exception $e) &#123; // If something wrong, return. return Helpers::result(true, &apos;Something wrong happened&apos;, 200); // Debug mode, print out the error echo $e-&gt;getMessage(); &#125;&#125; You could refer to official document for required parameters","link":"/AllPayPaymentService/"},{"title":"Get Facebook long-lived token and never expired token","text":"IntroductionIn this article, I’m going to share how to get Facebook’s long lived token and never expired token via either PHP or Facebook’s Graph API Explorer.Currently I’m working on a Facebook live-stream selling optimized system, and found that the short lived token for web is only effective for not longer than 2 hours, far shorter than 3 months on Android, and 2 months on iOS.Although it will be okay if we just set our script properly, I spent some time figuring out how to get long lived token and never expired token Facebook Graph API Explorerlong lived tokenFirstly, let’s get long lived token via Facebook’s Graph API Explorer Let’s create some Test Users Get token from Test Users On Graph API Explorer Enter the token we just got Press submit Press the exclamation mark beside token，and press Open In Access Token Tool Click Extend Access Token on bottom left corner got long lived token Never expired tokenNow, let’s get never expired token through Graph API Tool Firstly, let’s login with Test User account, and create a fan page Secondly, let’s repeat all the process mentioned above, and then we will get a never expired token PHPlong lived tokenNow let’s get long lived token via calling Facebook’s API with PHP Call Facebook’s API with PHP’s function file_get_contents public static function getLongLivedToken($token)&#123; $url = 'https://graph.facebook.com/oauth/access_token?grant_type=fb_exchange_token&amp;client_id=yourClientID&amp;client_secret=yourClientSecret&amp;fb_exchange_token=shortLivedToken; return json_decode(file_get_contents($url), true);&#125; You will get information below: &#123; \"result\": true, \"response\": &#123; \"access_token\": \"EAAEpKfFACZA8BAGyTFU29VFIlEjhDaUe66eliyWdGQDfVTBUUdFZBZAGeZBEgTEwxgthvdABuzECYi1ahqm8ZCYNRSV9YMnegq7XxCouP1sR8kXMdnNFysGb2IHZBhSB3KENeTZCBzHrFSJ9BJLt9k6xkuWkJsVHnG0KahmFmybKTG6pVaFoZATN\", \"expires_in\": 5182393 &#125;&#125; ConclusionAs to how to get never expired token via PHP, it seems like we will need to pass the APP review and get more permission, so I’m not able to test it for now.","link":"/FacebookLongLivedToken/"},{"title":"GCP-Essentials","text":"Refer to QUIKLABS","link":"/GCP-Essentials/"},{"title":"GCP","text":"IntroductionThis article records what I’ve learnt on GCP Cloud DNSDatastore","link":"/GCP/"},{"title":"Provision Services with GCP Marketplace","text":"Refer to QUIKLABS","link":"/GCPMarketplace/"},{"title":"Set Up Network and HTTP Load Balancers","text":"Refer to QUIKLABS","link":"/HTTPAndNetworkLoadBalancer/"},{"title":"Hello Kubernetes!","text":"Refer to QWIKLABS","link":"/Kubernetes/"},{"title":"Kubernetes Engine - Quick Start","text":"Refer to QWIKLABS","link":"/KubernetesEngineQuickStart/"},{"title":"Implement Laravel Queue with AWS SQS","text":"IntroductionHere is about this article: Send Email with Laravel Queue Use AWS SQS So why do we need to use queue?When we execute some jobs that require longer time, like sending Emails, or uploading photos or videos, let users to wait until the jobs are completed is just not so practical.So when users request some time consuming jobs, we need to use queue to line them, and execute them on the background, and so the users could be released from current request immediately. Apply AWS SQS service Firstly, you need an AWS account Apply SQS on AWS Refer to official document to complete the setting. Keep the information below for further usage. On up-right corner, click your account, and choose My Security Credentials Click Users to create a new user Give user id, and check Programmic access, and next Click Create group as photo below Add the user we just created into this newly created group Then Add tags is optional, you could skip it Now we have Access key ID and Secret access key. If you are afraid of forgetting them, you could download them. By the way, Secret access key will only be accessible this time, you will need to reproduce it if you forget it. Implement Laravel QueueConfigure AWS SQS The following operation is referred to official document Install AWS official SDK as referred in official document，under the repository: composer require aws/aws-sdk-php Configure .env file QUEUE_CONNECTION=sqsSQS_KEY=theKeyWeGotAboveSQS_SECRET=theSecretKeyWeGotAboveSQS_QUEUE=testSQSSQS_REGION=ap-northeast-1SQS_PREFIX=theURLAboveWithoutQueueName Create jobsphp artisan make:job ProcessPodcast job example:&lt;?phpnamespace App\\Jobs;use App\\Helpers;use Illuminate\\Bus\\Queueable;use Illuminate\\Queue\\SerializesModels;use Illuminate\\Queue\\InteractsWithQueue;use Illuminate\\Contracts\\Queue\\ShouldQueue;use Illuminate\\Foundation\\Bus\\Dispatchable;class SendMailWhenOrderPlaced implements ShouldQueue&#123; use Dispatchable, InteractsWithQueue, Queueable, SerializesModels; protected $job; // The maximum attempts of this job public $tries = 5; /** * Create a new job instance. * * @return void */ public function __construct($order, $FB_email, $Local_email) &#123; $this-&gt;order = $order; $this-&gt;FB_email = $FB_email; $this-&gt;Local_email = $Local_email; $this-&gt;job = Helpers::mailWhenOrderPlaced($order, $FB_email, $Local_email); &#125; /** * Execute the job. * * @return void */ public function handle() &#123; return $this-&gt;job; &#125;&#125; The example above is to execute a function of sending Email called mailWhenOrderPlaced with queue in Ray’s project. Use dispatch Wherever we want to execute this job, we use dispatchSendMailWhenOrderPlaced::dispatch($order, $FB_email, $Local_email); Execute queue Under the projectphp artisan queue:work Test Now, when the dispatch is executed, it will send Email with queue ConclusionIt’s so easy, isn’t it?By the way, because we use queue, so we have to make sure that qeeue works well. In this case, if the queue fails, then the Email function will fail too.To guarantee that queue works well, and automatically restart after fails, we need to use Supervisor to help us monitor and manage processes.If you are interested in Supervisor, you could take a look on Ray’s another article hereIf you are also interested in how to use Laravel Mail and AWS SES, to send mail, you could take a look on Ray’s another article here as well","link":"/LaravelQueueWithSQS/"},{"title":"Use `Laravel` `template` and `blade`","text":"IntroductionThis article is a learning record of Laravel, mainly about how to use Laravel blade. Here are some points: Create and reuse template Use yield and section Pass data to view What {{ }} does for us? Create template Create a template named layout as follows:&lt;!DOCTYPE html&gt;&lt;html lang=\"en\"&gt;&lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; // Set range of title with yield, and set 'Laracasts' as its default value. If value of title is not specified, default value will be applied &lt;title&gt;@yield('title', 'Laracasts')&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;ul&gt; &lt;li&gt;&lt;a href=\"/\"&gt;Welcome&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=\"/about\"&gt;About&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=\"/contact\"&gt;contact&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;// Set range of section named content with yield@yield('content')&lt;/body&gt;&lt;/html&gt; Use section we could directly use the template we created above// We directly apply the 'template' named 'layout'@extends('layout')// Use section, insert value we want into the area we've set in template. We insert value into 'title' section@section('title', 'Welcome Page')// Use section to insert value into section named 'content'@section('content') &lt;h1&gt;Welcome here&lt;/h1&gt;// Use endsection to specify the range of section named 'content'@endsection Repeat the operation above, we apply this templete to multiple pages Pass value to view To pass value to view, actually there is a couple of ways. I will list 4 of them below: 1. Route::get(&apos;/&apos;, function () &#123; $task = [ &apos;Go to the school&apos;, &apos;Go to the market&apos;, &apos;Go to work&apos; ]; return view(&apos;welcome&apos;, compact(&apos;task&apos;) );&#125;); 2. Route::get(&apos;/&apos;, function () &#123; $task = [ &apos;Go to the school&apos;, &apos;Go to the market&apos;, &apos;Go to work&apos; ]; return view(&apos;welcome&apos;, [&apos;tasks&apos; =&gt; $task] ); Route::get(&apos;/&apos;, function () &#123; return view(&apos;welcome&apos;, [&apos;tasks&apos; =&gt; [ &apos;Go to the school&apos;, &apos;Go to the market&apos;, &apos;Go to work&apos; ]]);&#125;); Route::get(&apos;/&apos;, function () &#123; return view(&apos;welcome&apos;)-&gt;withTasks([ &apos;Go to the school&apos;, &apos;Go to the market&apos;, &apos;Go to work&apos; ]);&#125;); 4 of them above, Ray would like to use the first one. Catch the value in view Catch the value in view and render @extends(&apos;layout&apos;)@section(&apos;title&apos;, &apos;Welcome Page&apos;)@section(&apos;content&apos;) &lt;h1&gt;Welcome here&lt;/h1&gt; &lt;ul&gt; @foreach ($tasks as $task) &lt;li&gt; &#123;&#123; $task &#125;&#125; &lt;/li&gt; @endforeach &lt;/ul&gt;@endsection In blade file of Laravel, we would fetch variables within {{ }} As follows: What blade {{ }} does for us? Besides for fetching passed data, {{ }} also execute function of PHP called htmlspecialchars to prevent XSS attack Let’s make an experiment with bladeRoute::get(&apos;/&apos;, function () &#123; $test = &apos;&lt;script&gt;alert(&quot;test&quot;)&lt;/script&gt;&apos;; return view(&apos;welcome&apos;)-&gt;withTasks([ &apos;Go to the school&apos;, &apos;Go to the market&apos;, &apos;Go to work&apos; ])-&gt;withTest($test);&#125;); @extends(&apos;layout&apos;)@section(&apos;title&apos;, &apos;Welcome Page&apos;)@section(&apos;content&apos;) &lt;h1&gt;&#123;&#123; $test &#125;&#125;&lt;/h1&gt; &lt;ul&gt; @foreach ($tasks as $task) &lt;li&gt; &#123;&#123; $task &#125;&#125; &lt;/li&gt; @endforeach &lt;/ul&gt;@endsection As what shows above, the browser render the variable with script tag as follows: Let’s have another experiment. We could deactivate htmlspecialchars by using {!! !!}, but be careful with this feature.@extends(&apos;layout&apos;)@section(&apos;title&apos;, &apos;Welcome Page&apos;)@section(&apos;content&apos;) &lt;h1&gt;&#123;!! $test !!&#125;&lt;/h1&gt; &lt;ul&gt; @foreach ($tasks as $task) &lt;li&gt; &#123;&#123; $task &#125;&#125; &lt;/li&gt; @endforeach &lt;/ul&gt;@endsection The rendered result is as follows: It shows that the script was executed without escaping ConclusionThere are still a lot of usage about blade, I might update this article in the future.","link":"/LaravelView/"},{"title":"My learning journey in Linux","text":"前言This is the notes I take during my learning, and it’s still unorganised, so there will no be English version of this article 正文 搜尋屬於特定 user 或 group 的檔案 find localtion -type f -user userName -group groupName -name fileName 搜尋屬於特定 user 或 group 的資料夾 find localtion -type d -user userName -group groupName -name fileName 列出系統正在執行的 process, 並且從中搜尋關鍵字 ps -ef | node 立刻強制刪除一個工作 kill -9 processID 建立一個捷徑 ln -s sourceAbsoluteLink targetAbsoluteLink 查檔案大小 du -sh fileOrFolder 查硬碟空間使用率 df -h 回傳 true or false [[ -f /.dockerenv ]] [[]] 會將裡頭的參數結果回傳 true or false-f 表示 file exists所以意思是，如果 /.dockerenv 存在，則回傳 true scp利用 config 檔案來驗證scp -F SSHconfig sourceFile targetUser@targetIP:targetLocation 如果是要傳資料夾過去scp -F SSHconfig -r sourceFile targetUser@targetIP:targetLocation 搜尋內容並顯示附近的行數從 gcloud command 中取得資料，並且顯示 ssh-keys 後面的 5 行 gcloud compute project-info describe | grep -A 5 ssh-keys 刪除 group groupdel groupName 刪除 user userdel userName 建立一個 user, 並加到指定 group useradd -G groupName userName 給予一個資料夾 SGID 屬性 chmod 2777 folderName 確認 OS 種類以及版本 使用 lsb_release ， 如果沒安裝的話，安裝它 sudo apt-get install lsb-release 查詢用法 lsb_release --help 輸出如下：-h, --help show this help message and exit-v, --version show LSB modules this system supports-i, --id show distributor ID-d, --description show description of this distribution-r, --release show release number of this distribution-c, --codename show code name of this distribution-a, --all show all of the above information-s, --short show requested information in short format 根據上面的資訊，想查詢明細的話lsb_release -a gcloud 用法compute 建立一台虛擬機 gcloud compute instances create example-instance-1 \\--image-project=ubuntu-os-cloud \\--image-family=ubuntu-1804-lts \\--boot-disk-size=10GB \\--boot-disk-type=pd-standard \\--machine-type=f1-micro \\--tags=example-instance-1,http-server,https-server \\--zone=asia-east1-a 查詢可用的 images 相關資訊 gcloud compute images list 查詢全專案公開 ssh 金鑰並且顯示 5 行資料 gcloud compute project-info describe | grep -A 5 ssh-keys 移除或新增全專案公開 ssh 金鑰 gcloud compute project-info add-metadata --metadata-from-file ssh-keys=fileName 指令如上，以下是 fileName 的格式[USERNAME_2]:ssh-rsa [EXISTING_KEY_VALUE_2] [USERNAME_2][USERNAME_3]:ssh-rsa [NEW_KEY_VALUE] [USERNAME_3] 查詢執行個體的 ssh 金鑰 gcloud compute instances describe instanceName | grep -A 5 ssh-keys 移除或新增執行個體 ssh 金鑰 gcloud compute instances add-metadata instanceName --metadata-from-file ssh-keys=fileName 指令如上，以下是 fileName 的格式[USERNAME_2]:ssh-rsa [EXISTING_KEY_VALUE_2] [USERNAME_2][USERNAME_3]:ssh-rsa [NEW_KEY_VALUE] [USERNAME_3] 為 instance 增加 tagsgcloud compute instances add-tags instanceName \\--tags tag1,tag2,tag3... DNS顯示區域的當前 DNS 紀錄gcloud dns record-sets list --zone=\"myzonename\" 此指令會以含有前 100 筆記錄的資源記錄集，輸出 JSON 回應。您可以指定下列額外參數： limit：要列出的記錄集數目上限。 name：只列出含有這個確切網域名稱的記錄集。 type：只列出這個類型的記錄。如果有這類記錄，則必須同時使用 –name 參數。","link":"/Linux/"},{"title":"My learning journey in Node.js","text":"前言This is the notes I take during my learning, and it’s still unorganised, so there will no be English version of this article 正文使用 fs module fs.writeFileSyncconst fs = require(&#39;fs);在 Node.js 裏頭，如果要引用一個 module ，要用一個變數引用，然後之後就可以使用它例如fs.writeFileSync('hello.txt', 'Hello fromNode.js'); 上面的 function ，是將 Hello fromNode.js 寫進 hello.txt 這個檔案### 建立一個最簡單的 server首先，我們先引用 `http` module，當我們要調用本地 module 時，我們可以指定路徑，像是 `./http` ，但我們要調用 global 的 module 時，我們不加任何路徑， 如下```javascriptconst http = require(&apos;http&apos;); 接下來，我們利用剛剛引用的 http module 來建立一個 server ，如下：const server = http.createServer((req, res) =&gt; &#123; console.log(req);&#125;); orconst server = http.createServer(function(req, res)&#123; console.log(req);&#125;); or function rqListener(req, res) &#123; console.log(req);&#125;const server = http.createServer(rqListener); 最後，我們雖然已經建立了 server ，但是我們還沒有指定它的位址。 我們指定 3000 port 給這個 server ，如下：server.listen(3000); 此時，我們可以從瀏覽器，輸入 localhost:3000 來拜訪這個 server 停止這個 loopconst http = require('http');const server = http.createServer((req, res) =&gt; &#123; console.log(req); process.exit();&#125;);server.listen(3000); 從 request 中取得我們想要的資訊舉例來說，我們要取得 url , method , 以及 header 三項資訊，如下：const http = require('http');const server = http.createServer((req, res) =&gt; &#123; console.log(req.url, req.method, req.header); // process.exit();&#125;);server.listen(3000); 下圖，我們可以看到我們特別指定的三項資訊: 設定 response我們可以在 server 中，指定 response ，如下：const http = require('http');const server = http.createServer((req, res) =&gt; &#123; console.log(req.url, req.method, req.header); // process.exit(); res.setHeader('Content-Type', 'text/html'); res.write('&lt;html&gt;'); res.write('&lt;head&gt;&lt;title&gt;My First Page&lt;/title&gt;&lt;/head&gt;'); res.write('&lt;body&gt;&lt;ht&gt;Hello from my NOde.js Server&lt;/ht&gt;&lt;/body&gt;'); res.write('&lt;/html&gt;'); res.end();&#125;);server.listen(3000); 然後打開開發者工具，我們可以看到我們剛剛設定的 header 然後 response 的地方可以看到我們剛剛設定的 response 簡易的 request routing我們可以指定觸發特定 response 的 url ，當 client 呼叫這個 url 時，就會觸發我們指定的 response ，反之，則觸發另外的 response const http = require('http');const server = http.createServer((req, res) =&gt; &#123; const url = req.url; if (url === '/') &#123; res.write('&lt;html&gt;'); res.write('&lt;head&gt;&lt;title&gt;Enter Message&lt;/title&gt;&lt;/head&gt;'); res.write('&lt;body&gt;&lt;form action=\"/message\" method=\"post\"&gt;&lt;input type=\"text\" name=\"message\"&gt;&lt;button type=\"submit\"&gt;Send&lt;/button&gt;&lt;/form&gt;&lt;/body&gt;'); res.write('&lt;/html&gt;'); return res.end(); &#125; res.setHeader('Content-Type', 'text/html'); res.write('&lt;html&gt;'); res.write('&lt;head&gt;&lt;title&gt;My First Page&lt;/title&gt;&lt;/head&gt;'); res.write('&lt;body&gt;&lt;ht&gt;Hello from my NOde.js Server&lt;/ht&gt;&lt;/body&gt;'); res.write('&lt;/html&gt;'); res.end();&#125;);server.listen(3000); 由上面的 code 可以看到，我們指定 req.url 必須要絕對等於 / 才會觸發條件內，我們指定的 response 如下： 當我們按下 send ，會執行 post method, action /message ，如下： 因為 action 的關係，會嘗試拜訪 message url ，而因為這個 url 並不符合我們設定的條件，所以會執行預設 response 簡單的 redirect request現在，我們要簡易的 redirect 我們的 request ，如下：const http = require('http');const fs = require('fs');const server = http.createServer((req, res) =&gt; &#123; const url = req.url; const method = req.method; if (url === '/') &#123; res.write('&lt;html&gt;'); res.write('&lt;head&gt;&lt;title&gt;Enter Message&lt;/title&gt;&lt;/head&gt;'); res.write('&lt;body&gt;&lt;form action=\"/message\" method=\"post\"&gt;&lt;input type=\"text\" name=\"message\"&gt;&lt;button type=\"submit\"&gt;Send&lt;/button&gt;&lt;/form&gt;&lt;/body&gt;'); res.write('&lt;/html&gt;'); return res.end(); &#125; if (url === '/message' &amp;&amp; method === 'POST') &#123; fs.writeFileSync('message.txt', 'DUMMY'); res.statusCode = 302; res.setHeader('Location', '/'); return res.end(); &#125; res.setHeader('Content-Type', 'text/html'); res.write('&lt;html&gt;'); res.write('&lt;head&gt;&lt;title&gt;My First Page&lt;/title&gt;&lt;/head&gt;'); res.write('&lt;body&gt;&lt;ht&gt;Hello from my NOde.js Server&lt;/ht&gt;&lt;/body&gt;'); res.write('&lt;/html&gt;'); res.end();&#125;);server.listen(3000); 從上面的 code 可以看到，我們新增了第二個 if statement。如果 url 等於 //message 以及 method 等於 post ，雙重條件都符合之下，就會觸發我們設定的條件我們使用了之前我們曾經使用的 fs module ，如果條件觸發，我們就會將 DUMMY 寫入一個叫做 message.txt 的檔案接著回傳 status code 302最後回導到 /在 res.end() 之後，我們不可以在 define 新的 res ，否則就會出現錯誤，因為這邊我們要使用 return ，後續的代碼就不會再執行 Parsing request bodies本章節，我們將解析 request 裡頭的 body 資料並且初次接觸到了 stream 以及 buffer 的概念。首先，我們先設定一個事件。 當接收到 data 時，觸發一個 function 並且帶入 chunk ， chunk 是資料的最小單位。接著我們使用了 console.log 來把 chunk 印出來！同時，我們建立一個 body 常數 array ，並且將每一次觸發 data 事件時，我們都將 chunk 丟到這個 array 裏頭， 代碼如下：const body = [];req.on('data', (chunk) =&gt; &#123; console.log(chunk); body.push(chunk);&#125;); 接著，我們在建立一個事件，當 request 接收完成，我們在定義一個常數，叫做 parsedBody ， 至於這個常數的內容，我們使用 buffer 物件，來將 body array 裡頭的 chunk 都串起來，然後轉換成 string 。最後，我們使用 console.log 把常數 parsedBody 印出來，代碼如下：req.on('end', () =&gt; &#123; const parsedBody = Buffer.concat(body).toString(); console.log(parsedBody);&#125;); 結果如下： 接下來，我們在定義一個常數 message ，它的內容是用 ‘=’ 來將常數 parsedBody 分隔，變成一個 array ，然後我們取 [1] ，就是 array 中的第二項資料。然後，我們將這個常數 message 一方面利用 console.log 印出來，一方面利用 fs module 來寫到一個叫做 message.txt 的檔案中。代碼如下：req.on('end', () =&gt; &#123; const parsedBody = Buffer.concat(body).toString(); const message = parsedBody.split('=')[1]; console.log(message); fs.writeFileSync('message.txt', message);&#125;); 至此, 此 episode 告一段落，最後全部的 code 如下：const http = require('http');const fs = require('fs');const server = http.createServer((req, res) =&gt; &#123; const url = req.url; const method = req.method; if (url === '/') &#123; res.write('&lt;html&gt;'); res.write('&lt;head&gt;&lt;title&gt;Enter Message&lt;/title&gt;&lt;/head&gt;'); res.write('&lt;body&gt;&lt;form action=\"/message\" method=\"post\"&gt;&lt;input type=\"text\" name=\"message\"&gt;&lt;button type=\"submit\"&gt;Send&lt;/button&gt;&lt;/form&gt;&lt;/body&gt;'); res.write('&lt;/html&gt;'); return res.end(); &#125; if (url === '/message' &amp;&amp; method === 'POST') &#123; const body = []; req.on('data', (chunk) =&gt; &#123; console.log(chunk); body.push(chunk); &#125;); req.on('end', () =&gt; &#123; const parsedBody = Buffer.concat(body).toString(); const message = parsedBody.split('=')[1]; console.log(message); fs.writeFileSync('message.txt', message); &#125;); res.statusCode = 302; res.setHeader('Location', '/'); return res.end(); &#125; res.setHeader('Content-Type', 'text/html'); res.write('&lt;html&gt;'); res.write('&lt;head&gt;&lt;title&gt;My First Page&lt;/title&gt;&lt;/head&gt;'); res.write('&lt;body&gt;&lt;ht&gt;Hello from my NOde.js Server&lt;/ht&gt;&lt;/body&gt;'); res.write('&lt;/html&gt;'); res.end();&#125;);server.listen(3000); 了解事件驅動代碼的執行本章節介紹了事件驅動代碼的執行規則以及順序舉例來說，如果我們對目前的代碼做了一些調整，如下:req.on('end', () =&gt; &#123; const parsedBody = Buffer.concat(body).toString(); const message = parsedBody.split('=')[1]; fs.writeFileSync('message.txt', message); res.statusCode = 302; res.setHeader('Location', '/'); return res.end();&#125;); 首先，在一開始我們就引用了 http module 以及 fs module ，然後我們利用 http module 來建立一個 server ，並且讓這個 server 聽 3000 port 。當有任何 requets 呼叫這個 server 時，都會觸發這個 server 。我們帶入 request 以及 response ， 在 server 內可以用。首先，我們定義發請求的 url 為常數 url ， 再來，我們定義發請求的方法為常數 method如果常數 url 等於 / 時，會觸發一系列的 response ，並且 return res.end(); 做結束。如果常數 url 等於 /message 且常數 method 等於 POST 的話，定義常數 body 為 array。接下來進入事件驅動, 當開始解析 request 時，我們帶入 chunk ，印出 chunk ，並且將 chunk 放入一個叫做 body 的 array 常數另外一個事件，當 request 解析完成後， 定義一個常數叫做 parsedBody ，它是利用 buffer 物件來將在常數 body 內的所有 chunk 串連起來，然後變成 string在定義一個常數叫做 message ， 首先， 常數 parsedBody 是一個 string ，我們將這個 string 用 = 為分隔點，將這個 string 變成 array 之後，取 [1] ，就是這個 array 的第二項資料，這個就是常數 message 的值接下來，我們利用一開始引用的 fs module ， 將常數 message 的內容寫入一個叫做 message.txt 的檔案。接下來，定義 response 的 status code 為 302定義 response 跳轉的 location 為 /最後， return res.end(); 出了事件驅動之後，是定義 header ，然後定義另外一些 html 的 response ， 最後是 res.end(); Server 內的執行部分到此做一個結尾。 由於 js 的事件驅動屬性，事件 end 並不會先被執行，反之，後面的代碼會先被執行。所以這個更動會造成一個錯誤，那就是當 res.end(); 已經被執行了，才開始執行 end 事件內的 setHeader 以及 statusCode ，這樣就會造成如下的錯誤 如果，我們在 end 事件之下加了 return ，那錯誤就不會出現 ， 修改代碼如下：req.on('end', () =&gt; &#123; const parsedBody = Buffer.concat(body).toString(); const message = parsedBody.split('=')[1]; fs.writeFileSync('message.txt', message); res.statusCode = 302; res.setHeader('Location', '/'); return res.end();&#125;);return; 因為 end 事件之下的 res.setHeader(&#39;Content-Type&#39;, &#39;text/html&#39;); 就不會被執行了。注意！ 在 return 的當下，其實 end 的監聽事件是還沒有被執行的，但是當 server 裡頭的動作執行完畢之後， request 被解析完成，觸發了 end 的監聽事件，然後才開始執行這個事件裡頭的動作。 至此，此 Episode 告一段落，截至目前的完整程式碼如下：const http = require('http');const fs = require('fs');const server = http.createServer((req, res) =&gt; &#123; const url = req.url; const method = req.method; if (url === '/') &#123; res.write('&lt;html&gt;'); res.write('&lt;head&gt;&lt;title&gt;Enter Message&lt;/title&gt;&lt;/head&gt;'); res.write('&lt;body&gt;&lt;form action=\"/message\" method=\"post\"&gt;&lt;input type=\"text\" name=\"message\"&gt;&lt;button type=\"submit\"&gt;Send&lt;/button&gt;&lt;/form&gt;&lt;/body&gt;'); res.write('&lt;/html&gt;'); return res.end(); &#125; if (url === '/message' &amp;&amp; method === 'POST') &#123; const body = []; req.on('data', (chunk) =&gt; &#123; console.log(chunk); body.push(chunk); &#125;); req.on('end', () =&gt; &#123; const parsedBody = Buffer.concat(body).toString(); const message = parsedBody.split('=')[1]; fs.writeFileSync('message.txt', message); res.statusCode = 302; res.setHeader('Location', '/'); return res.end(); &#125;); return; &#125; res.setHeader('Content-Type', 'text/html'); res.write('&lt;html&gt;'); res.write('&lt;head&gt;&lt;title&gt;My First Page&lt;/title&gt;&lt;/head&gt;'); res.write('&lt;body&gt;&lt;ht&gt;Hello from my NOde.js Server&lt;/ht&gt;&lt;/body&gt;'); res.write('&lt;/html&gt;'); res.end();&#125;);server.listen(3000); Blocking and Non-Blocking Code所以，fs.writeFile 跟 fs.writeFileSync 差在哪？fs.writeFileSync 會待這個檔案寫入的任務完成之後，才會繼續向後執行，而 fs.writeFIle 會異步執行，儘管檔案寫入的任務還沒完成，程式一樣會繼續向後執行，並且，我們可以在任務完成時執行一項 callback ，修改代碼如下： req.on('end', () =&gt; &#123; const parsedBody = Buffer.concat(body).toString(); const message = parsedBody.split('=')[1]; fs.writeFile('message.txt', message, (err)=&gt;&#123; res.statusCode = 302; res.setHeader('Location', '/'); return res.end(); &#125;);&#125;); 從以上的代碼來看，當程式執行到寫入檔案那一行， fs.writeFile ，程式不會停下來等待 fs.writeFile 執行完畢，反之，程式會繼續往下跑 ， 而當 fs.writeFile 執行完畢後，會觸發我們設定的 callback ，進而執行以下的代碼res.statusCode = 302;res.setHeader('Location', '/');return res.end(); 簡述事件迴圈本章節主要參閱官方文件 ， 以及這位大大的文章 。在本章節中，主要是搞懂 Node.js 中事件迴圈的概念。 Node.js 的架構圖 上圖可以看到，除了 V8 Engine ， Node.js 使用了 libuv 來處理 I/O 的部分，提供了 asynchronous 以及 Non-Blocking API 以及事件迴圈 ， 下面提到的事件迴圈，主要與 libuv 有關。 什麼是事件迴圈？事件迴圈，藉由將工作量分擔給 Kernel 來處理，使 Node.js 得以做非阻塞 I/O 的操作，儘管 JsvaScript 是單線程的。 因為目前新型的 Kernel 都是多線程的，它們可以在背景運行多個程序。當其中一個程序完成了， Kernel 會通知 Node.js ，所以 Node.js 會調整將適合的 callback 加到 poll 階段的 queue 當中 ，這些 callback 最終將會被執行。 深談事件迴圈以下是事件迴圈各個階段圖，以及運行順序 每個階段都有自己的 先進先出 的要被執行的 callback queue 。每個階段都有自己特別的運行方式，一般來說，當事件迴圈跑到一個特定的階段，事件迴圈將會執行這個特定階段裡頭的操作，然後執行它的 callback ，這個執行的動作會重複，直到該階段內的 callback 都被執行完畢了，或者已經達到最大的執行數量。當 queue 裡頭的工作都被處理完了，或者已達最大執行數量限制，事件迴圈會進入下一個階段，反覆循環。 因為上述提到的這些程序很有可能排定更多的程序，且由 poll 階段處理的事件將被 kernel 佇列著 ， 所以 poll 事件可以在被佇列的同時也被執行。 造成的結果是，一個耗時較長的 callback ， 會允許 poll 階段執行的久一點，甚至讓 timer 階段的工作等待。 各階段概述 timers: 這個階段主要處理 setTimeout() 以及 setInterval() 排程的 callback I/O callbacks: 除了 timers, setImmediate(), close 之外的多數類型 idle, prepare: 只供內部使用 poll: 取回新的 I/O 事件; 某些情況， node 將會阻塞在這裡 check: setImmediate() callbacks 將會在這階段被觸發 close callbacks: socket, on … libuv 各階段詳述timers:簡單來說， timers 階段將處理 setTimeout() 以及 setInterval() 的工作。 timers 並不保證可以準確地在給予的時間點執行 callback ， 反之 ，給予的時間更像是一個最低的門檻，唯有過了這個給予的時間點， callback 才會被執行，這視乎當時的工作狀態。 系統的排程或者是其他 callback 的運行都可能會延遲 timers 執行的確切時間。總而言之，過了指定的時間點之後， timers 會盡可能地盡快執行排程的 callback可以看看以下的範例： var fs = require('fs');function someAsyncOperation (callback) &#123; // Assume this takes 0 ms to complete fs.readFile('/path/to/file', callback);&#125;function anotherAsyncOperation (callback) &#123; // Assume this takes 0 ms to complete fs.readFile('/path/to/file', callback);&#125;var timeoutScheduled = Date.now();setTimeout(function () &#123; var delay = Date.now() - timeoutScheduled; console.log(delay + \"ms have passed since I was scheduled\");&#125;, 100);// do someAsyncOperation which takes 200 ms to completesomeAsyncOperation(function () &#123; var startCallback = Date.now(); // do something that will take 10ms... while (Date.now() - startCallback &lt; 200) &#123; ; // do nothing &#125;&#125;);// do anotherSyncOperation which takes 200 ms to completeanotherAsyncOperation(function () &#123; var startCallback = Date.now(); // do something that will take 10ms... while (Date.now() - startCallback &lt; 200) &#123; ; // do nothing &#125;&#125;); 從上面的範例中可以看到， setTimeout 任務原定 100 ms 之後被執行，但是 someAsyncOperation 任務花了 0 + 200 ms ，當執行這個任務時，事件迴圈正處在 poll 階段，所以在一個循環中, 需等待 poll 階段中的任務完全處理完畢，或者達到最大處理數量限制。所以在上面的範例中，需等待 poll 階段的任務 someSyncOperation 以及 anotherSyncOperation 被執行完畢，總共花費 400 ms 左右， 之後才會執行 setTimeout() 的任務。 I/O callbacks這個階段主要執行系統端操作的 callbacks, 像是 TCP 錯誤。舉例來說，當試圖連接時，如果一個 TCP socket 接收到 ECONNREFUSED, 某個 *nix 系統想要等待並回報錯誤，這些都會在 I/O callbacks 階段被佇列。 pollpoll 階段有兩種主要功能: 替時間點已經到的 timers 執行腳本 處理 poll queue 當中的事件 當事件進入 poll 階段，且沒有 timers 排程事件 ， 下面兩件事中，其中一件會發生: 如果 poll 階段不為空，事件迴圈將會執行佇列中的所有 callbacks ，又或者達到最大 callbacks 處理上限 如果 poll 階段為空，以下兩件事中，其中一件會發生： 如果腳本已經被 setImmediate() 排程，事件迴圈將會結束 poll 階段，並且繼續進入到 check 階段來處理該佇列中的排程 如果腳本沒有 setImmediate() 的排程，那事件迴圈將會等待新的事件被加入到佇列，然後立即處理他們 一旦 poll 循環為空，事件迴圈將會檢查 timer 中有沒有可以執行的 callback。 如果有一個或多個可以執行了, 事件迴圈會回去執行 timer 階段的 callback check這個階段允許在 poll 階段完成後，立即執行 callback。如果 poll 階段處於空轉，或者已經有 setImmediate() 的排程，事件迴圈將會繼續進入到 check 階段，而不會等待。 setImmediate() 事實上，是一個很特別的 timer 階段，它跟 timer 在事件迴圈內跑在不同的階段。 它使用 libuv API ，這個 API 排程 callback 使之在 poll 階段結束後被執行 通常，事件迴圈會停在 poll 階段等待新的 request 或 connection ，但是當 setImmediate() 有排程，且 poll 階段處於空轉, 那事件迴圈將會結束 poll 階段，並且進入 check 階段 close callbacks如果一個 socket 或 handle 忽然被關閉， close 事件將會被置於這個階段，除非我們指定 process.nextTick 來執行它 setImmediate() vs setTimeout()setImmediate() 和 setTimeout() 很類似，但根據被呼叫的時機不一樣，行為也不同。 setImmediate() 被設計為，一旦 poll 階段結束時執行 setTimeout() 排程任務，在特定的時間之後執行 兩者之間執行的順序，根據被呼叫時的情況而有所不同。如果兩者都在主模組的時候被呼叫，那順序將由當時的程序的表現所決定，意思就是說，順序無法預測。範例如下：// timeout_vs_immediate.jssetTimeout(function timeout () &#123; console.log('timeout');&#125;,0);setImmediate(function immediate () &#123; console.log('immediate');&#125;); 然而，如果兩者是在 I/O cycle 中被呼叫，那 sedImmediate() 將會優先於 setTimeout() // timeout_vs_immediate.jsvar fs = require('fs')fs.readFile(__filename, () =&gt; &#123; setTimeout(() =&gt; &#123; console.log('timeout') &#125;, 0) setImmediate(() =&gt; &#123; console.log('immediate') &#125;)&#125;) 對比 setTimeout() , 使用 setImmediate() 的主要優勢為，如果在 I/O cycle 中， setImmediate() 將會被優先執行，不管 setTimeout() 有幾個 process.nextTick()理解 process.nextTick()你可能已經注意到， process.nextTick() 並沒有被顯示在圖表上，儘管它也是 asynchronous API 的一部分。 這是因為 process.nextTick() 技術上來說不算是事件迴圈的一部分。 nextTickQueue 將會在目前操作完成後，立即被執行，不管目前是在事件迴圈內的哪一個循環。 看看我們的圖表，不管在什麼時候，只要你在特定的階段呼叫 process.nextTick() ， 所以經由 process.nextTick() 送出的 callbacks 將會在事件迴圈啟動下一個階段之前全部都處理完畢。 這樣的模式可能會造成一些不好的情況發生，因為如果你遞迴的使用 process.nextTick() callback ，就會造成所謂的 I/O 飢餓 ，事件迴圈將會無法進入 poll 階段 為什麼這樣的行為會被容許？你可能會想，為什麼這樣的行為在 Node.js 終會被容許？ Node.js 部分的設計哲學是， API 總是異步的，不管是否必要，可以參考以下範例:// this has an asynchronous signature, but calls callback synchronouslyfunction someAsyncApiCall (callback) &#123; callback(); &#125;;// the callback is called before `someAsyncApiCall` completes.someAsyncApiCall(() =&gt; &#123; // since someAsyncApiCall has completed, bar hasn't been assigned any value console.log('bar', bar); // undefined&#125;);var bar = 1; 如果我們執行上面的代碼，會出現輸出如下： 因為 someAsyncApiCall 並沒有做任何異步的動作，照同步的流程跑到 console.log 時， bar 還沒有被定義 如果我們將代碼改成以下：function someAsyncApiCall (callback) &#123; process.nextTick(callback);&#125;;someAsyncApiCall(() =&gt; &#123; console.log('bar', bar); // 1&#125;);var bar = 1; 可以得到以下的輸出： 如上所述， process.nextTick() 的執行時間，是在當前的階段內所有的工作都完成了，在進入下個階段之前，會將所有的 process.nextTick() 處理完畢。在上面的例子中， process.nextTick() 會等到所有在此階段的代碼都被執行完畢，也就是待 var bar = 1 執行後，才去執行這個 callback ，所以不會出現 undefined 的情況。請注意！這沒有最大處理數量限制，所以如果利用 process.nextTick() 指派遞迴任務，那就會造成 I/O 飢餓 情況， 事件迴圈將無法接收到新的 request 一個 tick 到底是多長？一個 tick 的時間長度，是 Event Loop 繞完一圈，把所有 queues 中的 callbacks 依序且同步地執行完，所消耗的總時間。因此，一個 tick 的值是不固定的。可能很長，可能很短，但我們希望它能盡量地短。 process.nextTick() vs setImmediate()千萬不要被這兩個階段的命名搞混了！ process.nextTick():在當前階段結束前執行完畢 setImmediate():在下一個階段，或者下一個事件迴圈的 tick 中執行 基本上，這兩個命名應該是要互換。 process.nextTick() 比 setImmediate() 更快地被觸發。這算是一個很難更動的部分，因為當初命名錯誤之後，隨時時間的推移，越來越多 npm 的 package 都是使用這樣的命名，所以一旦這命名變更了，影響會非常的大。 官方文件上建議開發者，在任何情況中，都使用 setImmediate() ，因為它可以更簡單的被邏輯思考，然後在不同的環境上，有著更廣的相容性。 Promise從下面的原始碼可以看到 Promise ， 或者又稱為 microtasks 的執行優先順序依照原始碼的執行順序來看，在一個階段結束之前，process.nextTick() 會先被執行，緊接著, 執行 Promise 。 startup.processNextTick = function() &#123; var nextTickQueue = []; // Callbacks 會排進這個 queue!! var pendingUnhandledRejections = []; var microtasksScheduled = false; var _runMicrotasks = &#123;&#125;; // ... 略 process.nextTick = nextTick; // nextTick 函式在下面 // ... 略 // process._setupNextTick 在 node.cc 中, 我認為意思到了, 就不用再挖下去了 const tickInfo = process._setupNextTick(_tickCallback, _runMicrotasks); _runMicrotasks = _runMicrotasks.runMicrotasks; // ... 略 function _tickCallback() &#123; var callback, args, tock; do &#123; while (tickInfo[kIndex] &lt; tickInfo[kLength]) &#123; // callbacks 從 queue 中一個一個被挖出來執行 tock = nextTickQueue[tickInfo[kIndex]++]; callback = tock.callback; args = tock.args; if (args === undefined) &#123; nextTickCallbackWith0Args(callback); &#125; else &#123; switch (args.length) &#123; case 1: nextTickCallbackWith1Arg(callback, args[0]); // ... &#125; &#125; if (1e4 &lt; tickInfo[kIndex]) tickDone(); &#125; tickDone(); // process.nextTick 的 callbacks 跑完, 接著跑 Promise 的 microtasks _runMicrotasks(); emitPendingUnhandledRejections(); &#125; while (tickInfo[kLength] !== 0); &#125; // ...略 function nextTick(callback) &#123; var args; if (arguments.length &gt; 1) &#123; args = []; for (var i = 1; i &lt; arguments.length; i++) args.push(arguments[i]); &#125; // 將 callback 連它的 arguments 用一個物件存起來推進 queue nextTickQueue.push(new TickObject(callback, args)); tickInfo[kLength]++; &#125; // ... &#125;; 事件迴圈總結 順序:timers &rarr; I/O callbacks &rarr; idle, pare &rarr; poll &rarr; check &rarr; close callbacks &rarr; timers … 往復循環 順序細節 timers 設定的時間過了之後，才會被’盡快’的執行。如果 poll 階段內還有工作還沒做完，會先做完，才會執行 timers 的工作，所以可能會延遲 當處於 I/O 程序中，比如說， fs 模組中， setImmediate() 順序一定大於 setTimeout() ，因為 check 階段緊接在 poll 階段之後 當處於主要模組中， setImmediate() 以及 setTimeout 的優先順序，取決於運行狀況，這個狀態下，次序無法確定 process.nextTick() 將在當前階段的工作結束前，在進入下一個階段之前執行, 所以他的優先性是第一名的 promise 的執行次序緊接在 process.nextTick() 之後，也是在當前階段結束前執行完畢 Express.js建立一個 app server npm install --save 2.npm install --save express npm install --save-dev nodemon Set script as nodemon fileName.js 指定 status coderes.status (statusCode); Promise以下的範例中， function test 中，我們 return 了一個 Promise ，如果帶入 test function 中的 argument 是 1 ，那就走 resolve 路線 ， 而除了 1 之外所有的 argument, 都走 reject 路線。在 function main 中, 我們使用了 function test, 並帶入 argument 1, Ray 個人覺得這有點像是 PHP 當中的 ternary 用法。當 argument 等於我們在 promise 當中指定的 1 時，走 resolve 路線, 而 then 就是當 promise 為 resolve 路線時該做的事。當 argument 等於是除了 1 之外的任何數，也就是會走 promise 當中的 reject 路線, 此時將會執行 catch 的動作。我們在 promise 當中指定，當走 resolve 路線時，輸出為字串 Success, 所以在 then 的 closure 當中，被帶入的 argument 就是 Success反之，當走 reject 路線時，輸出字串為 Error, 所以在 catch 的 closure 當中，被帶入的 argument 則為 Errorfunction test(number) &#123; return new Promise((resolve, reject) =&gt; &#123; if (number === 1) &#123; resolve(\"Success\") &#125; else &#123; reject(\"Failed\") &#125; &#125;)&#125;function main() &#123; test(1).then((result) =&gt; &#123; // result === \"Success\" console.log(result) &#125;).catch((error) =&gt; &#123; // 不會被執行, 因為狀態是成功 &#125;) test(2).then((result) =&gt; &#123; // 不會被執行, 因為狀態是成功 console.log(result) &#125;).catch((error) =&gt; &#123; // error === \"Failed\" console.log(error) &#125;)&#125; 建立 Datastore Model// 從 google SDK 引用 Datastore functionconst &#123;Datastore&#125; = require('@google-cloud/datastore');// 輸入 project_idconst projectId = 'balmy-sanctuary-238903';// 初始一個 Datastore instanceconst datastore = new Datastore(&#123; projectId: projectId,&#125;);// 匯出這個 modulemodule.exports = datastore; 建立一個 Controller// 匯出這個 functionexports.test = function (req, res) &#123; async function quickStart() &#123; // The kind for the new entity const kind = 'abc'; // The name/ID for the new entity const name = 'sampletask1'; // The Cloud Datastore key for the new entity const taskKey = datastore.key([kind, name]); // Prepares the new entity const task = &#123; key: taskKey, data: &#123; description: 'Buy milk', &#125;, &#125;; console.log(datastore.key(['name', 'kind'])); // Saves the entity await datastore.save(task); console.log(`Saved $&#123;task.key.name&#125;: $&#123;task.data.description&#125;`); res.send(`Saved $&#123;task.key.name&#125;: $&#123;task.data.description&#125;`); &#125; quickStart().catch(console.error);&#125;; Routevar express = require('express');var router = express.Router();// 導入 controller 模組, 並給予名稱var datastore = require('../controllers/datastoreController');/* GET home page. */router.get('/', function(req, res, next) &#123; res.render('index', &#123; title: 'Express' &#125;);&#125;);// 建一個 router, 並且導向 datastoreController 裡頭的 test functionrouter.get('/test', datastore.test);module.exports = router; Root address// 找一個地方新增一個檔案，輸入以下的 code// 之後我們就可以在任何一個檔案中，透過 require 這個檔案來 const rootDirconst path = require('path');module.exports = path.dirname('/Users/ray/code/datastore/app.js'); 若我們 console.log 上面 exports 的值，可以得到該專案下的 root 位址 Path利用 path module 來指定路徑// p 會等於專案根目錄下, data 資料夾之下的一個叫做 `products.json` 的檔案// 專案根目錄請參考 `root address` 章節const p = path.join(rootDir, 'data', 'products.json') object.assign 可用來複製或覆蓋目標物件let exampleObject = &#123;a:1, b:2, c:3, c:4&#125;;let copy = object.assign(&#123;&#125;, exampleObject, &#123;a:4, b:4, c:4, d:4&#125;); test 用來確認該 string 是否符合該 regex pattenvar str = \"Hello world!\";// look for \"Hello\"var patt = /Hello/g;var result = patt.test(str);// result = true 時間var moment = require('moment-timezone');var test = moment(createdDate).tz(\"Asia/Taipei\").format('YYYY-MM-DD HH:MM:SS');console.log(test); // 2019-05-21 08:05:44 同時異步發多請求，並待全部有結果後繼續// 需安裝兩個套件 `request-promise` 以及 `p-limit`const request = require('request-promise');const pLimit = require('p-limit');class HealthCheckService &#123; static async getHealthCheckResults(sites) &#123;// 指定 limit 同時最多發十個 request const limit = pLimit(10);// 利用 map 從 sites 中拿到我們要發請求的 url// 然後利用套件 `limit` 來限制同時發請求的數量，再來使用 `request-promise` 套件來對上面拿到的 url 發請求 let promises = sites.map((site) =&gt; &#123; let url = `https://yourAPI?host=$&#123;site.host&#125;&amp;cname=$&#123;site.cname&#125;`; return limit(() =&gt; request(url)); &#125;);// 上面的每一個 promises, 都是一個請求。 現在我們利用 `Promise.all`, 待所有的結果都回來之後，在 return return await Promise.all(promises); &#125;&#125;","link":"/Node-js/"},{"title":"OOP-Class and Object","text":"Hello everyone, it’s Ray! Today I’m going to share with you what class is, and what object is, also the relationship between them. It’s hard to skip object when it comes to class, and vice versa, which is often what keep people from understanding. Simply speaking, class is the code template that generates objects. Talking is easy, let’s have some hand-on experiment first! We could name a class with arbitrary name, which could be a combination of letters and numbers, and it must not begin with a number. Please take a look on the example below:class ＭyAccessories&#123; // class body&#125; The stuff above doesn’t look like a useful thing though, it’s a totally legal class. As above mentioned, class is a template that generates objects. Now let’s create some objects as code below:$accessory1 = MyAccessories();$accessory2 = MyAccessories(); We use class “MyAccessories” to create two objects, and due to the same class that they come from, they share with the same functionality and type. And you might ask, are they the same? The answer is NO! Although they are the same in functionality or type, they are indeed different objects I know that you might still be confusing. Okay, let’s print them out. Add the following code:var_dump($accessory1);var_dump($accessory2); I assume that you will print the stuff below, and you could see the number that follows pound sign, which represent their uniqueness. “Maybe the script shows the number in orders” You might say.object(MyAccessories)#1 (0) &#123;&#125;object(MyAccessories)#2 (0) &#123;&#125; Okay, let’s have another experiment to make it crystal clear. We switch the name of objects within var_dump braces, and if the script just shows the number in order, theorectically the number that follows pound sign will not change, will it?var_dump($accessory2);var_dump($accessory1); I suppose that you will print something as follows:object(MyAccessories)#2 (0) &#123;&#125;object(MyAccessories)#1 (0) &#123;&#125; See! The number after pound sign changed, which means the fact that even though they are generated with the same class, they have their own number that represent their uniqueness. That said each object is unique. If you still have some confusion, let’s make an analogy as follows: You could think of class as the a mould that produce a lot of castings, and objects are the castings that produced by the mould. They could be keycaps, or earphones. Despite the fact that they look identical on appearance, they are different. You might spot some serial number on them, and it’s like the number we printed earlier after pound sign. Do you have more understanding on class and object after reading through this article?","link":"/OOP-ClassAndObject/"},{"title":"Easy Payment Gateway with PayPal REST API","text":"IntroductionIn this article, we are going to share how to do the follows with PayPal REST API Create authorization order Authorization Capture Refund Place funds on hold Since it’s a learning technical diary, it will contain my personal project. You could selectively refer to this article. Install PayPal REST API official SDKIn this article, we use the latest released version of the official SDK Installcomposer require paypal/paypal-checkout-sdk SettingPersonal setting After installation, you could find the example under SDK directory as photo below: Configure PayPal Client.php as follows: Apply for a developer account and login Create an App Get your Client ID and Secret Fill in with the got Client ID and Secret, Ray set them as environment variables. public static function environment()&#123; $clientId = env('PAYPAL_SANDBOX_API_ClientID'); $clientSecret = env('PAYPAL_SANDBOX_API_SECRET'); return new SandboxEnvironment($clientId, $clientSecret);&#125; Let’s beginAs mentioned previously, we could find almost all of the examples for every situation in the official sample directory. You could customize it according to your need. The following will be Ray’s version.If you have any questions, feel free to refer to the samples under sample directory, and the official document as follows:orderpayment The difference between order and paymentHere are some main differences: order： It only supports members of PayPal. You could delay your payment, and partially capture the payment upon what you need. payment: You could delay the payment, but you can’t partially capture it. For more information, you could refer to the official document Create an orderpublic function createOrder($toBeSavedInfo, Recipient $recipient, $debug = false)&#123; // Use SDK $request = new OrdersCreateRequest(); $request-&gt;headers[\"prefer\"] = \"return=representation\"; // We will show this part later. $request-&gt;body = self::buildRequestBody($toBeSavedInfo, $recipient); // We use the PayPalClient we just set up $client = PayPalClient::client(); $response = $client-&gt;execute($request); if ($debug) &#123; print \"Status Code: &#123;$response-&gt;statusCode&#125;\\n\"; print \"Status: &#123;$response-&gt;result-&gt;status&#125;\\n\"; print \"Order ID: &#123;$response-&gt;result-&gt;id&#125;\\n\"; print \"Intent: &#123;$response-&gt;result-&gt;intent&#125;\\n\"; print \"Links:\\n\"; foreach ($response-&gt;result-&gt;links as $link) &#123; print \"\\t&#123;$link-&gt;rel&#125;: &#123;$link-&gt;href&#125;\\tCall Type: &#123;$link-&gt;method&#125;\\n\"; &#125; // To toggle printing the whole response body comment/uncomment below line echo json_encode($response-&gt;result, JSON_PRETTY_PRINT), \"\\n\"; &#125; // After the order is created, I only take the approve link. In default, PayPal provides several links for difference usage. However, we could achieve others except for approve with REST API. foreach (($response-&gt;result-&gt;links) as $link) &#123; if ($link-&gt;rel === 'approve') &#123; $linkForApproval = $link-&gt;href; break; &#125; &#125; // We get some information which we are going to use later, and return. $toBeSavedInfo['payment_id'] = $response-&gt;result-&gt;id; $toBeSavedInfo['statusCode'] = $response-&gt;statusCode; $toBeSavedInfo['custom_id'] = $response-&gt;result-&gt;purchase_units[0]-&gt;custom_id; $toBeSavedInfo['PayPal_total_amount'] = $response-&gt;result-&gt;purchase_units[0]-&gt;amount-&gt;value; $toBeSavedInfo['orderStatus'] = $response-&gt;result-&gt;status; $toBeSavedInfo['linkForApproval'] = $linkForApproval; return $toBeSavedInfo;&#125; Please refer to the RequestBody for creating an order as follows:public static function buildRequestBody($toBeSavedInfo, Recipient $recipient)&#123; // The setting here allows us to see items in detail in PayPal payment page $item = []; $i = 1; foreach ($toBeSavedInfo['orders'] as $order) &#123; $item[] = [ 'name' =&gt; $order-&gt;item_name, 'description' =&gt; $order-&gt;item_description, 'sku' =&gt; $i, 'unit_amount' =&gt; [ 'currency_code' =&gt; $toBeSavedInfo['mc_currency'], 'value' =&gt; $order-&gt;unit_price, ], 'quantity' =&gt; $order-&gt;quantity, ]; $i ++; &#125; // Here we specify the intent, which I had set as a environment variable return [ 'intent' =&gt; env('PAYPAL_SANDBOX_INTENT_OF_CREATED_ORDERS'), 'application_context' =&gt; [ 'return_url' =&gt; env('PAYPAL_SANDBOX_RETURN_URL'), 'cancel_url' =&gt; env('PAYPAL_SANDBOX_CANCEL_URL'), 'brand_name' =&gt; env('APP_NAME'), 'locale' =&gt; env('PAYPAL_SANDBOX_LOCALE'), 'landing_page' =&gt; env('PAYPAL_SANDBOX_LANDING_PAGE'), 'shipping_preferences' =&gt; env('PAYPAL_SANDBOX_SHIPPING_PREFERENCES'), 'user_action' =&gt; env('PAYPAL_SANDBOX_USER_ACTION'), ], // Here we could set purchase_unit. We could set tax, shipping fee, etc... under purchase_unit. We will skip those here. 'purchase_units' =&gt; [ [ 'custom_id' =&gt; $toBeSavedInfo['merchant_trade_no'], 'amount' =&gt; [ 'currency_code' =&gt; $toBeSavedInfo['mc_currency'], 'value' =&gt; $toBeSavedInfo['total_amount'], 'breakdown' =&gt; [ 'item_total' =&gt; [ 'currency_code' =&gt; $toBeSavedInfo['mc_currency'], 'value' =&gt; $toBeSavedInfo['total_amount'], ], ], ], 'items' =&gt; $item, // We could specify the recipient here. 'shipping' =&gt; array( 'name' =&gt; array( 'full_name' =&gt; $recipient-&gt;name, ), 'address' =&gt; array( 'address_line_1' =&gt; $recipient-&gt;others, 'admin_area_2' =&gt; $recipient-&gt;district, 'admin_area_1' =&gt; $recipient-&gt;city, 'postal_code' =&gt; $recipient-&gt;postcode, 'country_code' =&gt; $recipient-&gt;country_code, ), ), ], ], ];&#125; AuthorizationNow, we are going to use one of the important functions in REST API, authorization. After authorization, we will be able to capture the authorized amount within 29 days. However, PayPal only guarantees that the authorized amount will be available for three days right after a single authorization. It means that PayPal will temporarily place authorized funds on hold within buyer’s account for only three days after authorization. Please note that it’s only for three days, and it’s called Honor Period. After the first authorization, we will be able to apply for multiple authorization up to 10 times, which is called reauthorizeIf you think the number is too less, you could contact PayPal, and raise the number to up to 99 times. Actually if you count the time properly and precisely, 10-time authorization should be enough. If you authorize once every three days, you could place funds on hold for a month with 10-time authorization, which is even enough for sea fright. You will be allowed to change the order amount for up to 115% or not more than USD 75. You could use this feature when there are some required changes on tax or shipping fee. You could refer to official document Here is the authorization example as follows.Please note that it’s Ray’s version. You could refer to official version and then modify it according to your need, or make one on our own with a reference on its SDK, which I think might be the best solution. /** * This function can be used to perform authorization on the approved order. * Valid Approved order id should be passed as an argument. */ // Here we could revise the authorized amount upon your need.public static function authorizeOrder($orderId, $amount = null, $debug = false)&#123; $request = new OrdersAuthorizeRequest($orderId); // RequestBody as mentioned above. You could refer to the official example. $request-&gt;body = self::buildRequestBodyForAuthorizeOrder($amount); $client = PayPalClient::client(); $response = $client-&gt;execute($request); if ($debug) &#123; print \"Status Code: &#123;$response-&gt;statusCode&#125;\\n\"; print \"Status: &#123;$response-&gt;result-&gt;status&#125;\\n\"; print \"Order ID: &#123;$response-&gt;result-&gt;id&#125;\\n\"; print \"Authorization ID: &#123;$response-&gt;result-&gt;purchase_units[0]-&gt;payments-&gt;authorizations[0]-&gt;id&#125;\\n\"; print \"Links:\\n\"; foreach ($response-&gt;result-&gt;links as $link) &#123; print \"\\t&#123;$link-&gt;rel&#125;: &#123;$link-&gt;href&#125;\\tCall Type: &#123;$link-&gt;method&#125;\\n\"; &#125; print \"Authorization Links:\\n\"; foreach ($response-&gt;result-&gt;purchase_units[0]-&gt;payments-&gt;authorizations[0]-&gt;links as $link) &#123; print \"\\t&#123;$link-&gt;rel&#125;: &#123;$link-&gt;href&#125;\\tCall Type: &#123;$link-&gt;method&#125;\\n\"; &#125; // To toggle printing the whole response body comment/uncomment below line echo json_encode($response-&gt;result, JSON_PRETTY_PRINT), \"\\n\"; &#125; return $response;&#125; After authorization, we need to check if the authorization is successful, and therefore Ray made a validation function with the response got from the SDKpublic static function checkIfAuthorizedSuccessfully($response)&#123; $newPayPal = (new NewPayPal())-&gt;where('payment_id', request()-&gt;token)-&gt;first(); // Check if the authorization is completed if (($response-&gt;result-&gt;status) !== 'COMPLETED') return 'Authorization isn\\'t completed'; // Check if the authorization has started. if (($response-&gt;result-&gt;purchase_units[0]-&gt;payments-&gt;authorizations[0]-&gt;status) !== 'CREATED') return 'Authorization was not created'; // Check if the currency is matched if (($response-&gt;result-&gt;purchase_units[0]-&gt;payments-&gt;authorizations[0]-&gt;amount-&gt;currency_code) !== ($newPayPal-&gt;mc_currency)) return 'The currency is mismatched'; // Check if authorized amount is correct. Here is my own version, and you could revise the amount if you need. if (intval($response-&gt;result-&gt;purchase_units[0]-&gt;payments-&gt;authorizations[0]-&gt;amount-&gt;value) !== ($newPayPal-&gt;total_amount)) return 'The total amount is not correct';&#125; Capture Just like mentioned above, we will be allowed to capture the order after a successful authorization. However, PayPal only guarantees the authorized amount will be available for three days, which is also called honor period. Generally speaking, a proper and precise time counting with authorization and reauthorizing will be able to temporarily place funds on hold for 30 days. Here is the capture examplepublic static function captureAuthorization(NewPayPal $newPayPal, $final_capture = false, $debug = false)&#123; $NewPayPal = (new NewPayPal)-&gt;where('merchant_trade_no', $newPayPal-&gt;merchant_trade_no)-&gt;first(); // Capture function requires an authorization id $request = new AuthorizationsCaptureRequest($newPayPal-&gt;authorization_id); // Here we need to fill in to-be-captured amount. As mentioned above, amount capture could be partial. If final_capture is set to true, this authorization will end, and reauthorizing will be required for any further capture. $request-&gt;body = self::buildRequestBodyForCaptureAuthorization($NewPayPal-&gt;to_be_captured_amount, $final_capture, $newPayPal-&gt;mc_currency); $client = PayPalClient::client(); $response = $client-&gt;execute($request); if ($debug) &#123; print \"Status Code: &#123;$response-&gt;statusCode&#125;\\n\"; print \"Status: &#123;$response-&gt;result-&gt;status&#125;\\n\"; print \"Capture ID: &#123;$response-&gt;result-&gt;id&#125;\\n\"; print \"Links:\\n\"; foreach ($response-&gt;result-&gt;links as $link) &#123; print \"\\t&#123;$link-&gt;rel&#125;: &#123;$link-&gt;href&#125;\\tCall Type: &#123;$link-&gt;method&#125;\\n\"; &#125; // To toggle printing the whole response body comment/uncomment below line echo json_encode($response-&gt;result, JSON_PRETTY_PRINT), \"\\n\"; &#125; return $response;&#125; Here is RequestBody for capture.public static function buildRequestBodyForCaptureAuthorization($amount = null, $final_capture = false, $currency = 'USD')&#123; if ($amount != null) &#123; // We specify the amount and currency of capture, which need to match the ones for authorization. return [ \"amount\" =&gt; [ 'currency_code' =&gt; $currency, 'value' =&gt; $amount, ], 'final_capture' =&gt; $final_capture ]; &#125; return \"&#123;&#125;\";&#125; Here is the logic of capture as follows:Ray’s logic is to set a to-be-captured amount to decide when the amount will be captured, which could save handing fee because each time a refund request will cost some handing fee. So Ray’s logic is to place funds on hold, and only revise to-be-captured amount when a refund request is made before to-be-captured date. Therefore, we could at the most extend save the handing fee on the seller side. The allowable refund period is 7 days in Ray’s logic, and capture the authorization with the final to-be-captured amount.So the following function only runs once a day. If the current time is beyond the to-be-captured date, the authorization will be captured and update order state accordingly.public static function dailyCaptureAuthorization()&#123; $toBeCapturedPayments = NewPayPal::whereNotNull(&apos;authorization_id&apos;)-&gt;whereNull(&apos;capture_id&apos;)-&gt;where(&apos;to_be_captured_date&apos;, &apos;&lt;&apos;, Carbon::now()-&gt;toDateTimeString())-&gt;get(); foreach ($toBeCapturedPayments as $toBeCapturedPayment) &#123; $response = NewPayPal::captureAuthorization($toBeCapturedPayment); if (($response-&gt;result-&gt;status) === &apos;COMPLETED&apos;) &#123; $toBeCapturedPayment-&gt;update([&apos;capture_id&apos; =&gt; $response-&gt;result-&gt;id, &apos;status&apos; =&gt; 7]); foreach ($toBeCapturedPayment-&gt;orderRelations as $orderRelation) &#123; if (($orderRelation-&gt;status == 5) || ($orderRelation-&gt;status == 6)) &#123; $orderRelation-&gt;order-&gt;update([&apos;status&apos; =&gt; 7]); $orderRelation-&gt;update([&apos;status&apos; =&gt; 7]); &#125; &#125; &#125; &#125;&#125; Refund The rule of refund is to refund an amount of money partially or one-time towards specific authorization. If you specify an amount, you refund the order partially. If you would like to fund it at a time, you could leave a empty RequestBody as the official example.public static function refundOrder($captureId, $amount, $currency, $debug = false)&#123; $request = new CapturesRefundRequest($captureId); // The required to-be-refunded amount and currency should match the ones of the authorization. $request-&gt;body = self::buildRequestBodyForRefundOrder($amount, $currency); $client = PayPalClient::client(); $response = $client-&gt;execute($request); if ($debug) &#123; print \"Status Code: &#123;$response-&gt;statusCode&#125;\\n\"; print \"Status: &#123;$response-&gt;result-&gt;status&#125;\\n\"; print \"Order ID: &#123;$response-&gt;result-&gt;id&#125;\\n\"; print \"Links:\\n\"; foreach ($response-&gt;result-&gt;links as $link) &#123; print \"\\t&#123;$link-&gt;rel&#125;: &#123;$link-&gt;href&#125;\\tCall Type: &#123;$link-&gt;method&#125;\\n\"; &#125; // To toggle printing the whole response body comment/uncomment below line echo json_encode($response-&gt;result, JSON_PRETTY_PRINT), \"\\n\"; &#125; return $response;&#125; The following is the RequestBody for refund.public static function buildRequestBodyForRefundOrder($amount = null, $currency = 'USD', $final_capture = false)&#123; // If the amount is specified, it will be a specified amount. If not, it will be default setting. if ($amount != null) &#123; return [ \"amount\" =&gt; [ 'currency_code' =&gt; $currency, 'value' =&gt; $amount, ], 'final_capture' =&gt; $final_capture ]; &#125; return \"&#123;&#125;\";&#125; The logic for refund. Corresponding to the capture action, before the seller make any capture to buyers, all those refund requests from buyers are only to revise numbers in the database. If 7 days have passed, but in a particular case, a refund request still raised by a buyer, the amount could still be refunded with inevitable handing fee. All logic mentioned above is only for PayPal. Since this project integrate with two payment gateway, the above mentioned logic doens’t suit AllPay. However, generally speaking, it makes no difference to buyers.public static function refund(Order $order, NewPayPal $paymentServiceInstance, OrderRelations $orderRelation)&#123; // When the order is authorized but not yet captured. if (($paymentServiceInstance-&gt;capture_id === null) &amp;&amp; ($paymentServiceInstance-&gt;authorization_id !== null)) &#123; // As mentioned above, we only revise to-be-captured amount in the database. $paymentServiceInstance-&gt;update([ &apos;to_be_captured_amount&apos; =&gt; $paymentServiceInstance-&gt;to_be_captured_amount - $order-&gt;total_amount, &apos;total_amount&apos; =&gt; $paymentServiceInstance-&gt;total_amount - $order-&gt;total_amount ]); $order-&gt;update([&apos;status&apos; =&gt; 4]); $orderRelation-&gt;update([&apos;status&apos; =&gt; 4]); &#125; // When the order has been captured if ($paymentServiceInstance-&gt;capture_id !== null) &#123; // We do implement refund API, returning the amount to buyers. $response = self::refundOrder($paymentServiceInstance-&gt;capture_id, $order-&gt;total_amount, $paymentServiceInstance-&gt;mc_currency); // If the refund is completed, the order state will be updated. if ($response-&gt;result-&gt;status == &apos;COMPLETED&apos;) &#123; $order-&gt;update([&apos;status&apos; =&gt; 4]); $orderRelation-&gt;update([&apos;status&apos; =&gt; 4]); $paymentServiceInstance-&gt;update([ &apos;total_amount&apos; =&gt; $paymentServiceInstance-&gt;total_amount - $order-&gt;total_amount ]); &#125; &#125;&#125; Cancel an authorization.Cancelling an authorization is pretty easy with official example. You only have to provide authorization ID with required format, we are not going to explain explicitly.The authorization ID will be returned after a successful authorization, so remember to save it. Get authorization data.Getting an authorization is pretty easy with official example. You only have to provide authorization ID with required format, we are not going to explain explicitly.The authorization ID will be returned after a successful authorization, so remember to save it. Getting capture dataGetting a capture data is pretty easy with official example. You only have to provide authorization ID with required format, we are not going to explain explicitly.The capture ID will be returned after a successful authorization, so remember to save it. ConclusionAccording to the official document, you could use Smart Button of JavaScript SDK with PayPal REST APIO. However, Ray is responsible for backend, so this part wasn’t deeply dug.It looks interesting. If you are interested, you could spend some time on it.PayPal is veritably an international payment gateway. It provides various features and supports. What a pity that PayPal has taken back its service from Taiwan. However, as far as I know, it happened due to tax safeguarding in Taiwan. It’s hard to judge good or bad.I’ve spent some time those days digging in PayPal gateway. Surely there are still some dedicate features that I haven’t tried. I will write another article for that after I give it a shot! You are free to share this article wherever you want, but kindly cite the source. Thanks!","link":"/PayPalRestAPI/"},{"title":"Stackdriver-quick start","text":"Refer to QWIKLABS","link":"/Stackdriver/"},{"title":"Save and resize images in Laravel","text":"IntroductionThis article is my learning log of saving images and resize it afterwards with Laravel and its package Internention Install package InterventionPlease refer to the installing guide on its official GitHubcomposer require intervention/image Findconfig/app.php, and add Intervention\\Image\\ImageServiceProvider::class in array $providers, and add &apos;Image&apos; =&gt; Intervention\\Image\\Facades\\Image::class in array aliases Build the link between external folder and internal folder where we are going to save images in. Following the official website and build the link Type the follows In terminalphp artisan storage:link After the command, the project/storage/app/public and project/public/storage will be linked and so shared with each other When you save files, please save it to project/storage/app/public/(anySubdirectoryYouWant) If you want to produce externally accessible URL, use project/public/storage/(anySubdirectoryYouWant)/fileName, because from external, the default accessible folder is public, so please use asset(&#39;storage/(anySubdirectoryYouWant/fileName)&#39;) Validate if the image is brought// Because we don't need a lot of stuff, so we could only take what's in $request array.$parameters = request()-&gt;all();if (request()-&gt;hasFile('image'))&#123; // The file exists, so we save it to project/storage/app/public, and get the URL. In case, we will get 'public/fileName' $imageURL = request()-&gt;file('image')-&gt;store('public'); // However, we only want to insert pure file name into the database, so we remove the 'public' and only leave 'fileName' $parameters['image'] = substr($imageURL, 7);&#125; Re-organise the size of the image We are going to do resizing, so we will need the package intervention. Below namespace, adduse Intervention\\Image\\ImageManagerStatic as Image; // Get the instance of the item I just inserted$item = Item::update($parameters);// Set the driverImage::configure(array('driver' =&gt; 'gd'));// If we simply dd(storage_path), we will get 'project/store/', but it's not what we want.// So we append 'app/public/', that's the internal file address// Note that when resizing images, the target is in internal directory// Also, after resizing, we save it with the same name in the same place.Image::make(storage_path('app/public/' . $item-&gt;image))-&gt;resize(300, 300)-&gt;save(storage_path('app/public/' . $item-&gt;image)); Delete the image upon the user’s requestif ($request-&gt;imageDelete == true)&#123; Storage::delete($item-&gt;images); $item-&gt;update(['images' =&gt; null]);&#125; Produce publicly accessible URL// When returning publicly accessible URL, it will have to be external address.return asset(&apos;storage/&apos; . $parameters[&apos;image&apos;]);","link":"/UploadAndResizeImagesWithLaravel/"},{"title":"Build a multi-lingual blog with Hexo","text":"IntroductionI spent a lot of time recently trying to build a bilingual blog.Except for programming, I am also enamoured with languages, like English, Japanese. So I’ve been thinking of building a blog with multi-lingual support, making my article reached by more people, and also practicing languages.After consulting Google master for endless time, here are some feasible way to achieve that:Use i18n along with revising source code2. Build two sites, one for Chinese, and another for English3. Use one of Hexo’s themes called ‘Minos’After some research, I’ve made my decision for the third one, because:Originally I use Next theme. However, unfortunately it doesn’t support multi-language, and I do have difficulty revising the source code.It means I would have to maintain two sites. Once one is revised, the other will need to be done so. and more languages version you have, the more things you will have to do.So In this article, I will share how to achieve it with Minos Install Hexo install NodeJS, and it will install npm automatically. brew install node Install Hexo with npm npm install hexo-cli -g Build whatever required for building a site within a designated directory. hexo init folderName Install minos theme Go into the folder cd folderName Clone it from official GitHub https://github.com/ppoffice/hexo-theme-minos.git themes/minos Start configuringConfigure Hexo config After installing, we can only find the file _config.yml.example, so we need to copy or rename it to _config.yml， and then search theme, and then set it to minos There are two kinds of config files, one for Hexo, and the other for the theme. Let’s go for Hexo configuration first. Here are some options that must be set, and you could leave others as default language: [&apos;en&apos;, &apos;zh-tw&apos;] //It means set English as default, and Taiwan as the second. url: https://tn710617.github.io/ (Your site address) permalink: :title/ deploy: type: git repo: https://github.com/tn710617/tn710617.github.io.git (It&apos;s the clone address of your GitHub project) branch: master Some settings in config file has nothing to do with language stuff we are taking about, so I will just leave them for your own exploration Language config for website After config file for Hexo, we need to build a language config for our own countries. If there already is, then you will not have to. In this case, I need a Taiwan language config, and there is not, so I will need to make one on my own. The function of this config file is that Hexo will render your page according to the language in this file when certain language is chosen. Create a file called zh-tw.yml in a folder called languages in minos theme The content is just like that of other countries as follows:name: &apos;繁體中文&apos;common: archives: &apos;歸檔&apos; category: &apos;分類&apos; tag: &apos;標籤&apos; categories: &apos;分類&apos; tags: &apos;標籤&apos;nav: next: &apos;下一頁&apos; prev: &apos;上一頁&apos; search: &apos;搜尋&apos; toc: &apos;目錄&apos;article: read_more: &apos;點擊閱讀&apos; read: &apos;讀完&apos; about: &apos;大概&apos; words: &apos;字&apos; comments: &apos;留言&apos; contents: &apos;目錄&apos;search: hint: &apos;站內搜尋&apos;insight: hint: &apos;站內搜尋&apos; posts: &apos;文章&apos; pages: &apos;頁面&apos; categories: &apos;分類&apos; tags: &apos;標籤&apos; untitled: &apos;(無標題)&apos; Config language mapping file After setting up the language config, we copy the theme config file and make another two as follows. The function of those files is that when certain languages is chosen, Hexo will open the page according to the address you designate in those config files. For example, Chinese will open Chinese page, and English will do so too. _config.zh-tw.yml _config.en.yml Let’s config ‘en’ config file first. // The configuration here depends on your needmenu: Archives: /archives Categories: /categories Tags: /tags Schedule: /schedule About: /about Friends: /friends And then, we config ‘zh-tw’ file as follows: menu: 歸檔: /zh-tw/archives 分類: /zh-tw/categories 標籤: /zh-tw/tags 行程: /zh-tw/schedule 關於: /zh-tw/about 好友: /zh-tw/friends You may notice that the same configuration overlaps on three config files. Here is the rule. When we go for certain language page, the setting of its config file will be adopted, and if the setting option is not found, the one in theme config file will automatically be adopted. So you could config your setting in a very flexible way. Config view part Now we start config view files. The rule is, except for the source code, how many languages you have, how many duplicates with different languages you will have. It makes sense, right? Otherwise would you dare post an article translated via machine? Now let’s config files under source directory _postsThe photo above is easy to understand, right? Simply speaking, those under _posts folder are the ones for default language. In this case, it should store articles of English version. And then we build a zh-tw folder for storing articles with Chinese version. The others:The file structure is like photo above, it’s unbearably easy, isn’t it? Change the position of language switchPersonally, when I enter a website, if it shows in some language I don’t know, I will look for the language switch (if there is). Per the current version of the theme Ray is using, the default position of the langauge switch menu is at the bottom of the screen, so I would like it to be somewhere more noticeable. infooter.ejs, find the code below: &lt;%- partial('common/languages') %&gt; Cut it and paste it in the bottom of the file called navbar.ejs within &lt;body&gt; tag If now you have the page refresh, you should see that the language switch has already been moved to the top of the screen, however, it turns out that the menu open upwards, and therefore we can’t choosee the language options. We will need to make some changes. In languages.ejs file under layout folder, find the following code and add style=&quot;top:100%&quot;. &lt;div class=\"dropdown-menu has-text-left\" role=\"menu\" style=\"top:100%\"&gt; ConclusionBy following the configuration above, I believe that you will make your multilingual-support-blog wish come true. You could go to my blog to check how it looks. If I’ve make some mistakes, feel free to point it out and let me know!You are free to share this article somewhere else, however, kindly append the origin, thanks!","link":"/buildABilingualBlog/"},{"title":"Create a persistent disk in GCP","text":"Refer to official link","link":"/createAPersistentDisk/"},{"title":"Create a virtual machine","text":"Refer to official link","link":"/createAVirtualMachineInGCP/"},{"title":"My learning journey in Docker","text":"前言This is the notes I take during my learning, and it’s still unorganised, so there will no be English version of this article 環境GCP - ubuntu 18.04 安裝 移除舊版本sudo apt-get remove docker docker-engine docker.io containerd runc 從 Docker 倉庫安裝 更新 apt sudo apt-get update 安裝以下套件，使 apt 可以經由 HTTPS 使用倉庫 sudo apt-get install -y \\ apt-transport-https \\ ca-certificates \\ curl \\ gnupg-agent \\ software-properties-common 增加 Docker 的正式 GPG 密鑰 curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add - 核對一下我們現在擁有含有 9DC8 5822 9FC7 DD38 854A E2D8 8D81 803C 0EBF CD88 指印的密鑰，我們可以搜尋最後八碼 sudo apt-key fingerprint 0EBFCD88 理應得到輸出如下： pub rsa4096 2017-02-22 [SCEA] 9DC8 5822 9FC7 DD38 854A E2D8 8D81 803C 0EBF CD88uid [ unknown] Docker Release (CE deb) &lt;docker@docker.com&gt;sub rsa4096 2017-02-22 [S] 將 Docker 倉庫 設定為 stable 版，若要設定為 nightly 或 test 版，可在以下的指令中自由取代 stable sudo add-apt-repository \\ \"deb [arch=amd64] https://download.docker.com/linux/ubuntu \\ $(lsb_release -cs) \\ stable\" 安裝最新的 Docker CE 版本 sudo apt-get install docker-ce docker-ce-cli containerd.io -y 你也可以安裝特定版本的 Docker: 列出版本 apt-cache madison docker-ce 應該會得到輸出如下： docker-ce | 5:18.09.1~3-0~ubuntu-xenial | https://download.docker.com/linux/ubuntu xenial/stable amd64 Packages docker-ce | 5:18.09.0~3-0~ubuntu-xenial | https://download.docker.com/linux/ubuntu xenial/stable amd64 Packages docker-ce | 18.06.1~ce~3-0~ubuntu | https://download.docker.com/linux/ubuntu xenial/stable amd64 Packages docker-ce | 18.06.0~ce~3-0~ubuntu | https://download.docker.com/linux/ubuntu xenial/stable amd64 Packages ... 使用上面輸出的第二欄位版本號，結合下面的指令來安裝特定版本 sudo apt-get install docker-ce=&lt;VERSION_STRING&gt; docker-ce-cli=&lt;VERSION_STRING&gt; containerd.io 運行鏡像 hello-world 來驗證 Docker CE 是否已經正確安裝 sudo docker run hello-world 如果要使用非 root 身份運行 Docker 的話，可以把你的使用者加到 Docker 群組 sudo usermod -aG docker your-user 解除安裝 解除安裝 Docker CE sudo apt-get purge docker-ce 刪除所有的 image, containers, volumes, 可以使用以下指令。慎用！此指令適合解除安裝後使用。 sudo rm -rf /var/lib/docker/ 基本指令Docker 列出 Docker 的指令 docker 查看 Docker 版本 docker version 查看 Docker 完美安裝資訊 docker info 以 root 身份登入 docker exec -it --user root &lt;container id&gt; /bin/bash 開啟防火牆 登入 gcloud auth 帳號 gcloud auth login 輸入網頁上得到的驗證碼 登入成功後，利用 gcloud 身份，開啟防火牆gcloud compute firewall-rules create ruleName --allow tcp:thePortYouWantToExpose 傳檔案進 containerdocker cp file containerName:/location Docker container 運行 containerdocker container run -it ubuntu:latest /bin/bash Docker container run 告訴 Docker daemon 開始一個新的 container -i 告訴 Docker daeman 讓 container 可以互動 -t 使目前的 terminal 視窗連接 container 的 shell ubuntu:latest 為開始這個 container 的 image /bin/bash 指定了我們想要運行 container 裡頭的哪一個程序 確認 Docker daemon 運行狀況service docker status systemctl is-active docker 離開 container 但不關掉它 CTRL + PQ 連接還在運行中的 container docker container exec -it yourContainerIDOrContainerName bash exec 在運行中的 container 中運行一個新的程序 列出運行中的 container docker container ls 列出所有的 container ， 包含已停止的 docker container ls -a 列出 hello-world container（由 image 產生），他們在顯示訊息之後就退出了，如果他們還在運行中的話，以下指令中的 --all 可以不用加 docker container ls --all ordocker ps -a 理應得到輸出如下： CONTAINER ID IMAGE COMMAND CREATED STATUS54f4984ed6a8 hello-world \"/hello\" 20 seconds ago Exited (0) 19 seconds ago 停止 container docker container stop containerIdOrContainerName 重新開始停止中的 container docker container start containerName 刪除 container docker rm containerID 刪除所有的 container docker rm $(docker container ls -aq) -f 根據指定的 image 運行 container 並指定 port, 賦予 container name。若想自定義 port 的話， Dockerfile 跟 server 的 port 需一致，且防火牆要開啟該 port docker container run -d \\--name web1 \\ -p 8080:8080 \\test:latest -d 表示讓 container 運行在背景 ， 與 -it 相反，無法共存--name 指定 container 的名稱-p 指定 port ， 左邊的是外部可以從瀏覽器存取的 port ，右邊的是 container 向外暴露的 port 將現有的 container 存成一個新的 imagedocker commit -m 'imageMessage' -a 'AuthorName' containerSHA imageName:imageTag Multi Stage Multi Stage Build 範本FROM node:latest AS storefrontWORKDIR /usr/src/atsea/app/react-appCOPY react-app .RUN npm installRUN npm run buildFROM maven:latest AS appserverWORKDIR /usr/src/atseaCOPY pom.xml .RUN mvn -B -f pom.xml -s /usr/share/maven/ref/settings-docker.xml dependency:resolveCOPY . .RUN mvn -B -s /usr/share/maven/ref/settings-docker.xml package -DskipTestsFROM java:8-jdk-alpineRUN adduser -Dh /home/gordon gordonWORKDIR /staticCOPY --from=storefront /usr/src/atsea/app/react-app/build/ .WORKDIR /appCOPY --from=appserver /usr/src/atsea/target/AtSea-0.0.1-SNAPSHOT.jar .ENTRYPOINT [\"java\", \"-jar\", \"/app/AtSea-0.0.1-SNAPSHOT.jar\"]CMD [\"--spring.profiles.active=postgres\"] -t 用來指定 image 的名字-f 可以用來指定名稱不是 Dockfile 的 DockerfileFrom 指定基礎 image 來源RUN 可以在 image 內執行 command 並建立新的 layer ，每一個 RUN 都會建立一層 layerCOPY 可以增加複製檔案到你的 image 內EXPOSE 暴露 APP 用的 portENTRYPOINT 設定當 image 被啟動為一個 container 時，預設執行的指令 Docker image 拉下 image docker image pull ubuntu:latest 根據 digests 拉下 image docker image pull imageNane@sha256:specificDigests 列出下載過的 image docker image ls 刪除 image docker rmi imageID 刪除所有的 image docker image rm $(docker image ls -q) -f 建立 image docker image build -t imageName:tagName . 列出下載過的 image 以及 digest docker image ls --digests 列出一個 image 的結構 docker image inspect inamgeID 將 image 存成映像檔 docker save -o outputFileName imageName:imageTag -o 代表 output 架設一個私有倉庫docker run -d -p 5000:5000 registry 我們也可以將上傳的映像檔備份一份到容器外docker run -d -p 5000:5000 -v outsideAddress:insideAddress registry Docker push 首先， tag 本地的 image 一個可以用來推上 DockerHub 的名字 docker tag localImageName:localTagName userAccount/toBeTaggedImageName:toBeTaggedImageTagName 推上 DockerHub docker push userAccount/taggedImageName:taggedImageTag Docker-Compose 安裝 Docker Compose, 儘管我們可以從官方的 ubuntu 倉庫 安裝 Docker Compose ，但因為最新的版本中有很多細小的版本差異，所以我們從 Docker GitHub 來安裝。 先到官方頁面確認版本，並且視需求更新下面指令的版本號。 sudo curl -L https://github.com/docker/compose/releases/download/1.21.2/docker-compose-`uname -s`-`uname -m` -o /usr/local/bin/docker-compose 設定權限 sudo chmod +x /usr/local/bin/docker-compose 確認 Docker-compose 版本 docker-compose --version 建立 yaml 檔案 vim docker-compose.yml 輸入內容如下： my-test:image: hello-world 建立一個 container docker-compose up 輸出理應如下： 建立一個 Swarm 開啟 docker swarm 模式docker swarm init \\--advertise-addr 0.0.0.1:8080 \\--listen-addr 0.0.0.1:8080 上面的 IP 跟 PORT 自己訂的--advertise-addr: 指定別的節點要連接這個 manager 時該使用的 IP 以及 port。這不是個必要的選項，但是你可以對哪個 IP 被使用有完全的控制權，並且你也可以訂一個不存在於節點上的 IP ，像是負載平衡的 IP --listen-addr: 讓你可以指定用來聽 swarm traffic 的 IP 以及 port ，通常他會跟 --advertise-addr 相同，但如果你想要限制 swarm 在特定的 IP，就特別有用。 還有一種情況，當 advertise-addr 是一個遠端的 IP ，像是平衡負載器，那這個也是必要的。 建議總是使用兩個附加選項。 從一個 node 開始 swarm mode ，並且設為 leader docker swarm init \\--advertise-addr yourInternalIP:yourPort \\--listen-addr yourInternalIP:yourPort 取得新增 manager 的 token docker swarm join-token manager 輸出大概如下： docker swarm join \\token SWMTKN-1-0uahebax...c87tu8dx2c \\10.0.0.1:2377 取得新增 worker 的 tokendocker swarm join-token token 輸出大概如下： docker swarm join \\token SWMTKN-1-0uahebax...c87tu8dx2c \\10.0.0.1:2377 重新產生 token docker swarm join-token --rotate managerOrWorker 開啟並且登入一台新的 instance ， 輸入上面的 token 還有自己的 IP 位址 docker swarm join \\token SWMTKN-1-0uahebax...c87tu8dx2c \\10.0.0.1:2377 \\advertise-addr yourInternalIP:yourPort \\listen-addr yourInternalIP:yourPort 不管你是想加入成為 manager 或是 workder ，只要輸入相對應的 token 就可以加入。 在 Leader 的 node 上可以查看 swarm 的詳細資料 docker swarm node ls 離開當前的 swarm docker swarm leave --force 開啟一個 SERVICE 要開立 service 首先必須確定， swarm 已建立。docker service create --name web-fe \\-p 8080:8080 \\--replicas 5 \\nigelpoulton/pluralsight-docker-ci docker service create: 建立一個 service--name: 指定 service 的名稱-p: 指定 container 內以及連接外部的 port--replicas: 在這個服務內，至少要有 5 個 containernigelpoulton/pluralsight-docker-ci: image 以及 tag 開立 service 之後， swarm 會一直的監看真實的狀態是否跟我的理想的狀態一致，如果一致的話那很好，如果不， swarm 會採取相對應的動作。舉例來說，如果五個 container 裡面有一個關閉了， swarm 會自動在啟動一個 查看 service 清單 docker service ls 查看 service 內的任務狀態 docker service ps serviceName 更詳盡的資訊 docker service inspect --pretty serviceName 擴展規模 docker service scale web-fe=10 刪除 service docker service rm web-fe 建立一個 overlay network docker network create -d overlay uber-net 連接到相同 overlay network 的 container ， 儘管他們的 docker host 連接的網路不同，彼此也可以互相溝通連接。 列出 network 資料 docker network ls 刪除一個 network docker network rm networkName 依據指定的 network 建立一個新的服務 docker service create --name uber-svc \\--network uber-net \\-p 80:80 --replicas 12 \\nigelpoulton/tu-demo:v1 --network: 指定 network 滾動升級 rolling update 滾動升級運行中的服務docker service update \\--image nigelpoulton/tu-demo:v2 \\--update-parallelism 2 \\--update-delay 20s uber-svc docker service update: 升級 service--image: 升級的 image 來源--update-parallelism 2: 一次升級兩個 container--update-delay 20s uber-svc: 每批次的等待時間為 20 秒 ， 需等當前批次的升級完成，時間才會開始計算。 最後指定要升級的 service 名稱 查看上次升級的參數docker service inspect --pretty serviceName 如上圖，前一次升級的參數都會被保留下來，除非你再次升級去覆蓋它 Composer 利用 container 安裝 Composer docker run --rm -v $(pwd):/app composer install --rm: 當 container 關閉後，自動刪除-v: 使用 volumes$(pwd):/app: $(pwd) 表示當前資料夾, /app 表示 container 裡頭一個叫做 app 的資料夾, 所以這個指令代表 : 前後的兩個資料夾會在 container 關閉之前，同步所有資料composer install: 安裝 composer 所以這個指令實際上做的事情，就是從 Docker Hub 拉下官方的 composer image ，然後開啟一個 container 並執行安裝， composer 會依照資料夾內 composer.json 或 composer.lock 來安裝相對應的 package 。 package 會被安裝在 app 這個資料夾內，但因為 volumes 的關係，所以兩個資料夾會同步， $(pwd) 內也會有安裝的 package 。 當安裝結束後， container 關閉，因為 --rm 的作用， container 會自動刪除。 TESTsudo apt-get remove docker docker-engine docker.io containerd runc &amp;&amp; sudo apt-get update &amp;&amp; sudo apt-get install -y \\apt-transport-https \\ca-certificates \\curl \\gnupg-agent \\software-properties-common &amp;&amp; curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add - &amp;&amp;sudo add-apt-repository \\\"deb [arch=amd64] https://download.docker.com/linux/ubuntu \\$(lsb_release -cs) \\stable\" &amp;&amp; sudo apt-get install docker-ce docker-ce-cli containerd.io -y &amp;&amp; sudo usermod -aG docker tn710617 利用 Docker-compose 部署 Laravel環境環境為 Ubuntu 18.04 安裝 docker-compose 安裝 Docker Compose, 儘管我們可以從官方的 ubuntu 倉庫 安裝 Docker Compose ，但因為最新的版本中有很多細小的版本差異，所以我們從 Docker GitHub 來安裝。 先到官方頁面確認版本，並且視需求更新下面指令的版本號。 sudo curl -L https://github.com/docker/compose/releases/download/1.21.2/docker-compose-`uname -s`-`uname -m` -o /usr/local/bin/docker-compose 設定權限sudo chmod +x /usr/local/bin/docker-compose 利用 Docker 來安裝環境MySQL 安裝 MySQL ， 並指定連接一個外部不同的 port 號 ， 像是 52000docker run --name serviceName -e MYSQL_ROOT_PASSWORD=yourPassword -d -p 52000:3306 mysql:5.7 docker run: 啟動一個 container--name: 指定這個服務的名稱-e MYSQL_ROOT_PASSWORD: 指定環境參數-d: 使這個服務跑在 container 當中-p: 指定外跟內的 port 號， container 內部的 3306 連接外部的 52000mysql:5.7: 指定 image 以及 tag 連接本地安裝的 MySQL 以及 Docker container 內的 MySQL 本地安裝的 sudo mysql -uroot Docker Container mysql -h 127.0.0.1 -uroot -p2434 -P52000 製作 Docker image 時區問題我的第一個目標，是利用 Docker commit 來做一個專屬的 image。簡單來說，就是起一個純淨的 container ，然後在這個 container 裡頭部署完之後，再使用 docker commit 將這個 container 變成一個 image ， 結果發現在安裝 php7.2-imagick 中會出現 Configuring tzdata ，會彈出一個視窗並要求選擇時區，如下圖 後來找到解決方法，是在安裝 php7.2-imagick 之前就把時區設定好，所以在一開始就加入export DEBIAN_FRONTEND=noninteractive &amp;&amp; apt-get install -y tzdata &amp;&amp; ln -fs /usr/share/zoneinfo/Asia/Taipei /etc/localtime &amp;&amp; dpkg-reconfigure --frontend noninteractive tzdata MySQL 問題接下來，又遇到一個問題，在我利用我製作好的 image 開一個 container 時， MySQL 無法成功啟動，會一直出現 Failed後來的解決方法非常的奇怪，我是到 /var/www/mysql/mysql 中，下 chown -R mysql:mysql . 的指令，然後它就好了…可問題是，我仔細地確認過，在我下這指令之前，這個資料夾下的所有 user 以及 group 早就已經是 mysql:mysql 了 Apache 以及 MySQL 無法設定自動重啟的問題所以我們必須要在 container 裏頭啟動這些服務，需要啟動的服務如下： Apache MySQL 所以從目前的進度看來， container 啟動之後，我們必須要執行三個指令，如下：chown -R mysql:mysql /var/www/mysql/mysqlservice apache restartservice mysql restart 沒想到實際執行之後，我們遇到了一個新的問題… Container 自動退出的問題Container 的特性，是只要 command 執行完畢後，就會自動退出。 container 一旦退出了，我們原本建構的環境當然也就不在了。我們怎麼可以容許這種事情發生呢？因此，我們需要給 container 一個會一直持續存在的指令，好比是 /bin/bash 該怎麼樣讓 container 在啟動的時候又執行多個指令呢？在 container 啟動時， 我們需要執行多個指令來啟動 container 裡面的服務，但是 entrypoint 只能帶一個指令進去，所以我們要寫一個 shell script ，然後當 container 開啟之後去執行這個 shell script ，當然，這個 shell script 裡頭的指令就是上述提到的指令，如下： chown -R mysql:mysql /var/www/mysql/mysqlservice apache2 restartservice mysql restart/bin/bash 假設這個 shell script 叫做 test.sh ，然後放在 /usr/sbin/ 之下，那我們的 docker 指令如下：docker run -dt --entrypoint \"/usr/sbin/test.sh\" -p 8880:80 --name containerName yourAccount/imageName:tagName Debug 查 logdocker logs -f containerID","link":"/docker/"},{"title":"A flexible git flow","text":"IntroductionToday I’m going to share a git flow with the following qualities: In development, you could make arbitrary commits. After testing, you could turn the arbitrary commits which are more friendly in development into commits compliant with production standard. The content of two branches are exactly the same, however, with totally different commit history. In Ray’s case, when developing, I am used to write down the process, and list every possible logic that I think is feasible, and then try it. Normally a big function may consist of many small logic, and this git flow enables me to make all of them many individual commits in a feature branch. And finally after they are tested and there is no problem there, they could be turned into the commit with production standard as a big function.In the process of implementing this git flow, I am more and more familiar with git rebase and some other advanced features of Git, and train myself to make each commit in a more strict style.Here are some advantages that Ray personally think this git flow could provide: Because every commit is small with single logic, it features unspeakable convenience no matter in experiment or debug stage. Record your logic in this small-commit way helps clean your mind, on the other hand, makes the logic of each function explicit. Though the process looks a bit complicated, actually it only takes a little to organise branches once you are familiar with Git, and you could be more familiar with the advanced operation of Git Because of the small commit, you could train yourself to make commits in a more strict way. An ideal commitThe git flow I am going to demonstrate today is just an example, and it doesn’t suit everyone. However, the point is the concept it takes to achieve this operation. When we do commit locally, we hope that the commit can be as small as possible, because the smaller, the more specific and more precise function orientated the commit is, the more helpful and useful it will be when it comes to debug or experiment and validation of your logic. For instance?Let’s make it more specific! Let’s say that you were debugging, and you found that the thing you printed out was different from your expectation, so you were trying different ways to get the result you wanted. If your commit is compliant with the above mentioned principles, in this case, you will not need anoying and troublesome revising after each failed try. All that takes is a simplegit reset --hard Even though the whoEven though the whole logic of a commit is wrong. If the function of this commit is specific enough, all you need is a simplegit reset @^ --hard What exactly we want?However, the git flow of production doesn’t allow us to do so. Each pushed commit in production git flow is required to run properly and towards designated function. That said, possibly, a designated function of production git flow would consist of many so called small commit we just mentioned. What we need in a list In development: We need the absolute flexibility, able to make a commit as functional specific as possible. In production: We need to make each commit compliant with the requirement of company, running errorlessly on designated function Which one could we have?They say, you can’t have a cake and eat it, is that true?Could we have both? List the physical needLet’s list and conclude more specifically what we need We need a develop branch for local development where we could make a commit whenever we feel comfortable We need a master branch for production. In this branch, each commit represents a designated function by the company. The content of above mentioned two branches should be exactly the same (Optional)We would like to keep the respective history of both branches What it actually look like?develop branch:As the photo below. What’s on the left side is the content, while on the right is commit. Take a look and then you could find that each file represents a single commit named small function. It’s just an example, denoting a concept of smallest commit that I’m trying to convey master branch:Now let’s take a look on master branch. You could see that through the photo below, we only have 4 commits, and each of them contains 4 files(except for .gitignore commit). It’s just an example, denoting that the actual commit compliant with production standard is always bigger than the ideal commit. Example Hand-on practiceThe very beginning.gitignore is always the very beginning of everything. Create .gitignore file with vim, and then key in those files we would like to ignore, and then type :wq and leave. vim .gitignore Complete the first commit git add .ignore; git commit -m 'Added .gitignore'; develop branchNow, we will make a develop branch based on master branch. As mentioned above, the commits are going to be the most function orientated and smallest in develop branch, while the ones in master branch are going to be compliant with production standard. Firstly, let’s build develop branch based on master branch which has completed .gitignore setting. git checkout -b develop feature branchAnd then, we could start developing Make a feature branch This feature branch represents the currently developing function The function mentioned here is not the function we define on our own, instead, is required by company compliant with production standard. So, a function with production standard is equal to a feature branchgit checkout -b feature; Commit freely On feature branch , we could make commits arbitrarily as long as you feel comfortable. Create file 1~4, and then each of them represents a smallest commit.touch &#123;1..4&#125;;git add 1;git commit 1 -m 'small function 1';git add 2;git commit 2 -m 'small function 2';git add 3;git commit 3 -m 'small function 3';git add 4;git commit 4 -m 'small function 4'; The function is completed! After testing, we are pretty sure that everything is okay, so we are going to turn our arbirarily made commit into production standard commit. as mentioned previouly, the coverage of a feature branch is a required function of production standard. So? We are going to turn an entire branch into a single commit for production standard. Since we are going to keep both branches with respective histories, we can’t directly do this on feature branch. Because develop branch is going to need it later. Actually in this git flow, it’s not neccesary to keep develop branch. However, in this article, I will demonstrate it in the condition that the develop branch will be kept. If you don’t want to keep it, it will be mush simpler. A branch for being merged Let’s build a disposable branch called toBeMerged production standard master branch. git checkout -b toBeMerged Now, let’s make toBeMerged branch ready to be merged by master branch. git rebase -i master Compress, rename commit I mentioned I was going to compress several small commits into a commit with production standard, right? So now I’m going to squash all of the small commits. We could use fixup option. Moreover, the commit name with production standard is defintely different from the commit we make during development, so we are going to rename this compressed commit as follows: reword 96c6c18 small function 1fixup 1dd84d2 small function 2fixup 1a71401 small function 3fixup f9c90c6 small function 4 I’m going to name this compressed commit as big function 1 Then, type :wq and leave Now, we use git log to check it, it should look like as follows:git log merge Let’s checkout master and merge this branch! git checkout master;git merge toBeMerged; And then, let’s checkout develop branch and merge feature branch git checkout develop;git merge feature; Finally, let’s delete merged feature branch and toBeMerged branch. git branch -D feature toBeMerged Let’s review it. Remember what we want? On develop branch, the commits are smallest. On master branch, the commits are compliant with production standard. The content on both two branches should be the same. (optional)Keep both branches Check if the master branch looks like the one we want. git checkout master;git log Check the contentls Check commits on develop branch git checkout develop;git tag 'bigFunction1'git log Check the content ls The second phrase The same as before, feature branch first, and then toBeMerged branch git checkout develop;git checkout -b feature;touch &#123;5..8&#125;;git add 5;git commit -m 'small function 5';git add 6;git commit -m 'small function 6';git add 7;git commit -m 'small function 7';git add 8;git commit -m 'small function 8';git checkout -b toBeMerged; Pay attention! in this case, we can’t turn toBeMerged branch into a right one for master branch with traditional rebase because they don’t have a mutual history. Let’s think about it for a moment, what the toBeMerged branch should look like to match what we need for being merged by master branch? They need mutual history (Identical sha1 checksum) Those previously merged uncompressed commits that already exist in develop branch shouldn’t appear in toBeMerged branch. Simply speaking, small function 1~4 were already compressed as big function 1, so small function 1~4 should appear again Those newly added commit should be compressed into a single commit After all above listed are done, you are ready to go The second rebasing and compressing. So what are the steps? We will use git rebase, git rebase --onto. We are going to rebase toBeMerged branch onto master, and omit whatever on develop, and then the one should be rebased is toBeMerged. Follow this order, we get the command as follows. You could refer to official document for more detail about git rebase --onto git rebase -i --onto master develop toBeMerged The same as previous action, we compress the samll commits into the one compliant with production standard. reword 3668e72 small function 5fixup fd05fa1 small function 6fixup 3a87c08 small function 7fixup c38957e small function 8 The name of compressed commit is big function 2 Repeat mentioned steps, merge them first and delete them. Let’s check the commit on develop branch, and the content git checkout develop;git tag bigFunction2;git log --oneline The commit on master ls The content on master Let’s check the commit on master, and its content git checkout master;git log commit on develop branch ls content on develop branch ConclusionThe git flow in this article enables us to make commit as small as possible in development, even in the way we personally like, and no need to sacrifice for production standard.The develop branch in this article is not necessary to be kept, because if there is some error in the commit with production standard, you will still need to fix it on the one with production standard. However, if you keep it, I reckon that there might be some further usage there. Well, I will leave it for your own explorations.If you have any comments, feel free to drop me a message. I believe that communication and idea sharing is the shortcut of improving ourselves.","link":"/flexibleGitFlow/"},{"title":"Get information via Facebook graph API","text":"IntroductionIn this article, I’m going to share how to get user information from Facebook by submitting a token with PHP SDK, which is got by providing user a login page with JaveScript code. Go to FB develop page, and sign up, and then go to console and add a new application In the user information, copy App key and App secret Create a Laravel projectlaravel new Facebook Initiate Gitgit init Install Facebook PHP SDK Under the projectcomposer require facebook/graph-sdk Create a controller which we could interact with FB later withphp artisan make:controller FBController Create a function called getFacebookResources Copy the SDK example code in its page, and paste it in the functionrequire_once __DIR__ . &apos;/vendor/autoload.php&apos;; // change path as needed$fb = new \\Facebook\\Facebook([ &apos;app_id&apos; =&gt; &apos;&#123;app-id&#125;&apos;, &apos;app_secret&apos; =&gt; &apos;&#123;app-secret&#125;&apos;, &apos;default_graph_version&apos; =&gt; &apos;v2.10&apos;, //&apos;default_access_token&apos; =&gt; &apos;&#123;access-token&#125;&apos;, // optional]);// Use one of the helper classes to get a Facebook\\Authentication\\AccessToken entity.// $helper = $fb-&gt;getRedirectLoginHelper();// $helper = $fb-&gt;getJavaScriptHelper();// $helper = $fb-&gt;getCanvasHelper();// $helper = $fb-&gt;getPageTabHelper();try &#123; // Get the \\Facebook\\GraphNodes\\GraphUser object for the current user. // If you provided a &apos;default_access_token&apos;, the &apos;&#123;access-token&#125;&apos; is optional. $response = $fb-&gt;get(&apos;/me&apos;, &apos;&#123;access-token&#125;&apos;);&#125; catch(\\Facebook\\Exceptions\\FacebookResponseException $e) &#123; // When Graph returns an error echo &apos;Graph returned an error: &apos; . $e-&gt;getMessage(); exit;&#125; catch(\\Facebook\\Exceptions\\FacebookSDKException $e) &#123; // When validation fails or other local issues echo &apos;Facebook SDK returned an error: &apos; . $e-&gt;getMessage(); exit;&#125;$me = $response-&gt;getGraphUser();echo &apos;Logged in as &apos; . $me-&gt;getName(); Enter App key and App secret In the example above, we need to fill in some area with some information got from FB developer account as follows:$fb = new \\Facebook\\Facebook([ &apos;app_id&apos; =&gt; &apos;App Key&apos;, &apos;app_secret&apos; =&gt; &apos;App Secret&apos;, &apos;default_graph_version&apos; =&gt; &apos;Current version&apos;, //&apos;default_access_token&apos; =&gt; &apos;&#123;access-token&#125;&apos;, // optional]); Create a user login button User need to login in and get the token, and then we could use the token for further processing. In routes/web.php file, create a route for the login page Route::get(&apos;/FBToken&apos;, function()&#123;return view(&apos;FBToken&apos;);&#125;); Under resources/views folder, create a php file called FBtoken.blade, and paste the example code of JS as follows: &lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;title&gt;Facebook Login JavaScript Example&lt;/title&gt;&lt;meta charset=&quot;UTF-8&quot;&gt;&lt;/head&gt;&lt;body&gt;&lt;script&gt; // This is called with the results from from FB.getLoginStatus(). function statusChangeCallback(response) &#123; console.log(&apos;statusChangeCallback&apos;); console.log(response); // The response object is returned with a status field that lets the // app know the current login status of the person. // Full docs on the response object can be found in the documentation // for FB.getLoginStatus(). if (response.status === &apos;connected&apos;) &#123; // Logged into your app and Facebook. testAPI(); &#125; else &#123; // The person is not logged into your app or we are unable to tell. document.getElementById(&apos;status&apos;).innerHTML = &apos;Please log &apos; + &apos;into this app.&apos;; &#125; &#125; // This function is called when someone finishes with the Login // Button. See the onlogin handler attached to it in the sample // code below. function checkLoginState() &#123; FB.getLoginStatus(function(response) &#123; statusChangeCallback(response); &#125;); &#125; window.fbAsyncInit = function() &#123; FB.init(&#123; appId : &apos;&#123;your-app-id&#125;&apos;, cookie : true, // enable cookies to allow the server to access // the session xfbml : true, // parse social plugins on this page version : &apos;&#123;api-version&#125;&apos; // The Graph API version to use for the call &#125;); // Now that we&apos;ve initialized the JavaScript SDK, we call // FB.getLoginStatus(). This function gets the state of the // person visiting this page and can return one of three states to // the callback you provide. They can be: // // 1. Logged into your app (&apos;connected&apos;) // 2. Logged into Facebook, but not your app (&apos;not_authorized&apos;) // 3. Not logged into Facebook and can&apos;t tell if they are logged into // your app or not. // // These three cases are handled in the callback function. FB.getLoginStatus(function(response) &#123; statusChangeCallback(response); &#125;); &#125;; // Load the SDK asynchronously (function(d, s, id) &#123; var js, fjs = d.getElementsByTagName(s)[0]; if (d.getElementById(id)) return; js = d.createElement(s); js.id = id; js.src = &quot;https://connect.facebook.net/en_US/sdk.js&quot;; fjs.parentNode.insertBefore(js, fjs); &#125;(document, &apos;script&apos;, &apos;facebook-jssdk&apos;)); // Here we run a very simple test of the Graph API after login is // successful. See statusChangeCallback() for when this call is made. function testAPI() &#123; console.log(&apos;Welcome! Fetching your information.... &apos;); FB.api(&apos;/me&apos;, function(response) &#123; console.log(&apos;Successful login for: &apos; + response.name); document.getElementById(&apos;status&apos;).innerHTML = &apos;Thanks for logging in, &apos; + response.name + &apos;!&apos;; &#125;); &#125;&lt;/script&gt;&lt;!-- Below we include the Login Button social plugin. This button uses the JavaScript SDK to present a graphical Login button that triggers the FB.login() function when clicked.--&gt;&lt;fb:login-button scope=&quot;public_profile,email&quot; onlogin=&quot;checkLoginState();&quot;&gt;&lt;/fb:login-button&gt;&lt;div id=&quot;status&quot;&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt; Same here, we need to fill in App key and current version there as follows: FB.init(&#123; appId : &apos;App key&apos;, cookie : true, // enable cookies to allow the server to access // the session xfbml : true, // parse social plugins on this page version : &apos;version&apos; // The Graph API version to use for the call&#125;); Familiar yourself with FB Graph API tool We could we the API we need with FB Graph API tool Customize endpoint Because we might specify our endpoint simply by copying and pasting as follows: So we could move endpoint to .env as follows: $endpoint = env(&apos;FBEndpoint&apos;);try&#123; // Get the \\Facebook\\GraphNodes\\GraphUser object for the current user. // If you provided a &apos;default_access_token&apos;, the &apos;&#123;access-token&#125;&apos; is optional. $response = $fb-&gt;get($endpoint, $token); And then in the .env FBEndpoint=me?fields=id,name,email So, in the future, we could simply copy the endpoint from FB, and paste it on .env Revise the error return In the default setting of PHP SDK, it would return error message according to the situation, which might be good. However, I only need to know true or false, and that’s it. A ineffective token might be caused by several factors as follows: It doesn’t exist Wrong token It expired It doesn’t matter which one it is, the only thing we have to do is inform front end of this matter, and ask them to provide make a request to FB again and provide the valid token to us. Therefore, we need to determine what we are going to by a simple true or false feedback from FB PHP SDK, so we revise it as follows:catch (\\Facebook\\Exceptions\\FacebookResponseException $e) { return false; // echo &apos;Graph returned an error: &apos; . $e-&gt;getMessage(); // exit; } Get a public URL Use ngrok to get a public URL for the HTML page that we will use to get token from users. Login the application =&gt; Find login product =&gt; shortcut =&gt; website =&gt; paste the public URL Login and get tokenFeed the token to getFacebookResources function in FBController.Insert the data into our databaseWe are done here","link":"/getINFOViaFBToken/"},{"title":"Git-  Where to start?","text":"Hello everyone! It’s Ray. As mentioned in my the article I posted last time, Git is kind of an integral tool to coders.Today I’m going to share the basics of Git. At the first, let’s create an example folder, it could be my-git-repository. Le’t go to command line cd the idea patch you like for this folder let’s typemkdir my-git-repository Now typecd code/my-git-repository to get into the folder in command line. Code is the name of my own folder, which is different from yours. Please type your own. Now we are in the folder as follows:￼ Let’s make a file heretouch example1.html And then we add the content below in the file:&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;First example&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;p&gt;This is the first example&lt;/p&gt;&lt;/body&gt;&lt;/html&gt; Now typegit init ￼ And then let’s type and take a look git status ￼ As image shown above, now we could start to use git’s feature.Currently the example1 is still untracked. Remember that before we make any commit, sounds like that we have to follow those celebrities before receiving what’s new of them. Let’s add the file and start to track itgit add example1.html As image below:￼ Okay. After tracking, now we are going to make our first commit.Entergit commit as image below:￼ Supposedly, the new window would pop up as image below:￼ Now we enter the message for this commit for further better recognising. Finally enter:wq it means save and exit this window Now let’s typegit status , and it should look like image above. Entergit log , and you could see a series of number which represents the identify number of this commit.￼ Please note that the number varies out of the content of commit, so each commit is unique. If your commit number is different from mine, rest-assured that that’s pretty normal. Now we’ve completed our very first commit, and we will be able to go back to this commit whenever we need in the future. Okay. Let’s call it a day! I will bring more to you in the following days","link":"/gitInit/"},{"title":"What if I push a wrong commit?","text":"Sometimes after pushing a new commit, we realise that there seems to be something wrong.Don’t panic. In this case we could use git revert to cancel the commit.Now let me illustrate it as follows: Build a simulating remote folder locally Due to the inaccessibility of internet of some people, we are going to create a simulating remote folder locally Go to the folder where normally you put your projects mkdir git_demonstration git_demonstration_central cd git_demonstration_central git init --bare git_demonstration_central will be the remote repository in this article. Build testing environment locally Go to testing folder cd ../git_demonstration Intialize git git init Create a file called test touch test Add number 1 into the file test cat 1 &gt; test Add test file into git tracking list git add test Make a commit towards current file and content git commit -m&#39;1&#39; Add number 2 into file test, and make a commit named 2 cat 2 &gt;&gt; test;git commit -am&#39;2&#39; Add number 3 into file test, and make a commit named 3 cat 3 &gt;&gt; test;git commit -am&#39;3&#39; Build remote branch Add the simulating remote repository as the remote of our testing folder. git remote add origin /user/yourUserName/yourDirectory/git_demonstration_central put current master branch to remote, and set the newly created remote branch as the local one’s upstream branch git push -u origin master Check the history of remote repository cd ../git_demonstration_central;git log Revert existing commit For example, we would like to remove the content recorded in commit 3 git revert f06550f7 Update the change to remote git push Check if the content of file test has changed cat test Got value 1 2, and the number 3 existed in commit 3 was already removed Check the history of remote repository cd ../git_demonstration_central;git log ConclusionSome git novices might have the same confusion as mine when I learnt this part. Why don’t we just eliminate the commit? instead, we would we add one more?Here I would like to make a further explanation.Normally, after pushing our commit to mutual repository, I strongly urge you not to revise the existing history. Because once you revise the existing history and push it to mutual repository, it could cause a huge impact to the history on everyone’s repository. After revising, every collaborator’s history will be different from yours, which would cause a lot of confusion and conflict.What we want to take out is a code existing in the file, so realistically, we want to cancel the code, not history. In multi-collaboration, you could add new history, and not recommended revising old one. You could add a new commit specifying what you’ve done, but not to revise the history on your side, because only you know what you’ve done, and other people know nothing on your side.In other words, before you push your part to mutual repository, you could do whatever you want (only to what you haven’t pushed. Don’t revise anything you’ve pushed), however, after pushing, don’t revise the history. If you want to do some revising on the file, just make a new commit explaining what you’ve done and push it, and then you could avoid possible confusion and conflict.It’s my sharing today. See you guys.","link":"/gitRevert/"},{"title":"Let’s specify a reversion number","text":"Hello everyone, It’s Ray! Today I am going to share with you how to use git tag to specify a reversion number After we complete a series of small functions, it could mean that we are going to release a new reversion. For example, think about the online games that you’ve played. Every time when it released a new reversion, it came with some new function. This reversion always denotes that all those functions have been completed, also works functionally after internal testing. This reversion number is quite convenient and important to developers. For example, a series of small functions build a big function, and the completion of this big function means that a new reversion is going to be released. Every time when we complete a small function, we commit it, and when we finish a series of small functions and make them a big one, we use git tag to specify, denoting a reversion’s release. It’s very essential and important to developers when wanting to do some testing some time after the release. Let’s begin with git log --oneline輸入 git log --oneline Above image shows what log looks like before adding a tag. Typegit tag -a v1.0 -m “The stable version of example” As image above shown, you could see the reversion number we just added. enter git tag You could see the reversions that we’ve made so far. Now let’s create a new file, example2.html, and add some code on it. &lt;!DOCTYPE html&gt;&lt;html lang=\"en\"&gt;&lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;title&gt;Title&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;p&gt;This is the experimental file created after reversion v1.0&lt;/p&gt;&lt;/body&gt;&lt;/html&gt; Then typeGit add example2.htmlgit commit -am “An example2 file after v1.0”Git log --oneline As image above shown, we are now at sixth commit, and our reversion only covers to fifth commit. When we want to go back to v1.0 reversion to check, we don’t need to checkout the name of fifth commit, instead, we type the reversion name as follows: Git checkout v1.0Git log --oneline As image above, we’ve gone back to v1.0. Hope that today’s article will be helpful and useful to you. See you tomorrow.","link":"/gitTag/"},{"title":"Deploy project on GCP virtual machine via Gitlab CI/CD","text":"IntroductionThis article is about: Open a GCP instance with gcloud Import ssh key into an instance with gcloud Running your project in the background with Daemon Deploy your project on GCP virtual machine via gitlab pusher EnvironmentCreate a GCP virtual machineHere is how I would do, you could have your own way. Ray use Mac, so I install Google Cloud SDK locally. As to the installation, you could refer to official document Create a VM Create a VM called example-instance-1 The boot drive storage is 10GB Pull image we need from ubuntu-os-cloud We use ubuntu-1804-lts as the image-family, so the latest version of this family will be used automatically. The type of boot-drive is pd-stand, you could check the types with command gcloud compute disk-types list The machine type is f1-micro, you could check the types wit command gcloud compute machine-types list We identify each instance with tags, and we will it when we want to create a firewall-rules. We specify the zone of the instance. Some resources are limited in certain zone and region As follows:gcloud compute instances create example-instance-1 \\--image-project=ubuntu-os-cloud \\--image-family=ubuntu-1804-lts \\--boot-disk-size=10GB \\--boot-disk-type=pd-standard \\--machine-type=f1-micro \\--tags=example-instance-1,http-server,https-server \\--zone=asia-east1-a After creating, let’s produce ssh-key firstssh-keygen -t rsa -b 4096 -C \"root@example\" Assume that the key is named examplecat example.pub &gt; instanceSSHConfig &amp;&amp; vim instanceSSHList Put root before the key in instanceSSHList file, whose format is as follows:[USERNAME]:ssh-rsa [KEY] [USERNAME] Get the name of the instancegcloud compute instances list Add the public key into the instancegcloud compute instances add-metadata instanceName --metadata-from-file ssh-keys=instanceSSHList InstallationHere we mainly install nvm, node with version v12.1.0, and npm. You could get more detail via the official documentapt-get update -y &amp;&amp; apt-get install curl -y &amp;&amp; curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.34.0/install.sh | bash &amp;&amp; export NVM_DIR=\"$HOME/.nvm\" &amp;&amp; [ -s \"$NVM_DIR/nvm.sh\" ] &amp;&amp; \\. \"$NVM_DIR/nvm.sh\" &amp;&amp; [ -s \"$NVM_DIR/bash_completion\" ] &amp;&amp; \\. \"$NVM_DIR/bash_completion\" &amp;&amp; nvm install v12.1.0 &amp;&amp; apt-get install npm -y DaemonNow, let’s config Daemon. We will run our service with Daemon so it will be run automatically when it’s disconnected.sudo vim /etc/init.d/serviceName #!/bin/sh### BEGIN INIT INFO# Provides: yourServiceName (optional)# Required-Start: $remote_fs $syslog# Required-Stop: $remote_fs $syslog# Default-Start: 2 3 4 5# Default-Stop: 0 1 6# Short-Description: Start daemon at boot time# Description: Enable service provided by daemon.### END INIT INFOdir=\"yourProjectLocation\"cmd=\"theCommandItRequiresToStartYourService\"user=\"root\"name=`basename $0`pid_file=\"/var/run/$name.pid\"stdout_log=\"/var/log/$name.log\"stderr_log=\"/var/log/$name.log\"get_pid() &#123; cat \"$pid_file\"&#125;is_running() &#123; [ -f \"$pid_file\" ] &amp;&amp; ps -p `get_pid` &gt; /dev/null 2&gt;&amp;1&#125;case \"$1\" in start) if is_running; then echo \"Already started\" else echo \"Starting $name\" cd \"$dir\" export NODE_ENV=test if [ -z \"$user\" ]; then sudo $cmd &gt;&gt; \"$stdout_log\" 2&gt;&gt; \"$stderr_log\" &amp; else sudo -u \"$user\" $cmd &gt;&gt; \"$stdout_log\" 2&gt;&gt; \"$stderr_log\" &amp; fi echo $! &gt; \"$pid_file\" if ! is_running; then echo \"Unable to start, see $stdout_log and $stderr_log\" exit 1 fi fi ;; stop) if is_running; then echo -n \"Stopping $name..\" kill `get_pid` for i in 1 2 3 4 5 6 7 8 9 10 # for i in `seq 10` do if ! is_running; then break fi echo -n \".\" sleep 1 done echo if is_running; then echo \"Not stopped; may still be shutting down or shutdown may have failed\" exit 1 else echo \"Stopped\" if [ -f \"$pid_file\" ]; then rm \"$pid_file\" fi fi else echo \"Not running\" fi ;; restart) $0 stop if is_running; then echo \"Unable to stop, will not attempt to start\" exit 1 fi $0 start ;; status) if is_running; then echo \"Running\" else echo \"Stopped\" exit 1 fi ;; *) echo \"Usage: $0 &#123;start|stop|restart|status&#125;\" exit 1 ;;esacexit 0 If it shows that the service is not found, we need to reload the daemon sudo systemctl daemon-reload Note that the authority has to been revised, making Daemon executable sudo chmod 755 serviceName In this example, the name of Daemon will be equal to the name of project CI/CDGitlab variables setting We are going to do CI/CD with Gitlab pusher, so we have to set up ssh key for further usage Create the key with ssh-keygen -t rsa -b 4096 -C &quot;root@deploy&quot;, and set it as $SSH_PRIVATE_KEY Get the Server host key with command ssh-keyscan as the example below Just use the shortest, and set it as $SSH_SERVER_HOSTKEYS. If you would like to deploy your project into two machines, you have to set two sets of host key.$ ssh-keyscan to-be-conneted-instance-ip # 127.0.0.1 SSH-2.0-OpenSSH_6.6.1 127.0.0.1 ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCWBZ3XrIajPmnd6R+g/wcUuOPOiRBMOYjAl4Dv8SfcZtgHqKTK6Zb1EeG3u/uzRYxqXMctG/2A4iXRDG9mvg9H9bimCWbA3xtR79NImPYg4m7BNuH9C+OXRYYJwoOGpjVMs0rGLXkq3/WVkXvQreBuhVD8NI2pEPnQsT1J5abdVbCHlwFYG6wVCJQqFY6jdntJJlxQv5EJu6w4/+Fd4LvdjysH+ngqArac6HMJUxqSxLQjzMdCRWEQKp3ySwmnRp9rHYVaJnnsXeYPfnMN1iMjdIQJPzc89Mepg4ip1q2bCMbMcx2XFO3I7YjYRdcOameFNafMGY0q5RHzhvgnNnal # 127.0.0.1 SSH- 2.0-OpenSSH_6.6.1 127.0.0.1 ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBCPWoEQ7iCCYDrpyb5KeMmCaQ8aOnSfehqmrplZRkbqqnkS9++PdSX/eSLJ0tkFd5902/C+HTCqbDgso4mCKpMo= # 127.0.0.2 SSH-2.0-OpenSSH_6.6.1127.0.0.2 ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCWBZ3XrIajPmnd6R+g/wcUuOPOiRBMOYjAl4Dv8SfcZtgHqKTK6Zb1EeG3u/uzRYxqXMctG/2A4iXRDG9mvg9H9bimCWbA3xtR79NImPYg4m7BNuH9C+OXRYYJwoOGpjVMs0rGLXkq3/WVkXvQreBuhVD8NI2pEPnQsT1J5abdVbCHlwFYG6wVCJQqFY6jdntJJlxQv5EJu6w4/+Fd4LvdjysH+ngqArac6HMJUxqSxLQjzMdCRWEQKp3ySwmnRp9rHYVaJnnsXeYPfnMN1iMjdIQJPzc89Mepg4ip1q2bCMbMcx2XFO3I7YjYRdcOameFNafMGY0q5RHzhvgnNnal # 127.0.0.2 SSH-2.0-OpenSSH_6.6.1 127.0.0.2 ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBCPWoEQ7iCCYDrpyb5KeMmCaQ8aOnSfehqmrplZRkbqqnkS9++PdSX/eSLJ0tkFd5902/ C+HTCqbDgso4mCKpMo= Gitlab yaml config fileWe will set up the yaml file of Gitlab pusherIn our projectvim .gitlab-ci.yml before_script:# cfr. https://docs.gitlab.com/ee/ci/ssh_keys/README.html# Install ssh-agent if not already installed, it is required by Docker.# (change apt-get to yum if you use a CentOS-based image)- 'which ssh-agent || ( apt-get update -y &amp;&amp; apt-get install openssh-client -y )'# Run ssh-agent (inside the build environment)- eval $(ssh-agent -s)# Add the SSH key stored in SSH_PRIVATE_KEY variable to the agent store- ssh-add &lt;(echo \"$SSH_PRIVATE_KEY\")# For Docker builds disable host key checking. Be aware that by adding that# you are suspectible to man-in-the-middle attacks.# WARNING: Use this only with the Docker executor, if you use it with shell# you will overwrite your user's SSH config.#- mkdir -p ~/.ssh#- '[[ -f /.dockerenv ]] &amp;&amp; echo -e \"Host *\\n\\tStrictHostKeyChecking no\\n\\n\" &gt; ~/.ssh/config'# In order to properly check the server's host key, assuming you created the# SSH_SERVER_HOSTKEYS variable previously, uncomment the following two lines# instead.- mkdir -p /root/.ssh- '[[ -f /.dockerenv ]] &amp;&amp; echo \"$SSH_SERVER_HOSTKEYS\" &gt; /root/.ssh/known_hosts'- chmod 700 /root/.ssh# This file is a template, and might need editing before it works on your project.# Official framework image. Look for the different tagged releases at:# https://hub.docker.com/r/library/node/tags/image: node:8# This folder is cached between builds# http://docs.gitlab.com/ce/ci/yaml/README.html#cachecache: paths: - node_modules/stages:- build- deploynpm-build: stage: build script: - rm -rf node_modules/ &amp;&amp; npm i npm@latest -g &amp;&amp; npm install depoly-test: stage: deploy script: - tar zcvf ../$CI_PROJECT_NAME.tar.gz ./ &gt; /dev/null # SCP the compressed project from the container to designated machine - scp -r ../$CI_PROJECT_NAME.tar.gz root@35.201.171.244:/locationYouPrefer # Now, we are going to ssh to the designated machine and do the things as follows: # Create a folder named the same as the project's # Depress the previously packed project into this folder, and omit the depressing message. # Revise the authority of this folder # Get into this folder, and run npm rebuild, and turn on the previously set up Daemon service - ssh root@yourIP \"mkdir -p locationYouPrefer/$CI_PROJECT_NAME &amp;&amp; tar zxvf locationYouPrefer/$CI_PROJECT_NAME.tar.gz -C locationYouPrefer/$CI_PROJECT_NAME &gt; /dev/null &amp;&amp; chmod -R 655 locationYouPrefer/$CI_PROJECT_NAME &amp;&amp; cd locationYouPrefer/$CI_PROJECT_NAME &amp;&amp; npm rebuild &amp;&amp; /etc/init.d/$CI_PROJECT_NAME restart\" # This stage will only be activated on this specified branch only: - branchYouPrefer ConclusionUntil now, when we use git push to specified branch, we should be able to trigger gitlab pusher to achieve automatic deployment","link":"/gitlabCICDOnGCP/"},{"title":"Hello World","text":"FeaturesEnglish version中文版日本語版 Do not modify this note. Thank you very much :smile:If you want to say hello or play with something, please go to Playground Introduction HackMD is a realtime, multi-platform collaborative markdown note editor.This means that you can write notes with other people on your desktop, tablet or even on the phone.You can sign-in via multiple auth providers like Facebook, Twitter, GitHub and many more on the homepage. Please report new issues in GitHub.If you need instant help, please send us a Facebook message.Thank you very much! WorkspaceModesDesktop &amp; Tablet Edit: See only the editor. View: See only the result. Both: See both in split view. Mobile View: See only the result. Edit: See only the editor. Image Upload:You can upload an image simply by clicking on the camera button .Alternatively, you can drag-n-drop an image into the editor. Even pasting images is possible!This will automatically upload the image to imgur, nothing to worry. :tada: Share Notes:If you want to share an editable note, just copy the URL.If you want to share a read-only note, simply press publish button and copy the URL. Save a Note:Currently, you can save to Dropbox or save an .md file locally. Import Notes:Similarly to the save feature, you can also import an .md file from Dropbox ,or import content from your clipboard , and that can parse some html which might be useful :smiley: Permissions:It is possible to change the access permission to a note through the little button on the top right of the view.There are six possible options: Owner read/write Signed-in read Signed-in write Guest read Guest write Freely ✔ ✔ ✔ ✔ ✔ Editable ✔ ✔ ✔ ✔ ✖ Limited ✔ ✔ ✔ ✖ ✖ Locked ✔ ✔ ✖ ✔ ✖ Protected ✔ ✔ ✖ ✖ ✖ Private ✔ ✖ ✖ ✖ ✖ Only the owner of the note can change the note’s permissions. Embed a Note:Notes can be embedded as follows: &lt;iframe width=\"100%\" height=\"500\" src=\"https://hackmd.io/features\" frameborder=\"0\"&gt;&lt;/iframe&gt; Slide Mode:You can use a special syntax to organize your note into slides.After that, you can use the Slide Mode to make a presentation.Visit the above link for details. Book Mode:You can make your notes into a book.List your links in order or nest them.Then use the Book Mode to make a collection.Visit the above link for details. ViewTable of Contents:You can look at the bottom right section of the view area, there is a ToC button .Pressing that button will show you a current Table of Contents, and will highlight which section you’re at.ToCs support up to three header levels. PermalinkEvery header will automatically add a permalink on the right side.You can hover and click to anchor on it. Edit:Shortcut Keys:Just like Sublime text, which is pretty quick and convenient. For more infomation, see here. Auto-Complete:This editor provides full auto-complete hints in markdown. Emojis: type : to show hints. Code blocks: type ` and plus a character to show hint. ```- Headers: type `#` to show hint.- Referrals: type `[]` to show hint.- Externals: type `&#123;&#125;` to show hint.- Images: type `!` to show hint.## Title:This will take the first **level 1 header** as the note title.## Tags:Using tags as follows, the specified tags will show in your **history**.###### tags: `features` `cool` `updated`## [YAML Metadata](/yaml-metadata)You can provide advanced note information to set the browser behavior (visit above link for details):- title: set note title- description: set note description- image: set note default image (for link preview)- tags: set note tags- robots: set web robots meta- lang: set browser language- dir: set text direction- breaks: set to use line breaks- GA: set to use Google Analytics- disqus: set to use Disqus- slideOptions: setup slide mode options## ToC:Use the syntax `[TOC]` to embed table of content into your note.[TOC]## EmojiYou can type any emoji like this :smile: :smiley: :cry: :wink:&gt; See full emoji list [here](http://www.emoji-cheat-sheet.com/).## ToDo List:- [ ] ToDos - [x] Buy some salad - [ ] Brush teeth - [x] Drink some water## Code Block:We support many programming languages, use the auto complete function to see the entire list.```javascript=var s = &quot;JavaScript syntax highlighting&quot;;alert(s);function $initHighlight(block, cls) &#123; try &#123; if (cls.search(/\\bno\\-highlight\\b/) != -1) return process(block, true, 0x0F) + &apos; class=&quot;&quot;&apos;; &#125; catch (e) &#123; /* handle exception */ &#125; for (var i = 0 / 2; i &lt; classes.length; i++) &#123; if (checkCondition(classes[i]) === undefined) return /\\d+[\\s/]/g; &#125;&#125; If you want line numbers, type = after specifying the code block languagues.Also, you can specify the start line number.Like below, the line number starts from 101:var s = \"JavaScript syntax highlighting\";alert(s);function $initHighlight(block, cls) &#123; try &#123; if (cls.search(/\\bno\\-highlight\\b/) != -1) return process(block, true, 0x0F) + ' class=\"\"'; &#125; catch (e) &#123; /* handle exception */ &#125; for (var i = 0 / 2; i &lt; classes.length; i++) &#123; if (checkCondition(classes[i]) === undefined) return /\\d+[\\s/]/g; &#125;&#125; Or you might want to continue the previous code block’s line number, use =+ var s = \"JavaScript syntax highlighting\";alert(s); Somtimes you have a super long text without breaks. It’s time to use ! to wrap your code. When you’re a carpenter making a beautiful chest of drawers, you’re not going to use a piece of plywood on the back. Blockquote Tags: Using the syntax below to specifiy your name, time and color to vary the blockquotes.[name=ChengHan Wu] [time=Sun, Jun 28, 2015 9:59 PM] [color=#907bf7] Even support the nest blockquotes![name=ChengHan Wu] [time=Sun, Jun 28, 2015 10:00 PM] [color=red] ExternalsYouTube Vimeo Gist SlideShareMathJaxYou can render LaTeX mathematical expressions using MathJax, as on math.stackexchange.com, except the space after the start $ and the space before the end $ are not allowed in the inline math: The Gamma function satisfying $\\Gamma(n) = (n-1)!\\quad\\forall n\\in\\mathbb N$ is via the Euler integral $$x = {-b \\pm \\sqrt{b^2-4ac} \\over 2a}.$$ $$\\Gamma(z) = \\int_0^\\infty t^{z-1}e^{-t}dt\\,.$$ More information about LaTeX mathematical expressions here. UML DiagramsSequence DiagramsYou can render sequence diagrams like this: Alice-&gt;Bob: Hello Bob, how are you?Note right of Bob: Bob thinksBob--&gt;Alice: I am good thanks!Note left of Alice: Alice respondsAlice-&gt;Bob: Where have you been? Flow ChartsFlow charts can be specified like this:st=&gt;start: Starte=&gt;end: Endop=&gt;operation: My Operationop2=&gt;operation: lalalacond=&gt;condition: Yes or No?st-&gt;op-&gt;op2-&gt;condcond(yes)-&gt;econd(no)-&gt;op2 Graphvizdigraph hierarchy &#123; nodesep=1.0 // increases the separation between nodes node [color=Red,fontname=Courier,shape=box] //All nodes will this shape and colour edge [color=Blue, style=dashed] //All the lines look like this Headteacher-&gt;&#123;Deputy1 Deputy2 BusinessManager&#125; Deputy1-&gt;&#123;Teacher1 Teacher2&#125; BusinessManager-&gt;ITManager &#123;rank=same;ITManager Teacher1 Teacher2&#125; // Put them on the same level&#125; Mermaidgantt title A Gantt Diagram section Section A task :a1, 2014-01-01, 30d Another task :after a1 , 20d section Another Task in sec :2014-01-12 , 12d anther task : 24d AbcX:1T:Speed the PloughM:4/4C:Trad.K:G|:GABc dedB|dedB dedB|c2ec B2dB|c2A2 A2BA|GABc dedB|dedB dedB|c2ec B2dB|A2F2 G4:||:g2gf gdBd|g2f2 e2d2|c2ec B2dB|c2A2 A2df|g2gf g2Bd|g2f2 e2d2|c2ec B2dB|A2F2 G4:| More information about sequence diagrams syntax here.More information about flow charts syntax here.More information about graphviz syntax hereMore information about mermaid syntax hereMore information about abc syntax here Alert Area:::successYes :tada:::: :::infoThis is a message :mega:::: :::warningWatch out :zap:::: :::dangerOh No! :fire:::: TypographyHeaders# h1 Heading## h2 Heading### h3 Heading#### h4 Heading##### h5 Heading###### h6 Heading Horizontal Rules Typographic ReplacementsEnable typographer option to see result. (c) (C) (r) (R) (tm) (TM) (p) (P) +- test.. test… test….. test?….. test!…. !!!!!! ???? ,, Remarkable – awesome “Smartypants, double quotes” ‘Smartypants, single quotes’ EmphasisThis is bold text This is bold text This is italic text This is italic text Deleted text lu~lala~ Superscript: 19^th^ Subscript: H~2~O ++Inserted text++ ==Marked text== Blockquotes Blockquotes can also be nested… …by using additional greater-than signs right next to each other… …or with spaces between arrows. ListsUnordered Create a list by starting a line with +, -, or * Sub-lists are made by indenting 2 spaces: Marker character change forces new list start: Ac tristique libero volutpat at Facilisis in pretium nisl aliquet Nulla volutpat aliquam velit Very easy! Ordered Lorem ipsum dolor sit amet Consectetur adipiscing elit Integer molestie lorem at massa You can use sequential numbers… …or keep all the numbers as 1. feafw 332 242 2552 e2 Start numbering with offset: foo bar CodeInline code Indented code // Some comments line 1 of code line 2 of code line 3 of code Block code “fences” Sample text here... Syntax highlighting var foo = function (bar) &#123; return bar++;&#125;;console.log(foo(5)); Tables Option Description data path to data files to supply the data that will be passed into templates. engine engine to be used for processing templates. Handlebars is the default. ext extension to be used for dest files. Right aligned columns Option Description data path to data files to supply the data that will be passed into templates. engine engine to be used for processing templates. Handlebars is the default. ext extension to be used for dest files. Left aligned columns Option Description data path to data files to supply the data that will be passed into templates. engine engine to be used for processing templates. Handlebars is the default. ext extension to be used for dest files. Center aligned columns Option Description data path to data files to supply the data that will be passed into templates. engine engine to be used for processing templates. Handlebars is the default. ext extension to be used for dest files. Linkslink textlink with titleAutoconverted link https://github.com/nodeca/pica ImagesLike links, Images also have a footnote style syntaxWith a reference later in the document defining the URL location: Show the image with given size FootnotesFootnote 1 link[^first].Footnote 2 link[^second].Inline footnote^[Text of inline footnote] definition.Duplicated footnote reference[^second]. [^first]: Footnote can have markup and multiple paragraphs.[^second]: Footnote text. Definition ListsTerm 1 : Definition 1with lazy continuation. Term 2 with inline markup : Definition 2 { some code, part of Definition 2 } Third paragraph of definition 2. Compact style: Term 1 ~ Definition 1 Term 2 ~ Definition 2a ~ Definition 2b AbbreviationsThis is an HTML abbreviation example.It converts “HTML”, but keeps intact partial entries like “xxxHTMLyyy” and so on. *[HTML]: Hyper Text Markup Language","link":"/hello-world/"},{"title":"How to configure Git?","text":"Hello It’s Ray! Today I’m going to share with you how to configure basic information of Git. Ｏkay now let’s add a new code on our example file as follows: &lt;!DOCTYPE html&gt;&lt;html lang=\"en\"&gt;&lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;title&gt;First example&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;p&gt;This is the first example&lt;/p&gt;&lt;p&gt;We add a new paragraph on the first example&lt;/p&gt;&lt;p&gt;This is the example commit for git commit -am&lt;/p&gt;&lt;p&gt;This is the example1 for git configuration&lt;/p&gt;&lt;/body&gt;&lt;/html&gt; Git commit -am “Before configuration” Git log Take a look on the image above, which shows the author information of this commit in current configuration. Now we add another description in the example1.html file as follows: &lt;!DOCTYPE html&gt;&lt;html lang=\"en\"&gt;&lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;title&gt;First example&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;p&gt;This is the first example&lt;/p&gt;&lt;p&gt;We add a new paragraph on the first example&lt;/p&gt;&lt;p&gt;This is the example commit for git commit -am&lt;/p&gt;&lt;p&gt;This is the example1 for git configuration&lt;/p&gt;&lt;p&gt;This is the example after git configuration&lt;/p&gt;&lt;/body&gt;&lt;/html&gt; Let’s configure the user information. enter the following code. Git config --global user.name RayGit config --global user.email example@email.com Please fill in yours in “Ray” and “example@email.com” And then enter: Git commit -am “after configuration” Git log Through image above we could see that we’ve successfully configured the user information. Let me explain further. We use –global to configure, so it applies to ALL, simply speaking, all of the repositories in your computer are applied with this setting. We could also configure a local setting, which means the configuration only apply to local repository. We will talk about it further! Let’s call it a day. See you guys!","link":"/howToConfigureGit/"},{"title":"Deploy multiple projects on AWS","text":"Launch a AWS EC2 instance, the testing instance is Amazon Linux 2 AMI (HVM), SSD Volume Type - ami-0d7ed3ddb85b521a6 Connect to your EC2 instance, and entersudo vim /etc/httpd/conf.d/yourProjectName.conf paste the following code &lt;VirtualHost *:443&gt; # port 443 for https ServerName letussleep.space # Your domin name DocumentRoot &quot;/var/www/html/yourLaravelProjectName/public&quot; # The absolute address of your project on EC2 SSLEngine on SSLCertificateFile /whateverLocationYouWant/certificate.crt SSLCertificateKeyFile /whateverLocationYouWant/private.key SSLCertificateChainFile /whateverLocationYouWant/ca_bundle.crt # They are for SSL signing purpose, corresponding to those validation files you get from SSL signing service.&lt;/VirtualHost&gt;&lt;VirtualHost *:80&gt; # port 80 is for http ServerName letussleep.space DocumentRoot &quot;/var/www/html/yourLaravelProjectName/public&quot; redirect / Https://letussleep.space # When user connect this project via http, redirect to https&lt;/VirtualHost&gt;&lt;VirtualHost *:80&gt;ServerName oldletussleep.space # So, basically in a conf file, we could complete multiple project deployment once we set the domain name properly.DocumentRoot &quot;/var/www/html/yourProjectName/public&quot;&lt;/VirtualHost&gt; Although we could complete multiple project deployment in a single config file once we set the domain name and project address properly, I personally prefer one config file to one project to prevent any possible confusion in the future. So simply repeat all the steps mentioned above, creating a new config file, and config it properly, and then type sudo service httpd restart Connect to your domain, it should work now.","link":"/howToDeployMultipleProjectOnAWS/"},{"title":"Import Chinese into Database without garbles","text":"Some detail when importing Chinese from CSV file into database via PHP script Hello everyone. It’s Ray!Today I am going to share more details of importing Chinese characters into database from CSV file via PHP script Firstly, let’s start from PHP script &lt;?phpmysqli_set_charset($dbc,&quot;utf8&quot;); After the code of connecting to database, bear in mind that the code above should be added in order to specify the default format of data from and to database. As to CSV file: Firstly, open it with Excel, open new Secondly, choose data, and click from text Use delimiter Use comma to delimit the data Finally, general is fine. As to database: If you use GUI tool such as Sequel Pro, remember to choose UTT-8 when creating a new table If you use terminal, as image below, remember to specify the utf8 format when creating a new table If garble still occurs, check if the format for each column is utf-8 Basically, if all above mentioned is followed, you should be able to import Chinese and show it in database without any trouble as image below:","link":"/howToImportChineseIntoDatabaseWithoutGarble/"},{"title":"Send email via AWS SES in Laravel","text":"Apply for AWS SES (simple email service) Create an user, and SES full accessible policy, along with the access key and secret key. Go to AWS console, click email address option on left side, and verify your email. Go to AWS support center to submit a service limit increase case, and choose SES Sending Limits, called ‘Remove it out of SandBox’ Otherwise the capacity of the mail you are allowed to send and its rate will be limited to a large extend, besides that, all of the recipients will have to be verified by SES. Create a Laravel Project Install mail package composer require guzzlehttp/guzzle Install AWS SDK composer require aws/aws-sdk-php Go to config/mail.php, and revise the driver toses Go to config/services.php, and config it as follows: &apos;ses&apos; =&gt; [ &apos;key&apos; =&gt; &apos;your-ses-key&apos;, &apos;secret&apos; =&gt; &apos;your-ses-secret&apos;, &apos;region&apos; =&gt; &apos;ses-region&apos;, // e.g. us-east-1], You should config all above mentioned in your .env file as follows: MAIL_DRIVER=sesMAIL_FROM_ADDRESS=your-mail-addressMAIL_FROM_NAME=BuyBuyGoSES_KEY=your-ses-keySES_SECRET=your-ses-secretSES_REGION=us-west-2 Create class，php artisan make:mail OrderCreated --markdown=emails.orders.created Go to OrderCreated.php, config your build as follows: &lt;?phpnamespace App\\Mail;use Illuminate\\Bus\\Queueable;use Illuminate\\Mail\\Mailable;use Illuminate\\Queue\\SerializesModels;use Illuminate\\Contracts\\Queue\\ShouldQueue;class OrderShipped extends Mailable&#123; use Queueable, SerializesModels; protected $order; /** * Create a new message instance. * * @return void */ public function __construct($order) &#123; $this-&gt;order = $order; // &#125; /** * Build the message. * * @return $this */ public function build() &#123; return $this-&gt;markdown(&apos;emails.orders.created&apos;) -&gt;with([ &apos;buyer&apos; =&gt; $this-&gt;order-&gt;user-&gt;name, &apos;order&apos; =&gt; $this-&gt;order-&gt;name, &apos;item_name&apos; =&gt; $this-&gt;order-&gt;item_name, &apos;item_description&apos; =&gt; $this-&gt;order-&gt;item_description, &apos;quantity&apos; =&gt; $this-&gt;order-&gt;quantity, &apos;total_amount&apos; =&gt; $this-&gt;order-&gt;total_amount, &apos;unit_price&apos; =&gt; $this-&gt;order-&gt;unit_price, &apos;expiry_time&apos; =&gt; $this-&gt;order-&gt;expiry_time, ]); &#125;&#125; Go to created.blade.php to customize the view as follows: @component(&apos;mail::message&apos;)# Dear &#123;&#123; $buyer &#125;&#125;Thanks for your patronage!- Order: &#123;&#123;$order&#125;&#125;- Item: &#123;&#123;$item_name&#125;&#125;- Item description: &#123;&#123;$item_description&#125;&#125;- Quantity: &#123;&#123;$quantity&#125;&#125;- Unit price: &#123;&#123;$unit_price&#125;&#125;- Amount: &#123;&#123;$total_amount&#125;&#125;## Kindly make this payment before &lt;span style=&quot;color: red&quot;&gt;&#123;&#123;$expiry_time&#125;&#125;&lt;/span&gt;&lt;hr&gt;&lt;br&gt;## If you have any question, feel free to contact us@component(&apos;mail::button&apos;, [&apos;url&apos; =&gt; &apos;https://tn710617.github.io/&apos;])Contact Us@endcomponentThanks,&lt;br&gt;&#123;&#123; config(&apos;app.name&apos;) &#125;&#125;@endcomponent Now you could use mail to send email wherever you want. Mail::to($buyer-&gt;email)-&gt;send(new OrderCreated($order)); Now it should work Do you think “that’s it?”, yeah almost. However, there is one more thing.I spent one day figuring out all above mentioned, and then I came across something tricky, and it took me one another day.As a backend programmer, whenever I need to connect a third party payment service, I use ngrok to help me develop.It’s so weird this time. I made my script to do some things in my controller after I received the response from payment service. However, it did every function I wrote except for the mail function… and here is the error message: &quot;message&quot;: &quot;Expected response code 250 but got code \\&quot;530\\&quot;, with message \\&quot;530 5.7.1 Authentication required\\r\\n\\&quot;&quot;,&quot;exception&quot;: &quot;Swift_TransportException&quot;,&quot;file&quot;: &quot;/Users/ray/code/FacebookOptimizedSellingSystem/vendor/swiftmailer/swiftmailer/lib/classes/Swift/Transport/AbstractSmtpTransport.php&quot;,&quot;line&quot;: 457,&quot;trace&quot;: [ 1000 lines omitted. After tormenting debugging, I found out if I used valet share, this error would not occur, and if I used php artisan serve --port=yourPort, and then ngrok http yourPort, and the error came out. although I solved the error eventually, to be honest I still didn’t know why.. If you know why the error occurred, kindly drop me a message or a mail, it will really help!","link":"/howToSendMailViaAWSSES/"},{"title":"How to skip git add?","text":"Do you think it’s extremely troublesome to use git add every time before we want to make a commit? Let’s try git commit -am Hello everyone. It’s Ray! Today I am going to share how to simplify git add and git commit, let’s welcome git commit -am As shared previously, every time before making a commit, we need to use git add to update the progress to be committed, and then leave the specific message for this commit before completing this commit. Some think it’s a good design, after all, it’s best to err on the side of caution. However, some don’t, thinking that it’s a bit troublesome. No matter which one you are belong to. today I’m going to share with you how to combine and turn them into one move. Firstly, let’s add a new code in example1.html file as follows:&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;First example&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;p&gt;This is the first example&lt;/p&gt;&lt;p&gt;We add a new paragraph on the first example&lt;/p&gt;&lt;p&gt;This is the example commit for git commit -am&lt;/p&gt;&lt;/body&gt;&lt;/html&gt; enter git status As image below, the example1.html has been modified, and it requires git add to update what will be committed before a commit. According to articles that I posted previously, we need to git add, and then git commit, and finally leave the specific message before a completed commit. Now let’s try something simpler. Enter Git commit -am &quot;example for git commit -am&quot; Enter git status to check the condition. enter git log As image below, we’ve successfully committed. Here I’m going to further explain how git add works. When we create a new file, we need to add this file into the list of tracked files, and to do so, we use git add When one of the tracked file is modified, and we would like to make a commit, we would need to update what will be committed, and we also use git add to do so. That said, git commit -am would not work on a newly added file which hasn’t been added into tracked file list. Caution! -a here means automatic, which would automatically add ALL those modified file from tracked file list. After reading through this article, are you more familiar with Git? See you guys!","link":"/howToSkipGitAdd/"},{"title":"How to use checkout","text":"Hello everyone, it’s Ray! Remember where we were in my last article? I hope that the image above would do some help. You are right, last time we introduced how to initialise Git, and create a file called example1.html, and then complete our first commit. As mentioned previously, Git allows us to go back to whatever commit whenever we want. Today I’m going to share how to freely switch among different commits. Now let’s add some experimental code &lt;p&gt;We add a new paragraph on the first example&lt;/p&gt; in the example1.html file as follows:現在，讓我們在檔案內加入下面highlight的一段 &lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;First example&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;p&gt;This is the first example&lt;/p&gt;&lt;p&gt;We add a new paragraph on the first example&lt;/p&gt;&lt;/body&gt;&lt;/html&gt; And then we go to command line, and type git status You will see what looks like the following image, which indicating that the example1.html file has been modified. As mentioned in the last article, before making any commit, we need to use git add to specify what we want to commit. So let’s type git add example1.html and type git status As the image above, we’ve specified what we are going to commit Now type git commit And leave the message “New paragraph added in example1.html file” for this commit. After that we type git status to check it And then git log We will see the second commit that we just made as follows: Okay, now let’s go back to our first commit. The git log shows the history of all of the commits, and therefore we could use the information within to switch among different commits Type git checkout b45934852da471efbbbc52b5a119e8723fb01866 This checksum is my version, and it varies upon different time, author, even the data. In other words, it’s unique, so yours will be different from mine. As image shown below, now we are already at our first commit Now let’s open editor to check. The experimental code &lt;p&gt;We add a new paragraph on the first example&lt;/p&gt; is gone. Now we go back to our first commit, and it doesn’t matter if we’ve saved it with our editor or IDE. So now how could we go back to our latest commit? Type git checkout master As image shown above, now we are at our latest commit. Now go to editor to check. See! The disappeared “new paragraph” appears again! Isn’t it a magic? Hope that it will do some help on the understanding of git of yours. See you guys!","link":"/howToUseCheckout/"},{"title":"Implement a transaction via PayPal Payment Standard and PayPal IPN Message","text":"IntroductionIf you’ve once tried PayPal Payment service, you should know that PayPal provides several ways for users to pay and receive paymentThose are included in this article: How to pay via PayPal Payment Standard How to validate the payment result via PayPal IPN Message With PayPal Payment Standard, how to submit several items with their names, unit prices, and quantities. In this article, the language I use is Laravel, the framework of PHP.Since this article basically is a record of a project I was working, there may be some parts that don’t have so much to do with payment service.You could skip those parts and start from ‘Make a payment order’ ValidationIt’s part of the whole process, and doesn’t have anything to do with payment service. You could just skip it.$toBeValidatedCondition = [ 'order_id' =&gt; 'required|array',];$failMessage = Helpers::validation($toBeValidatedCondition, $request);if ($failMessage) return Helpers::result(false, $failMessage, 400);if (!Helpers::checkIfIDExists($request, new Order(), 'order_id')) return Helpers::result(false, 'The orders doesn\\'t exist', 400);if (!Helpers::checkIfBelongToTheUser($request, new Order(), 'order_id')) return Helpers::result(false, 'The order doesn\\'t belong to this user', 400);$orders = Order::whereIn('id', $request-&gt;order_id)-&gt;get();if (Order::checkIfOrderPaid($orders)) return Helpers::result(false, 'The order has already been paid', 400);if (Order::checkIfOrderExpired($orders)) return Helpers::result(false, 'The order has expired', 400);if ($recipient-&gt;user_id !== User::getUserID($request)) return Helpers::result(false, 'The recipient doesn\\'t belong to the user', 400); Collect required information.When I was working, it seemed that I had more time than front end, lol, so I decided to take care as mush information as possible, managing to let front end do more things with the least information.$toBeSavedInfo = [ 'total_amount' =&gt; Order::getTotalAmountForPayments($orders), 'orders_name' =&gt; Order::getOrdersNameForPayments($orders), 'merchant_trade_no' =&gt; time() . Helpers::createAUniqueNumber(), 'merchant_trade_date' =&gt; date('Y/m/d H:i:s'), 'trade_desc' =&gt; 'BuyBuyGo', 'quantity' =&gt; 1, 'user_id' =&gt; User::getUserID($request), 'payment_service' =&gt; $thirdPartyPaymentService, 'expiry_time' =&gt; (new Carbon())-&gt;now()-&gt;addDay(1)-&gt;toDateTimeString(), 'orders' =&gt; $orders, 'mc_currency' =&gt; 'TWD', 'ClintBackURL' =&gt; $request-&gt;ClintBackURL]; Splitting pointSince I use two payment services in this project, so I need a place to determine where the request is from and should goswitch ($thirdPartyPaymentService-&gt;id)&#123; case 1: $error = (new AllPay)-&gt;make($toBeSavedInfo, $request, $recipient); if($error) return Helpers::result(false, $error,400); return (new AllPay())-&gt;send($toBeSavedInfo, $request); break; case 2: $error = (new PayPal)-&gt;make($toBeSavedInfo, $request, $recipient); if($error) return Helpers::result(false, $error, 400); $url = (new PayPal)-&gt;send($toBeSavedInfo, $request, $recipient); return Helpers::result(true, $url, 200); break;&#125; Make a payment orderWhenever the user call PAY API, a temporary order will be built, which is only between the seller and PayPal.Because I’m going to insert data into two tables at a time, we I am going to use Laravel’s Transaction to implement the data inserting work. If you are interested in Transaction of Laravel, you could refer to a short section in my another article, which I mentioned a bit.public function make(Array $toBeSavedInfo, Request $request, Recipient $recipient)&#123; DB::beginTransaction(); try &#123; $PayPal = new self(); $PayPal-&gt;user_id = $toBeSavedInfo['user_id']; $PayPal-&gt;payment_service_id = $toBeSavedInfo['payment_service']-&gt;id; $PayPal-&gt;expiry_time = $toBeSavedInfo['expiry_time']; $PayPal-&gt;merchant_trade_no = $toBeSavedInfo['merchant_trade_no']; $PayPal-&gt;total_amount = $toBeSavedInfo['total_amount']; $PayPal-&gt;trade_desc = $toBeSavedInfo['trade_desc']; $PayPal-&gt;item_name = $toBeSavedInfo['orders_name']; $PayPal-&gt;mc_currency = $toBeSavedInfo['mc_currency']; $PayPal-&gt;recipient_id = $recipient-&gt;id; $PayPal-&gt;save(); foreach ($toBeSavedInfo['orders'] as $order) &#123; $order_relations = new OrderRelations(); $order_relations-&gt;payment_service_id = $toBeSavedInfo['payment_service']-&gt;id; $order_relations-&gt;payment_service_order_id = $PayPal-&gt;id; $order_relations-&gt;order_id = $order-&gt;id; $order_relations-&gt;save(); &#125; &#125; catch (Exception $e) &#123; DB::rollBack(); return 'something went wrong with DB'; &#125; DB::commit();&#125; Make a URL for submitting the payment request to PayPalHere we will use a lot of variables of PayPal Payment Standard. You could refer to the usage of every of them from this articleBy the way, because when Ray doing this project, the front end’s schedule was a bit tighter than Ray, so Ray decided to handle as much information as possible. The backend will collect all those information from orders that have been built, and feed PayPal with those information. So basically the front end only has to let me know what orders the user want to pay.public function send(Array $toBeSavedInfo, Request $request, Recipient $recipient)&#123; $enableSandbox = env('PAYPAL_SANDBOX_ENABLESANDBOX'); $paypalUrl = $enableSandbox ? 'https://www.sandbox.paypal.com/cgi-bin/webscr' : 'https://www.paypal.com/cgi-bin/webscr'; $data = []; // Set PayPal account. You might need to apply test account of either seller or buyer via the link below. We will need to enter seller's account here, so whenever an order is paid, the payment will be automatically transferred into this account. // https://developer.paypal.com/developer/accounts/ $data['business'] = env('PAYPAL_SANDBOX_MAIL'); // Set the PayPal return addresses, after the transaction is completed, the user could be back via this URL. $data['return'] = $toBeSavedInfo['ClintBackURL']; // During the transaction process on PayPal's site, the user could cancel the transaction and go back via this URL. $data['cancel_return'] = env('PAYPAL_SANDBOX_CANCEL_URL'); // After the transaction is completed, PayPal will send IPN message to this URL. $data['notify_url'] = env('PAYPAL_SANDBOX_NOFITY_URL'); // Set the details about the products being purchased, including the price for every individual // and currency so that these aren't overridden by the form data. $i = 1; foreach ($toBeSavedInfo['orders'] as $order) &#123; $data[\"item_name_$i\"] = $order-&gt;item_name; $data[\"item_number_$i\"] = $order-&gt;quantity; $data[\"amount_$i\"] = $order-&gt;total_amount; $i++; &#125; // Here we specify the currency, you could refer to the supported currency from the link below // https://developer.paypal.com/docs/classic/api/currency_codes/ $data['currency_code'] = $toBeSavedInfo['mc_currency']; // Add any custom fields for the query string. We will pass this value to PayPal, and it will return along with IPN Message from PayPal. In this case, I pass the order number of payment order. $data['custom'] = $toBeSavedInfo['merchant_trade_no']; // Add recipient's information, and show it on paying process $data['address_override'] = 1; $data['country'] = $recipient-&gt;country_code; $data['city'] = $recipient-&gt;city; $data['address1'] = $recipient-&gt;others; $data['zip'] = $recipient-&gt;postcode; $data['first_name'] = $recipient-&gt;name; // This setting allow to add multiple items with IPN method $data['upload'] = '1'; $data['cmd'] = \"_cart\"; // Add charset $data['charset'] = 'utf-8'; // Build the query string from the data. $queryString = http_build_query($data); // Build the URL to PayPal $url = $paypalUrl . '?' . $queryString; return $url; &#125; Pay the payment The user reach the PayPal payment page via the URL we produced above. Please register test account via link here Reach payment page Here we could see the items in detail, including price and quantity. Click continue to go on Here we could see the shipping address we designated Transaction completed, and here we could see all the details Verify payment stateAfter the payment is completed, PayPal will send an IPN message to us. You could check the IPN in detail through the official document Firstly, let’s install PayPal’s official IPN CODE SAMPLES git clone https://github.com/paypal/ipn-code-samples In php directory cd ipn-code-samples/php And then, let’s copy PaypalIPN.php into our project, Ray personally put it under app Now, put the folder cert that is under ipn-code-samples also into app as image below: In composer.json file, search files under autoload-dev, and add PaypalIPN.php. If there is no files in your composer.json, you might need to create one yourself \"autoload-dev\": &#123; \"psr-4\": &#123; \"Tests\\\\\": \"tests/\" &#125;, \"files\": [ \"app/Helpers.php\", \"app/AllPay.Payment.Integration.php\", \"app/PaypalIPN.php\" ]&#125;, On terminal window, in our project folder, execute composer command composer install Now basically we have everything except for the one last step. Copy the content of example_usage_advanced.php into wherever you want. It could be one of your controllers, or a function under certain class as follows:The code below is a bit long. It should be almost the same as the original sample code except for some I put comment to, so you don’t have to go through every of them. public function listen(Request $request) &#123; // Since the offical sample is to catch $_POST, so I convert the request of Laravel into POST. You could modify it on your own. $_POST = $request-&gt;post(); // It shows if the payment is cleared. $payment_status = $_POST['payment_status']; // Remember the payment service order we passed to PayPal that I mentioned earlier $merchant_trade_no = $_POST['custom']; // Very important. We will use it later $txn_id = $_POST['txn_id']; $txn_type = $_POST['txn_type']; // When the payment is paid $payment_date = Carbon::parse($_POST['payment_date'])-&gt;setTimezone('UTC'); // The total amount $mc_gross = $_POST['mc_gross']; $mc_currency = $_POST['mc_currency']; $enable_sandbox = env('PAYPAL_SANDBOX_ENABLESANDBOX');// Use this to specify all of the email addresses that you have attached to paypal: $my_email_addresses = array(env('PAYPAL_SANDBOX_MAIL'));// Set this to true to send a confirmation email: $send_confirmation_email = env('PAYPAL_SANDBOX_SEND_CONFIRMATION_EMAIL'); $confirmation_email_address = \"buybuybuygogo@gmail.com\"; $from_email_address = \"test@gmail.com\";// Set this to true to save a log file: $save_log_file = env('PAYPAL_SANDBOX_SAVE_LOG_FILE'); $log_file_dir = storage_path() . \"/app/payment_logs\";// Here is some information on how to configure sendmail:// http://php.net/manual/en/function.mail.php#118210// Here is the function verifying the IPN message. $ipn = new PaypalIPN(); if ($enable_sandbox) &#123; $ipn-&gt;useSandbox(); &#125; $verified = $ipn-&gt;verifyIPN(); $data_text = \"\"; foreach ($_POST as $key =&gt; $value) &#123; $data_text .= $key . \" = \" . $value . \"\\r\\n\"; &#125; $test_text = \"\"; if ($_POST[\"test_ipn\"] == 1) &#123; $test_text = \"Test \"; &#125;// Check the receiver email to see if it matches your list of paypal email addresses $receiver_email_found = false; foreach ($my_email_addresses as $a) &#123; if (strtolower($_POST[\"receiver_email\"]) == strtolower($a)) &#123; $receiver_email_found = true; break; &#125; &#125; date_default_timezone_set(\"America/Los_Angeles\"); list($year, $month, $day, $hour, $minute, $second, $timezone) = explode(\":\", date(\"Y:m:d:H:i:s:T\")); $date = $year . \"-\" . $month . \"-\" . $day; $timestamp = $date . \" \" . $hour . \":\" . $minute . \":\" . $second . \" \" . $timezone; $dated_log_file_dir = $log_file_dir . \"/\" . $year . \"/\" . $month; $paypal_ipn_status = \"VERIFICATION FAILED\"; if ($verified) &#123; // When it passes the if below, it means that the IPN is verified, so we could do something after that. $paypal_ipn_status = \"RECEIVER EMAIL MISMATCH\"; if ($receiver_email_found) &#123; $paypal_ipn_status = \"Completed Successfully\"; $PayPal = (new PayPal())-&gt;where('merchant_trade_no', $merchant_trade_no)-&gt;first(); // Here we check a few things as follows: // 1. Check txd_id to prevent double processing some transaction that was previously processed. If this txd_id already exists in our database, we should ignore it. // 2. Check mc_gross, which should be exactly the same as the total amount in our payment service order. // 3. Check mc_currency to make sure it's the same as the one in our payment service order. // 4. Check payment_status to make sure that the transaction is completed. if ((!PayPal::checkIfTxnIdExists($txn_id)) &amp;&amp; ($mc_gross == $PayPal-&gt;total_amount) &amp;&amp; ($mc_currency == $PayPal-&gt;mc_currency) &amp;&amp; ($payment_status == 'Completed')) &#123; // Insert txd_id into the payment service order and update some values, which shows if this order is cleared or not. $PayPal-&gt;update(['txn_id' =&gt; $txn_id, 'txn_type' =&gt; $txn_type, 'payment_date' =&gt; $payment_date, 'status' =&gt; 1, 'expiry_time' =&gt; null]); $recipient = $PayPal-&gt;recipient; $orderRelations = $PayPal-&gt;orderRelations-&gt;where('payment_service_id', 2); // After updating the payment service order, we update the user order accordingly. Order::updateStatus($orderRelations, $recipient); // After everything is perfectly done, we send a notification mail to the buyer and seller Helpers::mailWhenPaid($PayPal, $orderRelations); &#125; &#125; &#125; elseif ($enable_sandbox) &#123; if ($_POST[\"test_ipn\"] != 1) &#123; $paypal_ipn_status = \"RECEIVED FROM LIVE WHILE SANDBOXED\"; &#125; &#125; elseif ($_POST[\"test_ipn\"] == 1) &#123; $paypal_ipn_status = \"RECEIVED FROM SANDBOX WHILE LIVE\"; &#125; if ($save_log_file) &#123; // Create log file directory if (!is_dir($dated_log_file_dir)) &#123; if (!file_exists($dated_log_file_dir)) &#123; mkdir($dated_log_file_dir, 0777, true); if (!is_dir($dated_log_file_dir)) &#123; $save_log_file = false; &#125; &#125; else &#123; $save_log_file = false; &#125; &#125; // Restrict web access to files in the log file directory $htaccess_body = \"RewriteEngine On\" . \"\\r\\n\" . \"RewriteRule .* - [L,R=404]\"; if ($save_log_file &amp;&amp; (!is_file($log_file_dir . \"/.htaccess\") || file_get_contents($log_file_dir . \"/.htaccess\") !== $htaccess_body)) &#123; if (!is_dir($log_file_dir . \"/.htaccess\")) &#123; file_put_contents($log_file_dir . \"/.htaccess\", $htaccess_body); if (!is_file($log_file_dir . \"/.htaccess\") || file_get_contents($log_file_dir . \"/.htaccess\") !== $htaccess_body) &#123; $save_log_file = false; &#125; &#125; else &#123; $save_log_file = false; &#125; &#125; if ($save_log_file) &#123; // Save data to text file file_put_contents($dated_log_file_dir . \"/\" . $test_text . \"paypal_ipn_\" . $date . \".txt\", \"paypal_ipn_status = \" . $paypal_ipn_status . \"\\r\\n\" . \"paypal_ipn_date = \" . $timestamp . \"\\r\\n\" . $data_text . \"\\r\\n\", FILE_APPEND); &#125; &#125; if ($send_confirmation_email) &#123; // Send confirmation email mail($confirmation_email_address, $test_text . \"PayPal IPN : \" . $paypal_ipn_status, \"paypal_ipn_status = \" . $paypal_ipn_status . \"\\r\\n\" . \"paypal_ipn_date = \" . $timestamp . \"\\r\\n\" . $data_text, \"From: \" . $from_email_address); &#125;// Reply with an empty 200 response to indicate to paypal the IPN was received correctly header(\"HTTP/1.1 200 OK\"); &#125; ConclusionAbove mentioned is the whole process of using PayPal Payment Standard and PayPal IPN Message to complete a transaction.Here is breakdown of every individual step: A user clicks a PayPal button to kick off a checkout flow; your web application makes an API call; your back-office system makes an API call; or PayPal observes an event. PayPal HTTPS POSTs your listener an IPN message that notifies you of this event. Your listener returns an empty HTTP 200 response. Your listener HTTPS POSTs the complete, unaltered message back to PayPal. PayPal sends a single word back - either VERIFIED (if the message matches the original) or INVALID (if the message does not match the original).","link":"/implementATransactionViaPayPalIPN/"},{"title":"Implement CI with Jenkins on AWS","text":"IntroductionHere are the points in this article: Deploy jenkins on AWS EC2 with Amazon Linux 2 AMI (HVM) Deploy jenkins on AWS EC2 with Amazon Linux AMI 2018.03.0 (HVM) When specified branch on GitHub is updated, automatically implement git pull on AWS EC2 and synchronize with your project on GitHub Launch EC2 instance Connect toAWS EC2 with SSH Click connect, and follow the instruction Amazon Linux 2 AMI (HVM)Installsudo yum install java-1.8.0 sudo yum update –y sudo rpm --import https://pkg.jenkins.io/redhat/jenkins.io.key sudo yum install jenkins -y Configsudo vim /etc/sysconfig/jenkins and revise setting as JENKINS_USER=&quot;root&quot; sudo service jenkins start sudo systemctl enable jenkins.service Config Jenkins on Browser Open the following link on Browserhttp://yourPublicDNS:8080 On server sudo cat /var/lib/jenkins/secrets/initialAdminPassword copy the password and paste it in order to login install suggested plugins Sign up your account Save and go ahead Go to ‘Jenkins management’ Install GitHub integration plugin Start a free style project Go to configuration Enter your project url Check ‘git’, and enter your Git Repository url check ‘GitHub hook trigger for GITScm polling’ Enter the shell script you likeIf you install jenkins on the machine where your project is installed: ssh -i /root/.ssh/yourKey.pem ec2-user@127.0.0.1 \"cd /var/www/html/yourProjectName;git reset @^ --hard;git pull;/usr/local/bin/composer install;php artisan migrate --force;\" Config GitHub Go to GitHub-&gt;setting build the webhook as follows: Amazon Linux AMI 2018.03.0 (HVM)Installsudo yum update –y sudo yum remove java-1.7.0-openjdk sudo yum install java-1.8.0 sudo wget -O /etc/yum.repos.d/jenkins.repo http://pkg.jenkins.io/redhat/jenkins.repo sudo rpm --import https://pkg.jenkins.io/redhat/jenkins.io.key sudo yum install jenkins -y Configsudo vim /etc/sysconfig/jenkins Revise setting as JENKINS_USER=&quot;root&quot; sudo service jenkins start Set automatic startup when Server rebootsudo chkconfig jenkins on Config Jenkins on Browser Open the following link on Browserhttp://yourPublicDNS:8080 On server sudo cat /var/lib/jenkins/secrets/initialAdminPassword copy the password and paste it in order to login install suggested plugins Sign up your account Save and go ahead Go to ‘Jenkins management’ Install GitHub integration plugin Start a free style project Go to configuration Enter your project url Check ‘git’, and enter your Git Repository url check ‘GitHub hook trigger for GITScm polling’ Enter the shell script you likeIf you install jenkins on the machine where your project is installed: ssh -i /root/.ssh/yourKey.pem ec2-user@127.0.0.1 \"cd /var/www/html/yourProjectName;git reset @^ --hard;git pull;/usr/local/bin/composer install;php artisan migrate --force;\" Config GitHub Go to GitHub-&gt;setting build the webhook as follows:","link":"/implementCIWithJenkinsOnAWS/"},{"title":"Import data into MySQL from CSV via PHP script","text":"Hello everyone. My name is Ray. I would like to share how to import data from CSV file into MySQL database via PHP scriptFirstly, take a look on the screenshot of CSV file below: Take a look on the PHP script below. Please put them in the same repository. &lt;?php// Connect to the database$dbc = mysqli_connect('Your location', 'Your MySQL user_name', 'Your MySQL password', 'Your Database Name'); // Set the charset to utf8mysqli_set_charset($dbc,\"utf8\");// Read the data$handle = fopen(\"The file name.csv\", \"r\");// Set $i = 0 for further usage$i=0;// Use fgetcsv function along with while loop to get all of the rows in the filewhile (($data = fgetcsv($handle, 1000, ',')))&#123; // Since the first line in the file is column name, // so we are going to skip the first line. // When $i = 0, it should be in the first line, // it gets into the if function, // and the continue skip all the codes afterwards // and get back to the top of the loop, // and in this round the $i = 1. So it will not get into if function, // only skip the first line that we don't want. if($i == 0) &#123; $i++; continue; &#125;// As shown on the image of csv, there is a string \"NaN\" on the rainfall column.// If we want to set the data type of this column as float or decimal,// we should take care of this string before inserting into the database.// So we use condition sentence to replace 'NaN' with 0,// and then it will not cause any problem when inserting data into this// column with data type as either float or decimal. if($data[2] == 'NaN') &#123; $data[2] = 0; &#125; // Finally, we insert the data into our database. $query = 'INSERT INTO rainfall (district, date, rainfall)VALUES (\"'.$data[0] . '\", \"' . $data[1] . '\", \"' . $data[2].'\")'; echo $query; $result = mysqli_query($dbc, $query); if ($result == false) &#123; echo 'Error description &lt;br/&gt;' . mysqli_error($dbc); &#125;&#125;?&gt; Finally, execute the script in terminal, php -f scriptName, and here you go!￼","link":"/importDataFromCSVIntoMySQLDatabaseViaPHP/"},{"title":"SSH","text":"前言本篇主要紀錄了： 如何利用檔名非 id_rsa 的檔案當 private key 在 mac 上，當現有的 key 有變更時，如何替換掉舊的 key 正文遇到這件蠢事搞了我一天…我想將 GitHub 與 GitLab 的 key 分開管理，但當 private key 的檔名不是 id_rsa 時，新的 private key 卻怎麼樣都驗不過！心灰意冷之餘，試了 ssh-add keyFile然後就一飛沖天啦！ 再來，原本成功了很高興，後來又刪掉舊的，建了一個新的！沒想到又陷入一個瘋狂驗不過的，後來總算發現，是舊的 key 被記住了，當我們使用相同的檔名時，會出現衝突，總之就是驗不過。這時候我們可以使用 ssh-add -D 刪掉舊的，在使用 ssh-add keyFile 新增一次。萬一不幸， mac 的 keychain 記住了舊的 key, 那我們可以使用 ssh-add -K keyFile 來覆蓋舊的 key在使用 ssh-add 之前，記得確定 ssh-agent 是有打開的哦！ 如果沒開，使用 eval &quot;$(ssh-agent -s)&quot; 來打開 在 GCP 上也是一樣，反正驗不過就是先 ssh-add -D, 在 ssh-add keyFIle 加進去, 如果沒開就是 eval &quot;$(ssh-agent -s)&quot;, 要是沒安裝，就是 apt-get update -y &amp;&amp; apt-get install openssh-client -y 我發現，如果使用 ssh-agent, 即使.ssh 裡頭沒放 key, 還是可以連","link":"/ssh/"},{"title":"Add multiple items on PayPal IPN method","text":"IntroductionIn this article, we are going to share how to add multiple items in PayPal’s IPN methodThis page is just a clone from the official website, and I clone it because I am lazy to look for it again whenever I need it in the future. BeginsSome web developers may wish to integrate PayPal payment processing with their own 3rd party shopping cart instead of the standard PayPal Shopping Cart. Please use the instructions below to allow your buyers to pay with PayPal when they are ready to check out after adding all of their items to your 3rd party shopping cart. There are now two ways to integrate your 3rd party shopping cart with the PayPal payment flow. The first is to pass in the aggregate amount of the Cart payment, rather than of the individual items. The second is to pass details of the items that have been selected to PayPal, instead of an aggregated amount for the entire Cart. Note: Posting the necessary variables to PayPal as described below will probably require you to implement some scripting on your website. Method 1. Passing the Aggregate Cart Amount to PayPal Method 2. Passing Individual Items to PayPal Method 1. Passing the Aggregate Cart Amount to PayPalIf you wish, you may aggregate your entire shopping cart and pass the total amount into PayPal’s Buy Now Button code (that is, you will need to post a single name for the entire cart and the total price of the cart’s contents as though it were a purchase of a single item). One drawback of this method is that your buyers will not be able to see the individual items appearing in their carts. In addition, you cannot change our variable names, nor can you add your own variable names. If you have additional technical questions after reviewing the information below, please visit our Developer Support area. For additional information about Buy Now Buttons code or the variables below, please see the Website Payments Standard Integration Guide. Required VariablesThe code for your PayPal post requires the following 4 hidden variables and an image as the form submit: Name Value business Email address on your PayPal account item_name Name of the item (or a name for the shopping cart) currency_code Defines the currency in which the monetary variables (amount, shipping, shipping2, handling, tax) are denoted. Possible values are “USD”, “EUR”, “GBP”, “CAD”, “JPY”. amount Price of the item (the total price of all items in the shopping cart) image The image for the button your buyer will press to initiate the PayPal payment process. You can substitute your own image by replacing the src with the URL of your image This means that the minimum required code for your post to PayPal will look like this &lt;form action=\"https://www.paypal.com/cgi-bin/webscr\" method=\"post\"&gt;&lt;input type=\"hidden\" name=\"cmd\" value=\"_xclick\"&gt;&lt;input type=\"hidden\" name=\"business\" value=\"you@youremail.com\"&gt;&lt;input type=\"hidden\" name=\"item_name\" value=\"Item Name\"&gt;&lt;input type=\"hidden\" name=\"currency_code\" value=\"USD\"&gt;&lt;input type=\"hidden\" name=\"amount\" value=\"0.00\"&gt;&lt;input type=\"image\" src=\"http://www.paypal.com/en_US/i/btn/x-click-but01.gif\" name=\"submit\" alt=\"Make payments with PayPal - it's fast, free and secure!\"&gt;&lt;/form&gt; PayPal offers additional variables to customize your form post. All of the available variables are listed below (variable names must be in lower case): Name Value business Email address on your PayPal account quantity Number of items. This will multiply the amount if greater than one item_name Name of the item (or a name for the shopping cart). Must be alpha-numeric, with a 127character limit item_number Optional pass-through variable for you to track payments. Must be alpha-numeric, with a 127 character limit amount Price of the item (the total price of all items in the shopping cart) shipping The cost of shipping the item shipping2 The cost of shipping each additional item handling The cost of handling tax Transaction-based tax value. If present, the value passed here will override any profile tax settings you may have (regardless of the buyer’s location). no_shipping Shipping address. If set to “1,” your customer will not be asked for a shipping address. This is optional; if omitted or set to “0,” your customer will be prompted to include a shipping address cn Optional label that will appear above the note field (maximum 40 characters) no_note Including a note with payment. If set to “1,” your customer will not be prompted to include a note. This is optional; if omitted or set to “0,” your customer will be prompted to include a note. on0 First option field name. 64 character limit os0 First set of option value(s). 200 character limit. “on0” must be defined for “os0” to be recognized. on1 Second option field name. 64 character limit os1 Second set of option value(s). 200 character limit. “on1” must be defined for “os1” to be recognized. custom Optional pass-through variable that will never be presented to your customer. Can be used to track inventory invoice Optional pass-through variable that will never be presented to your customer. Can be used to track invoice numbers notify_url Only used with IPN. An internet URL where IPN form posts will be sent return An internet URL where your customer will be returned after completing payment cancel_return An internet URL where your customer will be returned after cancelling payment image_url The internet URL of the 150 X 50 pixel image you would like to use as your logo cs Sets the background color of your payment pages. If set to “1,” the background color will be black. This is optional; if omitted or set to “0,” the background color will be white Extended VariablesPayPal allows you to post extended variables if you change this “cmd” input: &lt;input type=&quot;hidden&quot; name=&quot;cmd&quot; value=&quot;_xclick&quot;&gt; to:&lt;input type=&quot;hidden&quot; name=&quot;cmd&quot; value=&quot;_ext-enter&quot;&gt;&lt;input type=&quot;hidden&quot; name=&quot;redirect_cmd&quot; value=&quot;_xclick&quot;&gt; By making the above change to the “cmd” input, you can also use the variables below: Name Value email Customer’s email address first_name Customer’s first name. Must be alpha-numeric, with a 32 character limit last_name Customer’s last name. Must be alpha-numeric, with a 64 character limit address1 First line of customer’s address. Must be alpha-numeric, with a 100 character limit address2 Second line of customer’s address. Must be alpha-numeric, with a 100 character limit city City of customer’s address. Must be alpha-numeric, with a 100 character limit state State of customer’s address. Must be official 2 letter abbreviation zip Zip code of customer’s address night_phone_a Area code of customer’s night telephone number night_phone_b irst three digits of customer’s night telephone number day_phone_a Area code of customer’s daytime telephone number day_phone_b First three digits of customer’s daytime telephone number Note:To specify shipping &amp; handling amounts that differ from the default shipping amounts set in your Profile, please go to your Profile, edit your Shipping Calculations, and click the “allow transaction-based shipping override” checkbox. Method 2. Passing Individual Items to PayPalIf your 3rd party shopping cart can be configured to pass individual items to PayPal, information about the items will be included in the buyers’ and sellers’ History logs and notifications. To include information about the items, you will post HTML form elements to a new version of PayPal’s Shopping Cart flow. This process is much like the one described in Section #1 “Passing Aggregate Cart Amount to PayPal” with the following exceptions: Set the “cmd” variable to “_cart”Replace this required HTML line&lt;input type=&quot;hidden&quot; name=&quot;cmd&quot; value=&quot;_xclick&quot;&gt; with&lt;input type=&quot;hidden&quot; name=&quot;cmd&quot; value=&quot;_cart&quot;&gt; Add a new variable called “upload”Add the following line between the and tags: &lt;input type=&quot;hidden&quot; name=&quot;upload&quot; value=&quot;1&quot;&gt; Define item detailsFor each of the following item-specific parameters, define a new set of values that correspond to each item that was purchased via your 3rd party cart. Append “_x” to the variable name, where x is the item number, starting with 1 and increasing by one for each item that is added. Name Value item_name_x (Required for item #x) Name of item #x in the cart. Must be alpha-numeric, with a 127 character limit item_number_x Optional pass-through variable associated with item #x in the cart. Must be alpha-numeric, with a 127 character limit amount_x (Required for item #x) Price of the item #x shipping_x The cost of shipping the first piece (quantity of 1) of item #x shipping2_x The cost of shipping each additional piece (quantity of 2 or above) of item #x handling_x The cost of handling for item #x on0_x First option field name for item #x. 64 character limit os0_x First set of option value(s) for item #x. 200 character limit. “on0_x” must be defined in order for “os0_x” to be recognized. on1_x Second option field name for item #x. 64 character limit os1_x Second set of option value(s) for item #x. 200 character limit. “on1_x” must be defined in order for “os1_x” to be recognized. Repeat for each item included in cartInclude a set of required variables and any optional variables from the table above for each item included in your buyers’ cart. The first item included in the cart should be defined with parameters ending in “_1”, such as “item_name_1”, “amount_1”, etc. Similarly the second item should be denoted with variables like “item_name_2”, “amount_2”, etc. Note: the “_x” values must increment by one continuously in order to be recognized. If you skip from item #1 to item #3 without defining an item #2, the third item will be ignored. To specify currency: All monetary variables (amount, shipping, shipping2, handling, tax) will be interpreted in the currency designated by the “currency_code” variable that is posted with the payment. Since it is not item-specific, there is no need to append a “_x” to the variable name. If no “currency_code” variable is posted, we will assume that all monetary values are in U.S. Dollars.","link":"/submitMultipleItemsInPayPalIPNmethod/"},{"title":"Deploy Supervisor on AWS and MacOS","text":"IntroductionHere are what this article is going to cover: Deploy Supervisor on MacOS Deploy Supervisor on AWS What is Supervisor?Supervisor is a process monitor and control system. Because Ray do use Laravel Queue on a project, and queue worker has to be running on the background continuously. So what if the queue work fails and disconnect? With Supervisor, we will be able to restart them after they either fail or close. Mac OSInstall Install Supervisorbrew install supervisor Deployment Enter the default configuration file sudo vim /usr/local/etc/supervisord.ini Change the default include directory at the end as follows: [include]files = /usr/local/etc/supervisor.d/*.conf Add a customized directory and configuration file mkdir /usr/local/etc/supervisor.d;vim /usr/local/etc/supervisor.d/processNameYouLike.conf; Give the setting below [program:programNameYouLike]process_name=%(program_name)s_%(process_num)02dcommand=php absoluteAddressOfYourProject/artisan queue:work sqs --sleep=3 --tries=3 --daemonautostart=trueautorestart=trueuser=raynumprocs=8redirect_stderr=truestdout_logfile=/absoluteAddressOfLocationYouWouldLikeToPutTheLog/worker.log Launch Launch the service sudo supervisord -c /usr/local/etc/supervisord.ini Go into service control sudo supervisorctl -c /usr/local/etc/supervisord.ini Update the configuration update Check the status status It should look like that AWSHere is the specification of the instance we use Amazon Linux 2 AMI (HVM), SSD Volume Type - ami-0f9ae750e8274075b t2.micro (Variable ECUs, 1 vCPUs, 2.5 GHz, Intel Xeon Family, 1 GiB memory, EBS only) Install Install Supervisorsudo yum install -y supervisor Configuration Go to the default configuration file sudo vim /etc/supervisord.conf Change the include directory at the end [include]files = supervisord.d/*.conf Add a new configuration file. If the directory doesn’t exist, then make one. sudo mkdir /etc/supervisord.d;sudo vim /etc/supervisord.d/projectFileNameYouLike.conf Give the setting. [program:laravel-worker]process_name=%(program_name)s_%(process_num)02dcommand=sudo php absoluteAddressOfYourProject/artisan queue:work sqs --sleep=3 --tries=3 --daemonautostart=trueautorestart=trueuser=rootnumprocs=8redirect_stderr=truestdout_logfile=absoluteAddressOfYourProject/worker.log Launch Launch Supervisor sudo supervisord -c /etc/supervisord.conf Apply new setting and check the status sudo supervisorctl update;sudo supervisorctl status Automatic start after system reboot Add a new configuration of restart Supervisor sudo vim /etc/init.d/supervisord Give the setting as follows: #! /bin/sh### BEGIN INIT INFO# Provides: supervisord# Required-Start: $remote_fs# Required-Stop: $remote_fs# Default-Start: 2 3 4 5# Default-Stop: 0 1 6# Short-Description: Example initscript# Description: This file should be used to construct scripts to be# placed in /etc/init.d.### END INIT INFO# Author: Dan MacKinlay &lt;danielm@phm.gov.au&gt;# Based on instructions by Bertrand Mathieu# http://zebert.blogspot.com/2009/05/installing-django-solr-varnish-and.html# Do NOT &quot;set -e&quot;# PATH should only include /usr/* if it runs after the mountnfs.sh scriptPATH=/sbin:/usr/sbin:/bin:/usr/binDESC=&quot;Description of the service&quot;NAME=supervisordDAEMON=/usr/local/bin/supervisordDAEMON_ARGS=&quot;&quot;PIDFILE=/var/run/$NAME.pidSCRIPTNAME=/etc/init.d/$NAME# Exit if the package is not installed[ -x &quot;$DAEMON&quot; ] || exit 0# Read configuration variable file if it is present[ -r /etc/default/$NAME ] &amp;&amp; . /etc/default/$NAME# Load the VERBOSE setting and other rcS variables. /lib/init/vars.sh# Define LSB log_* functions.# Depend on lsb-base (&gt;= 3.0-6) to ensure that this file is present.. /lib/lsb/init-functions## Function that starts the daemon/service#do_start()&#123; # Return # 0 if daemon has been started # 1 if daemon was already running # 2 if daemon could not be started start-stop-daemon --start --quiet --pidfile $PIDFILE --exec $DAEMON --test &gt; /dev/null \\ || return 1 start-stop-daemon --start --quiet --pidfile $PIDFILE --exec $DAEMON -- \\ $DAEMON_ARGS \\ || return 2 # Add code here, if necessary, that waits for the process to be ready # to handle requests from services started subsequently which depend # on this one. As a last resort, sleep for some time.&#125;## Function that stops the daemon/service#do_stop()&#123; # Return # 0 if daemon has been stopped # 1 if daemon was already stopped # 2 if daemon could not be stopped # other if a failure occurred start-stop-daemon --stop --quiet --retry=TERM/30/KILL/5 --pidfile $PIDFILE --name $NAME RETVAL=&quot;$?&quot; [ &quot;$RETVAL&quot; = 2 ] &amp;&amp; return 2 # Wait for children to finish too if this is a daemon that forks # and if the daemon is only ever run from this initscript. # If the above conditions are not satisfied then add some other code # that waits for the process to drop all resources that could be # needed by services started subsequently. A last resort is to # sleep for some time. start-stop-daemon --stop --quiet --oknodo --retry=0/30/KILL/5 --exec $DAEMON [ &quot;$?&quot; = 2 ] &amp;&amp; return 2 # Many daemons don&apos;t delete their pidfiles when they exit. rm -f $PIDFILE return &quot;$RETVAL&quot;&#125;## Function that sends a SIGHUP to the daemon/service#do_reload() &#123; # # If the daemon can reload its configuration without # restarting (for example, when it is sent a SIGHUP), # then implement that here. # start-stop-daemon --stop --signal 1 --quiet --pidfile $PIDFILE --name $NAME return 0&#125;case &quot;$1&quot; in start) [ &quot;$VERBOSE&quot; != no ] &amp;&amp; log_daemon_msg &quot;Starting $DESC&quot; &quot;$NAME&quot; do_start case &quot;$?&quot; in 0|1) [ &quot;$VERBOSE&quot; != no ] &amp;&amp; log_end_msg 0 ;; 2) [ &quot;$VERBOSE&quot; != no ] &amp;&amp; log_end_msg 1 ;; esac ;; stop) [ &quot;$VERBOSE&quot; != no ] &amp;&amp; log_daemon_msg &quot;Stopping $DESC&quot; &quot;$NAME&quot; do_stop case &quot;$?&quot; in 0|1) [ &quot;$VERBOSE&quot; != no ] &amp;&amp; log_end_msg 0 ;; 2) [ &quot;$VERBOSE&quot; != no ] &amp;&amp; log_end_msg 1 ;; esac ;; #reload|force-reload) # # If do_reload() is not implemented then leave this commented out # and leave &apos;force-reload&apos; as an alias for &apos;restart&apos;. # #log_daemon_msg &quot;Reloading $DESC&quot; &quot;$NAME&quot; #do_reload #log_end_msg $? #;; restart|force-reload) # # If the &quot;reload&quot; option is implemented then remove the # &apos;force-reload&apos; alias # log_daemon_msg &quot;Restarting $DESC&quot; &quot;$NAME&quot; do_stop case &quot;$?&quot; in 0|1) do_start case &quot;$?&quot; in 0) log_end_msg 0 ;; 1) log_end_msg 1 ;; # Old process is still running *) log_end_msg 1 ;; # Failed to start esac ;; *) # Failed to stop log_end_msg 1 ;; esac ;; *) #echo &quot;Usage: $SCRIPTNAME &#123;start|stop|restart|reload|force-reload&#125;&quot; &gt;&amp;2 echo &quot;Usage: $SCRIPTNAME &#123;start|stop|restart|force-reload&#125;&quot; &gt;&amp;2 exit 3 ;;esac: script source Add execute authority sudo chmod +x /etc/init.d/supervisord Add the configuration into system sudo chkconfig --add supervisord Switch on the configuration and start sudo chkconfig supervisord onsudo service supervisord start ConclusionAfter the configuration, whenever AWS is rebooted, Supervisor will automatically restart","link":"/supervisor/"},{"title":"Task Scheduling of Laravel","text":"Open Task Scheduling fileOpen yourProjectName/app/Console/Kernel.php Config your scheduleHere is a schedule exampleprotected function schedule(Schedule $schedule)&#123; $schedule-&gt;call(function () &#123; Token::where(&apos;expiry_time&apos;, &apos;&lt;&apos;, time())-&gt;delete(); PaymentServiceOrders::deleteExpiredOrders(); Order::where(&apos;expiry_time&apos;, &apos;&lt;&apos;, Carbon::now())-&gt;delete(); &#125;)-&gt;daily();&#125; In my case, it’s to daily delete the expired orders Add the Task Scheduling into crontab sudo vim /etc/crontab * * * * * apache cd /var/www/html/yourProjectName &amp;&amp; php artisan schedule:run &gt;&gt; /dev/null 2&gt;&amp;1 Here are the meaning of * in orders Minute(0-59) Hour(0-23) What date in a month(1-31) Month(1-12) What day in a week(0-6) apacheit represents the user. It’s important here, because if you don’t set it properly, when error occurs as you execute the schedule, the log owner will be the user you set here, which might have authority problem. If you also log other information in other place, and the whole project might not be able to work properly when the log file reject to be written. cd ray cd /var/www/html/yourProjectName To where your project is php artisan schedule:run &gt;&gt; /dev/null 2&gt;&amp;1 Run the Task Scheduling command in your Laravel project Here you go!","link":"/taskSchedulingInLaravel/"},{"title":"Organise database with MySQL group by","text":"Hello everyone. It’s Ray! I shared how to import Chinese data into database yesterday, and today I’m going to share how to use MySQL group by to organise your database. Through the image above you could see that the data is divided with different district to each day. Let’s assume that the data of the rightest column is rainfall data, what if we want to access the average rainfall of each day from all districts?We could use MySQL-group by to achieve it. Take a look on the snippet of code below:select date, avg(rainfall) rainfall from rainfall group by date; The first date in the above code means name of the column, avg means to average the amount inside the braces, which means to average the amount of value on the rainfall column.The second rainfall is the name of this table, and the final date means that we reorganise the data with date as its unit. It would enable automatic calculation of averaging on the data on the same date. The result is as follows:￼Here you go! I hope my sharing has been helpful.","link":"/useGroupByToOrganiseYourDatabase/"},{"title":"Organise database with MySQL group by 2","text":"Hello everyone, it’s Ray! Today I’m going to share with you the further usage about how to manipulate database with group by, and inserting refined data into a new table. First, let’s start from the final image got on yesterday. What if we need the total rainfall of months, or years?￼ Please take a look on code below: &lt;?php// The year(date) and month(date) after select mean what data we want,// and the second year and month after braces means the name of the// column on shown data. Sum means to total all the of values of the// column within braces followed by, and the second rainfall means // the name of the column on shown data. Use &quot;group by&quot; to make shown// data grouped by month and year, and &quot;order by&quot; makes the data// arranged in ascending order.$selectQuery = &apos;SELECT year(date) year, month(date) month, sum(rainfall) rainfall from rainfall_by_date group by month(date), year(date) order by year(date) asc, month(date) asc;&apos;;// Make a select request to the database$selectResult = mysqli_query($dbc, $selectQuery);// Use while loop to repeat select request until all of the arrays// in $selectResult object are takenwhile ($selectRow = mysqli_fetch_array($selectResult))&#123; // Insert the data taken from table rainfall_by_date // into the table rainfall_by_month $insertQuery = &apos;INSERT INTO rainfall_by_month (year, month, rainfall) VALUES(&quot;&apos; . $selectRow[&apos;year&apos;] . &apos;&quot;, &quot;&apos; . $selectRow[&apos;month&apos;] . &apos;&quot;, &quot;&apos; . $selectRow[&apos;rainfall&apos;] . &apos;&quot;)&apos;; // Make an insert request. $insertResult = mysqli_query($dbc, $insertQuery);&#125; After executing the script above, you will be able to get the new table with refined data, as table below:￼ It’s my sharing today, see you guys tomorrow!","link":"/useGroupByToOrganiseYourDatabasePart2/"},{"title":"What is in git log?","text":"Hello everyone, It’s Ray! Today I am going to share with you some detail in git log Firstly, take a look on the image below: We could see that there is a long-random-looking string on every commit, and what the heck is that? This is a checksum produced by Git with SHA1 according to the committed content, by the way, what’s SHA1? SHA is the abbreviation of “security hash algorithm” There are several algorithm like this, and, moreover, SHA is not reversible, which means that if you got a hashed string like the one above, you wouldn’t be able to decode and reverse it back to the one before hashed. If you are interested in that, you could google it. I think google serves as a better teacher than me, lol. Now I am going to share a very very useful code! Git log --oneline Type git log --oneline You could see the difference between git log and git log --oneline As image shown above, you could see that git takes author, date information off, also only keep 7 characters from the original long-random-looking checksum. So could we use git checkout that we previously mentioned to switch between different commits? The answer is yes! Type git checkout cc92d2f (please note that yours will be different from mine, so just type the one shown on your computer) As photo shown above, we’ve successfully switched to the previous commit Type git checkout master Type git log --oneline Now we are back. After reading through article today, do you have better understanding on Git? See you guys!","link":"/whatIsInGitLog/"},{"title":"Why git is so much required?","text":"Hello everyone, it’s Ray. Today I’m going to share why Git is so a lot required. Firstly, have you once encountered that situation that something comes up when you are coding, it could be that your mom calls you, or even more serious that you forget to pick up your girlfriend. Unfortunately, at that very moment you happens to do debugging or develop a new feature. When you finally get some free time to proceed your coding, holly shit… something goes wrong! It’s hard to debug among a sea of code especially when you don’t know where to start. Or, sometimes when developing a new feature, unluckily it happens to affect the current feature and cause some error. When we realise that searching from nowhere might lack efficiency and want to go back to the moment when the new feature is not yet started, our good habit of saving file regularly just cover the light at the end of the tunnel. At this moment, we regret that we didn’t’ use git earlier. When you encounter some emergency during coding, or you want to start a new feature based on current one that works, you could simply use git to save it, and after that you could go there whenever you need. Also, this kind of saving takes the precedence over the built in saving function of editors, or IDEs that you use. In other words, even though you’ve saved the file on your editor or IDE, you could still go back to the point that you saved with Git. In other circumstance, except for the small project that you could complete on your own, it required multi-collaboration when it comes to a big project. Have you thought of how to efficiently collaborate with each other? After all, coding is sort of delicate work. One typo sometimes could keep the function from working properly. At this circumstance we always use Git to do the integration. Imaging that you do your portion on your own computer, and upload to a mutual folder after you finish it. Other team member do the same thing, and Git could do the integration. So to a coder, Git seems to be an integral tool.","link":"/whyGitIsSoMuchRequired/"},{"title":"Why should we use VIM?","text":"Hello everyone, it’s Ray! Today I’m going to share an amazing, very famous and powerful editor with a long history of over 50 years, it’s called “Vim” Sorry but I’m not going to introduce its history, if you are interested, you could google it. I think google serves as a better history teacher than me. Except for an editor specially designed for coding, it’s ubiquitous among all of those popular editors, or even IDEs, such as those I am using, PHPSTORM, or Sublime. Before further digging into Vim, let’s talk about, why would we use Vim? Before opting for my career as an coder, I already started to use touch typing, which means using the jutted point on F and J key to locate, so I could type without looking at my keyboard even I had my eyes covered. After starting to code, what annoyed me the most was not the logic, neither the syntax, instead, it’s the necessity of switching among the mouse, main key section, and arrow key section on my keyboard. Before the serendipity with Vim, I had been looking for keyboard with key.mapping function, because I reckon that the ideal way of typing is being able to complete all those required maneouvres with my palm fixed and stay on the main key area. Theoretically speaking, if there are two coders with same experience, logic, and skill, the one who could type faster definitely has more output, which means he could finish his job earlier. So you ask me, why should I finish my job so early? Hey bros, time is priceless! The earlier you finish your job, the more time will be at your disposal! For some tech fanatics, oh! Sorry, I mean with great passion on tech, like me, it means that I could have more time for tech stuff. Time is the most valuable currency, even more precious than Bitcoin! You could utilise it on companying with your family, friends, binge watching, or even with your girlfriend! Oh, sorry but you’ve got to have a girlfriend first, for someone who doesn’t, like me, I’m so sorry! The most basic and useful function of Vim is that arrow key function like up, down, left, and right could be achieved by simply pressing h, j, k, and l. In other words, it solves the irritant of switching from main key section and arrow key section with your right hand. Basically Vim is divided with three modes- normal, insert, and visual. That said moving your cursor on normal mode, coding on insert mode, and it’s visual mode where from time to time we highlight a whole line or a couple of characters for further copying or cutting or even something more delicate. After the dissection above, have you found the charm of Vim? I hope that you’ve been enjoyable on this article. See you guys!","link":"/whyWouldWeUseVIM/"}],"tags":[{"name":"Apache","slug":"Apache","link":"/tags/Apache/"},{"name":"MySQL","slug":"MySQL","link":"/tags/MySQL/"},{"name":"Composer","slug":"Composer","link":"/tags/Composer/"},{"name":"Laravel","slug":"Laravel","link":"/tags/Laravel/"},{"name":"PHP","slug":"PHP","link":"/tags/PHP/"},{"name":"GCP","slug":"GCP","link":"/tags/GCP/"},{"name":"QWIKLABS","slug":"QWIKLABS","link":"/tags/QWIKLABS/"},{"name":"Cloud Shell","slug":"Cloud-Shell","link":"/tags/Cloud-Shell/"},{"name":"gcloud","slug":"gcloud","link":"/tags/gcloud/"},{"name":"AllPay","slug":"AllPay","link":"/tags/AllPay/"},{"name":"Laravel Transaction","slug":"Laravel-Transaction","link":"/tags/Laravel-Transaction/"},{"name":"Laravel Log","slug":"Laravel-Log","link":"/tags/Laravel-Log/"},{"name":"ngrok","slug":"ngrok","link":"/tags/ngrok/"},{"name":"Laravel Middleware","slug":"Laravel-Middleware","link":"/tags/Laravel-Middleware/"},{"name":"Facebook long-lived token","slug":"Facebook-long-lived-token","link":"/tags/Facebook-long-lived-token/"},{"name":"Facebook never expired token","slug":"Facebook-never-expired-token","link":"/tags/Facebook-never-expired-token/"},{"name":"QUIKLABS","slug":"QUIKLABS","link":"/tags/QUIKLABS/"},{"name":"GCP-Marketplace","slug":"GCP-Marketplace","link":"/tags/GCP-Marketplace/"},{"name":"Network Load Balancer","slug":"Network-Load-Balancer","link":"/tags/Network-Load-Balancer/"},{"name":"HTTP Load Balancer","slug":"HTTP-Load-Balancer","link":"/tags/HTTP-Load-Balancer/"},{"name":"Kubernetes","slug":"Kubernetes","link":"/tags/Kubernetes/"},{"name":"Docker","slug":"Docker","link":"/tags/Docker/"},{"name":"AWS SQS","slug":"AWS-SQS","link":"/tags/AWS-SQS/"},{"name":"Laravel Queue","slug":"Laravel-Queue","link":"/tags/Laravel-Queue/"},{"name":"Laravel blade","slug":"Laravel-blade","link":"/tags/Laravel-blade/"},{"name":"Laravel template","slug":"Laravel-template","link":"/tags/Laravel-template/"},{"name":"Laravel view","slug":"Laravel-view","link":"/tags/Laravel-view/"},{"name":"find","slug":"find","link":"/tags/find/"},{"name":"ps","slug":"ps","link":"/tags/ps/"},{"name":"kill","slug":"kill","link":"/tags/kill/"},{"name":"ln","slug":"ln","link":"/tags/ln/"},{"name":"group","slug":"group","link":"/tags/group/"},{"name":"user","slug":"user","link":"/tags/user/"},{"name":"Node.js","slug":"Node-js","link":"/tags/Node-js/"},{"name":"class","slug":"class","link":"/tags/class/"},{"name":"object","slug":"object","link":"/tags/object/"},{"name":"PayPal REST API","slug":"PayPal-REST-API","link":"/tags/PayPal-REST-API/"},{"name":"PayPal refund","slug":"PayPal-refund","link":"/tags/PayPal-refund/"},{"name":"PayPal authorization","slug":"PayPal-authorization","link":"/tags/PayPal-authorization/"},{"name":"PayPal capture","slug":"PayPal-capture","link":"/tags/PayPal-capture/"},{"name":"PayPal void","slug":"PayPal-void","link":"/tags/PayPal-void/"},{"name":"PayPal create order","slug":"PayPal-create-order","link":"/tags/PayPal-create-order/"},{"name":"PayPal place funds on hold","slug":"PayPal-place-funds-on-hold","link":"/tags/PayPal-place-funds-on-hold/"},{"name":"Stackdriver","slug":"Stackdriver","link":"/tags/Stackdriver/"},{"name":"Laravel Image","slug":"Laravel-Image","link":"/tags/Laravel-Image/"},{"name":"Laravel package Intervention","slug":"Laravel-package-Intervention","link":"/tags/Laravel-package-Intervention/"},{"name":"Hexo","slug":"Hexo","link":"/tags/Hexo/"},{"name":"minos","slug":"minos","link":"/tags/minos/"},{"name":"bilingual","slug":"bilingual","link":"/tags/bilingual/"},{"name":"blog","slug":"blog","link":"/tags/blog/"},{"name":"multilingual","slug":"multilingual","link":"/tags/multilingual/"},{"name":"GCP persistent disk","slug":"GCP-persistent-disk","link":"/tags/GCP-persistent-disk/"},{"name":"GCP virtual machine","slug":"GCP-virtual-machine","link":"/tags/GCP-virtual-machine/"},{"name":"Docker Image","slug":"Docker-Image","link":"/tags/Docker-Image/"},{"name":"Docker Container","slug":"Docker-Container","link":"/tags/Docker-Container/"},{"name":"Docker Swarm","slug":"Docker-Swarm","link":"/tags/Docker-Swarm/"},{"name":"Docker Multi Stage","slug":"Docker-Multi-Stage","link":"/tags/Docker-Multi-Stage/"},{"name":"Docker Compose","slug":"Docker-Compose","link":"/tags/Docker-Compose/"},{"name":"Docker Service","slug":"Docker-Service","link":"/tags/Docker-Service/"},{"name":"Docker Rolling Update","slug":"Docker-Rolling-Update","link":"/tags/Docker-Rolling-Update/"},{"name":"Docker Push","slug":"Docker-Push","link":"/tags/Docker-Push/"},{"name":"Docker Deployment","slug":"Docker-Deployment","link":"/tags/Docker-Deployment/"},{"name":"git rebase -i","slug":"git-rebase-i","link":"/tags/git-rebase-i/"},{"name":"git rebase -i --onto","slug":"git-rebase-i-onto","link":"/tags/git-rebase-i-onto/"},{"name":"git reset --hard","slug":"git-reset-hard","link":"/tags/git-reset-hard/"},{"name":"git reset @^ --hard","slug":"git-reset-hard","link":"/tags/git-reset-hard/"},{"name":"git checkout -b","slug":"git-checkout-b","link":"/tags/git-checkout-b/"},{"name":"git flow","slug":"git-flow","link":"/tags/git-flow/"},{"name":"Facebook Graph API","slug":"Facebook-Graph-API","link":"/tags/Facebook-Graph-API/"},{"name":"git init","slug":"git-init","link":"/tags/git-init/"},{"name":"git revert","slug":"git-revert","link":"/tags/git-revert/"},{"name":"git tag -a","slug":"git-tag-a","link":"/tags/git-tag-a/"},{"name":"git checkout","slug":"git-checkout","link":"/tags/git-checkout/"},{"name":"git log --oneline","slug":"git-log-oneline","link":"/tags/git-log-oneline/"},{"name":"Daemon","slug":"Daemon","link":"/tags/Daemon/"},{"name":"SSH","slug":"SSH","link":"/tags/SSH/"},{"name":"Gitlab pusher","slug":"Gitlab-pusher","link":"/tags/Gitlab-pusher/"},{"name":"git config","slug":"git-config","link":"/tags/git-config/"},{"name":"git config --global user.name","slug":"git-config-global-user-name","link":"/tags/git-config-global-user-name/"},{"name":"git config --global user.email","slug":"git-config-global-user-email","link":"/tags/git-config-global-user-email/"},{"name":"AWS","slug":"AWS","link":"/tags/AWS/"},{"name":"garbles","slug":"garbles","link":"/tags/garbles/"},{"name":"AWS SES","slug":"AWS-SES","link":"/tags/AWS-SES/"},{"name":"Ngrok","slug":"Ngrok","link":"/tags/Ngrok/"},{"name":"Laravel Mail","slug":"Laravel-Mail","link":"/tags/Laravel-Mail/"},{"name":"git add","slug":"git-add","link":"/tags/git-add/"},{"name":"git commit","slug":"git-commit","link":"/tags/git-commit/"},{"name":"git commit -a","slug":"git-commit-a","link":"/tags/git-commit-a/"},{"name":"PayPal Payment Standard","slug":"PayPal-Payment-Standard","link":"/tags/PayPal-Payment-Standard/"},{"name":"PayPal IPN","slug":"PayPal-IPN","link":"/tags/PayPal-IPN/"},{"name":"Jenkins","slug":"Jenkins","link":"/tags/Jenkins/"},{"name":"CI/CD","slug":"CI-CD","link":"/tags/CI-CD/"},{"name":"CSV","slug":"CSV","link":"/tags/CSV/"},{"name":"multiple items","slug":"multiple-items","link":"/tags/multiple-items/"},{"name":"variables","slug":"variables","link":"/tags/variables/"},{"name":"Supervisor","slug":"Supervisor","link":"/tags/Supervisor/"},{"name":"MacOS","slug":"MacOS","link":"/tags/MacOS/"},{"name":"Laravel Task Scheduling","slug":"Laravel-Task-Scheduling","link":"/tags/Laravel-Task-Scheduling/"},{"name":"Linux crontab","slug":"Linux-crontab","link":"/tags/Linux-crontab/"},{"name":"group by","slug":"group-by","link":"/tags/group-by/"},{"name":"git log","slug":"git-log","link":"/tags/git-log/"},{"name":"VIM","slug":"VIM","link":"/tags/VIM/"}],"categories":[{"name":"Deployment","slug":"Deployment","link":"/categories/Deployment/"},{"name":"Payment Gateway","slug":"Payment-Gateway","link":"/categories/Payment-Gateway/"},{"name":"Facebook","slug":"Facebook","link":"/categories/Facebook/"},{"name":"GCP","slug":"GCP","link":"/categories/GCP/"},{"name":"Laravel","slug":"Laravel","link":"/categories/Laravel/"},{"name":"Linux","slug":"Linux","link":"/categories/Linux/"},{"name":"Node.js","slug":"Node-js","link":"/categories/Node-js/"},{"name":"OOP","slug":"OOP","link":"/categories/OOP/"},{"name":"Hexo","slug":"Hexo","link":"/categories/Hexo/"},{"name":"部署","slug":"部署","link":"/categories/部署/"},{"name":"Git","slug":"Git","link":"/categories/Git/"},{"name":"PHP","slug":"PHP","link":"/categories/PHP/"},{"name":"MySQL","slug":"MySQL","link":"/categories/MySQL/"},{"name":"VIM","slug":"VIM","link":"/categories/VIM/"}]}